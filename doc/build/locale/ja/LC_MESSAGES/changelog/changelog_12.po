# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../changelog/changelog_12.rst:3
msgid "1.2 Changelog"
msgstr ""

#: ../../changelog/unreleased_12:5
msgid ""
"Refactored :class:`.SQLCompiler` to expose a "
":meth:`.SQLCompiler.group_by_clause` method similar to the "
":meth:`.SQLCompiler.order_by_clause` and "
":meth:`.SQLCompiler.limit_clause` methods, which can be overridden by "
"dialects to customize how GROUP BY renders.  Pull request courtesy Samuel"
" Chou."
msgstr ""

#: ../../changelog/unreleased_12:5
msgid ""
"Fixed bug where the :paramref:`.Enum.create_constraint` flag on  the "
":class:`.Enum` datatype would not be propagated to copies of the type, "
"which affects use cases such as declarative mixins and abstract bases."
msgstr ""

#: ../../changelog/unreleased_12:5
msgid ""
"Added support for the :class:`.aggregate_order_by` function to receive "
"multiple ORDER BY elements, previously only a single element was "
"accepted."
msgstr ""

#: ../../changelog/unreleased_12:5
msgid ""
"Added a workaround for a MySQL bug #88718 introduced in the 8.0 series, "
"where the reflection of a foreign key constraint is not reporting the "
"correct case sensitivity for the referred column, leading to errors "
"during use of the reflected constraint such as when using the automap "
"extension. The workaround emits an additional query to the "
"information_schema tables in order to retrieve the correct case sensitive"
" name."
msgstr ""

#: ../../changelog/unreleased_12:5
msgid ""
"Fixed additional warnings generated by Python 3.7 due to changes in the "
"organization of the Python ``collections`` and ``collections.abc`` "
"packages. Previous ``collections`` warnings were fixed in version 1.2.11."
" Pull request courtesy xtreak."
msgstr ""

#: ../../changelog/unreleased_12:4
msgid ""
"Fixed issue where part of the utility language helper internals was "
"passing the wrong kind of argument to the Python ``__import__`` builtin "
"as the list of modules to be imported.  The issue produced no symptoms "
"within the core library but could cause issues with external applications"
" that redefine the ``__import__`` builtin or otherwise instrument it. "
"Pull request courtesy Joe Urciuoli."
msgstr ""

#: ../../changelog/changelog_12.rst:61
msgid ""
"Added a check within the weakref cleanup for the :class:`.InstanceState` "
"object to check for the presence of the ``dict`` builtin, in an effort to"
" reduce error messages generated when these cleanups occur during "
"interpreter shutdown.  Pull request courtesy Romuald Brunet."
msgstr ""

#: ../../changelog/changelog_12.rst:83
msgid ""
"Fixed bug where use of :class:`.Lateral` construct in conjunction with "
":meth:`.Query.join` as well as :meth:`.Query.select_entity_from` would "
"not apply clause adaption to the right side of the join.   \"lateral\" "
"introduces the use case of the right side of a join being correlatable.  "
"Previously, adaptation of this clause wasn't considered.   Note that in "
"1.2 only, a selectable introduced by :meth:`.Query.subquery` is still not"
" adapted due to :ticket:`4304`; the selectable needs to be produced by "
"the :func:`.select` function to be the right side of the \"lateral\" "
"join."
msgstr ""

#: ../../changelog/changelog_12.rst:108
msgid ""
"Fixed 1.2 regression caused by :ticket:`3472` where the handling of an "
"\"updated_at\" style column within the context of a post-update operation"
" would also occur for a row that is to be deleted following the update, "
"meaning both that a column with a Python-side value generator would show "
"the now-deleted value that was emitted for the UPDATE before the DELETE "
"(which was not the previous behavor), as well as that a SQL- emitted "
"value generator would have the attribute expired, meaning the previous "
"value would be unreachable due to the row having been deleted and the "
"object detached from the session.The \"postfetch\" logic that was added "
"as part of :ticket:`3472` is now skipped entirely for an object that "
"ultimately is to be deleted."
msgstr ""

#: ../../changelog/changelog_12.rst:70
msgid ""
"Fixed bug where the declarative scan for attributes would receive the "
"expression proxy delivered by a hybrid attribute at the class level, and "
"not the hybrid attribute itself, when receiving the descriptor via the "
"``@declared_attr`` callable on a subclass of an already-mapped class. "
"This would lead to an attribute that did not report itself as a hybrid "
"when viewed within :attr:`.Mapper.all_orm_descriptors`."
msgstr ""

#: ../../changelog/changelog_12.rst:25
msgid ""
"Fixed bug in PostgreSQL dialect where compiler keyword arguments such as "
"``literal_binds=True`` were not being propagated to a DISTINCT ON "
"expression."
msgstr ""

#: ../../changelog/changelog_12.rst:42
msgid ""
"Fixed the :func:`.postgresql.array_agg` function, which is a slightly "
"altered version of the usual :func:`.functions.array_agg` function, to "
"also accept an incoming \"type\" argument without forcing an ARRAY around"
" it, essentially the same thing that was fixed for the generic function "
"in 1.1 in :ticket:`4107`."
msgstr ""

#: ../../changelog/changelog_12.rst:52
msgid ""
"Fixed bug in PostgreSQL ENUM reflection where a case-sensitive, quoted "
"name would be reported by the query including quotes, which would not "
"match a target column during table reflection as the quotes needed to be "
"stripped off."
msgstr ""

#: ../../changelog/changelog_12.rst:96
msgid ""
"Fixed issue for cx_Oracle 7.0 where the behavior of Oracle "
"param.getvalue() now returns a list, rather than a single scalar value, "
"breaking autoincrement logic throughout the Core and ORM. The "
"dml_ret_array_val compatibility flag is used for cx_Oracle 6.3 and 6.4 to"
" establish compatible behavior with 7.0 and forward, for cx_Oracle 6.2.1 "
"and prior a version number check falls back to the old logic."
msgstr ""

#: ../../changelog/changelog_12.rst:33
msgid ""
"Fixed issue where :class:`.BakedQuery` did not include the specific query"
" class used by the :class:`.Session` as part of the cache key, leading to"
" incompatibilities when using custom query classes, in particular the "
":class:`.ShardedQuery` which has some different argument signatures."
msgstr ""

#: ../../changelog/changelog_12.rst:165
msgid ""
"Fixed issue in previously untested use case, allowing a declarative "
"mapped class to inherit from a classically-mapped class outside of the "
"declarative base, including that it accommodates for unmapped "
"intermediate classes. An unmapped intermediate class may specify "
"``__abstract__``, which is now interpreted correctly, or the intermediate"
" class can remain unmarked, and the classically mapped base class will be"
" detected within the hierarchy regardless. In order to anticipate "
"existing scenarios which may be mixing in classical mappings into "
"existing declarative hierarchies, an error is now raised if multiple "
"mapped bases are detected for a given class."
msgstr ""

#: ../../changelog/changelog_12.rst:142
msgid ""
"Fixed issue that is closely related to :ticket:`3639` where an expression"
" rendered in a boolean context on a non-native boolean backend would be "
"compared to 1/0 even though it is already an implcitly boolean "
"expression, when :meth:`.ColumnElement.self_group` were used.  While this"
" does not affect the user-friendly backends (MySQL, SQLite) it was not "
"handled by Oracle (and possibly SQL Server).   Whether or not the "
"expression is implicitly boolean on any database is now determined up "
"front as an additional check to not generate the integer comparison "
"within the compliation of the statement."
msgstr ""

#: ../../changelog/changelog_12.rst:179
msgid ""
"Added missing window function parameters "
":paramref:`.WithinGroup.over.range_` and "
":paramref:`.WithinGroup.over.rows` parameters to the "
":meth:`.WithinGroup.over` and :meth:`.FunctionFilter.over` methods, to "
"correspond to the range/rows feature added to the \"over\" method of SQL "
"functions as part of :ticket:`3049` in version 1.1."
msgstr ""

#: ../../changelog/changelog_12.rst:190
msgid ""
"Fixed bug where the multi-table support for UPDATE and DELETE statements "
"did not consider the additional FROM elements as targets for correlation,"
" when a correlated SELECT were also combined with the statement.  This "
"change now includes that a SELECT statement in the WHERE clause for such "
"a statement will try to auto-correlate back to these additional tables in"
" the parent UPDATE/DELETE or unconditionally correlate if "
":meth:`.Select.correlate` is used.  Note that auto-correlation raises an "
"error if the SELECT statement would have no FROM clauses as a result, "
"which can now occur if the parent UPDATE/DELETE specifies the same tables"
" in its additional set of tables; specify :meth:`.Select.correlate` "
"explicitly to resolve."
msgstr ""

#: ../../changelog/changelog_12.rst:156
msgid ""
"For cx_Oracle, Integer datatypes will now be bound to \"int\", per advice"
" from the cx_Oracle developers.  Previously, using cx_Oracle.NUMBER "
"caused a loss in precision within the cx_Oracle 6.x series."
msgstr ""

#: ../../changelog/changelog_12.rst:127
msgid ""
"Started importing \"collections\" from \"collections.abc\" under Python "
"3.3 and greater for Python 3.8 compatibility.  Pull request courtesy "
"Nathaniel Knight."
msgstr ""

#: ../../changelog/changelog_12.rst:134
msgid ""
"Fixed issue where the \"schema\" name used for a SQLite database within "
"table reflection would not quote the schema name correctly.  Pull request"
" courtesy Phillip Cloud."
msgstr ""

#: ../../changelog/changelog_12.rst:221
msgid ""
"Fixed bug in :class:`.Bundle` construct where placing two columns of the "
"same name would be de-duplicated, when the :class:`.Bundle` were used as "
"part of the rendered SQL, such as in the ORDER BY or GROUP BY of the "
"statement."
msgstr ""

#: ../../changelog/changelog_12.rst:230
msgid ""
"Fixed regression in 1.2.9 due to :ticket:`4287` where using a "
":class:`.Load` option in conjunction with a string wildcard would result "
"in a TypeError."
msgstr ""

#: ../../changelog/changelog_12.rst:210
msgid ""
"Fixed bug where a :class:`.Sequence` would be dropped explicitly before "
"any :class:`.Table` that refers to it, which breaks in the case when the "
"sequence is also involved in a server-side default for that table, when "
"using :meth:`.MetaData.drop_all`.   The step which processes sequences to"
" be dropped via non server-side column default functions is now invoked "
"after the table itself is dropped."
msgstr ""

#: ../../changelog/changelog_12.rst:286
msgid ""
"Fixed issue where chaining multiple join elements inside of "
":meth:`.Query.join` might not correctly adapt to the previous left-hand "
"side, when chaining joined inheritance classes that share the same base "
"class."
msgstr ""

#: ../../changelog/changelog_12.rst:295
msgid ""
"Fixed bug in cache key generation for baked queries which could cause a "
"too-short cache key to be generated for the case of eager loads across "
"subclasses.  This could in turn cause the eagerload query to be cached in"
" place of a non-eagerload query, or vice versa, for a polymorhic "
"\"selectin\" load, or possibly for lazy loads or selectin loads as well."
msgstr ""

#: ../../changelog/changelog_12.rst:329
msgid ""
"Fixed bug in new polymorphic selectin loading where the BakedQuery used "
"internally would be mutated by the given loader options, which would both"
" inappropriately mutate the subclass query as well as carry over the "
"effect to subsequent queries."
msgstr ""

#: ../../changelog/changelog_12.rst:396
msgid ""
"Fixed regression caused by :ticket:`4256` (itself a regression fix for "
":ticket:`4228`) which breaks an undocumented behavior which converted for"
" a non-sequence of entities passed directly to the :class:`.Query` "
"constructor into a single-element sequence.  While this behavior was "
"never supported or documented, it's already in use so has been added as a"
" behavioral contract to :class:`.Query`."
msgstr ""

#: ../../changelog/changelog_12.rst:407
msgid ""
"Fixed an issue that was both a performance regression in 1.2 as well as "
"an incorrect result regarding the \"baked\" lazy loader, involving the "
"generation of cache keys from the original :class:`.Query` object's "
"loader options.  If the loader options were built up in a \"branched\" "
"style using common base elements for multiple options, the same options "
"would be rendered into the cache key repeatedly, causing both a "
"performance issue as well as generating the wrong cache key.  This is "
"fixed, along with a performance improvement when such \"branched\" "
"options are applied via :meth:`.Query.options` to prevent the same option"
" objects from being applied repeatedly."
msgstr ""

#: ../../changelog/changelog_12.rst:264
msgid ""
"Fixed regression in 1.2 due to :ticket:`4147` where a :class:`.Table` "
"that has had some of its indexed columns redefined with new ones, as "
"would occur when overriding columns during reflection or when using "
":paramref:`.Table.extend_existing`, such that the "
":meth:`.Table.tometadata` method would fail when attempting to copy those"
" indexes as they still referred to the replaced column.   The copy logic "
"now accommodates for this condition."
msgstr ""

#: ../../changelog/changelog_12.rst:241
msgid ""
"Fixed percent-sign doubling in mysql-connector-python dialect, which does"
" not require de-doubling of percent signs.   Additionally, the  mysql- "
"connector-python driver is inconsistent in how it passes the column names"
" in cursor.description, so a workaround decoder has been added to "
"conditionally decode these randomly-sometimes-bytes values to unicode "
"only if needed.  Also improved test support for mysql-connector-python, "
"however it should be noted that this driver still has issues with unicode"
" that continue to be unresolved as of yet."
msgstr ""

#: ../../changelog/changelog_12.rst:277
msgid ""
"Fixed bug in index reflection where on MySQL 8.0 an index that includes "
"ASC or DESC in an indexed column specfication would not be correctly "
"reflected, as MySQL 8.0 introduces support for returning this information"
" in a table definition string."
msgstr ""

#: ../../changelog/changelog_12.rst:358
msgid ""
"Fixed bug in MySQLdb dialect and variants such as PyMySQL where an "
"additional \"unicode returns\" check upon connection makes explicit use "
"of the \"utf8\" character set, which in MySQL 8.0 emits a warning that "
"utf8mb4 should be used.  This is now replaced with a utf8mb4 equivalent. "
"Documentation is also updated for the MySQL dialect to specify utf8mb4 in"
" all examples.  Additional changes have been made to the test suite to "
"use utf8mb3 charsets and databases (there seem to be collation issues in "
"some edge cases with utf8mb4), and to support configuration default "
"changes made in MySQL 8.0 such as explicit_defaults_for_timestamp as well"
" as new errors raised for invalid MyISAM indexes."
msgstr ""

#: ../../changelog/changelog_12.rst:375
msgid ""
"The :class:`.Update` construct now accommodates a :class:`.Join` object "
"as supported by MySQL for UPDATE..FROM.  As the construct already "
"accepted an alias object for a similar purpose, the feature of UPDATE "
"against a non-table was already implied so this has been added."
msgstr ""

#: ../../changelog/changelog_12.rst:304
msgid ""
"Fixed issue in test suite where SQLite 3.24 added a new reserved word "
"that conflicted with a usage in TypeReflectionTest.  Pull request "
"courtesy Nils Philippsen."
msgstr ""

#: ../../changelog/changelog_12.rst:255
msgid ""
"Fixed bug in MSSQL reflection where when two same-named tables in "
"different schemas had same-named primary key constraints, foreign key "
"constraints referring to one of the tables would have their columns "
"doubled, causing errors.   Pull request courtesy Sean Dunn."
msgstr ""

#: ../../changelog/changelog_12.rst:384
msgid ""
"Fixed issue within the SQL Server dialect under Python 3 where when "
"running against a non-standard SQL server database that does not contain "
"either the \"sys.dm_exec_sessions\" or \"sys.dm_pdw_nodes_exec_sessions\""
" views, leading to a failure to fetch the isolation level, the error "
"raise would fail due to an UnboundLocalError."
msgstr ""

#: ../../changelog/changelog_12.rst:313
msgid ""
"Added a new event currently used only by the cx_Oracle dialect, "
":meth:`.DialectEvents.setiputsizes`.  The event passes a dictionary of "
":class:`.BindParameter` objects to DBAPI-specific type objects that will "
"be passed, after conversion to parameter names, to the cx_Oracle "
"``cursor.setinputsizes()`` method.  This allows both visibility into the "
"setinputsizes process as well as the ability to alter the behavior of "
"what datatypes are passed to this method."
msgstr ""

#: ../../changelog/changelog_12.rst:323
msgid ":ref:`cx_oracle_setinputsizes`"
msgstr ""

#: ../../changelog/changelog_12.rst:422
msgid ""
"Fixed INSERT FROM SELECT with CTEs for the Oracle and MySQL dialects, "
"where the CTE was being placed above the entire statement as is typical "
"with other databases, however Oracle and MariaDB 10.2 wants the CTE "
"underneath the \"INSERT\" segment. Note that the Oracle and MySQL "
"dialects don't yet work when a CTE is applied to a subquery inside of an "
"UPDATE or DELETE statement, as the CTE is still applied to the top rather"
" than inside the subquery."
msgstr ""

#: ../../changelog/changelog_12.rst:347
msgid ""
"Added new attribute :attr:`.Query.lazy_loaded_from` which is populated "
"with an :class:`.InstanceState` that is using this :class:`.Query` in "
"order to lazy load a relationship.  The rationale for this is that it "
"serves as a hint for the horizontal sharding feature to use, such that "
"the identity token of the state can be used as the default identity token"
" to use for the query within id_chooser()."
msgstr ""

#: ../../changelog/changelog_12.rst:338
msgid ""
"Replaced the usage of inspect.formatargspec() with a vendored version "
"copied from the Python standard library, as inspect.formatargspec() is "
"deprecated and as of Python 3.7.0 is emitting a warning."
msgstr ""

#: ../../changelog/changelog_12.rst:439
msgid ""
"Fixed regression in 1.2.7 caused by :ticket:`4228`, which itself was "
"fixing a 1.2-level regression, where the ``query_cls`` callable passed to"
" a :class:`.Session` was assumed to be a subclass of :class:`.Query`  "
"with class method availability, as opposed to an arbitrary callable.    "
"In particular, the dogpile caching example illustrates ``query_cls`` as a"
" function and not a :class:`.Query` subclass."
msgstr ""

#: ../../changelog/changelog_12.rst:539
msgid ""
"Fixed a long-standing regression that occurred in version 1.0, which "
"prevented the use of a custom :class:`.MapperOption` that alters the "
"_params of a :class:`.Query` object for a lazy load, since the lazy "
"loader itself would overwrite those parameters.   This applies to the "
"\"temporal range\" example on the wiki.  Note however that the "
":meth:`.Query.populate_existing` method is now required in order to "
"rewrite the mapper options associated with an object already loaded in "
"the identity map."
msgstr ""

#: ../../changelog/changelog_12.rst:549
msgid ""
"As part of this change, a custom defined :class:`.MapperOption` will now "
"cause lazy loaders related to the target object to use a non-baked query "
"by default unless the :meth:`.MapperOption._generate_cache_key` method is"
" implemented. In particular, this repairs one regression which occured "
"when using the dogpile.cache \"advanced\" example, which was not "
"returning cached results and instead emitting SQL due to an "
"incompatibility with the baked query loader; with the change, the "
"``RelationshipCache`` option included for many releases in the dogpile "
"example will disable the \"baked\" query altogether. Note that the "
"dogpile example is also modernized to avoid both of these issues as part "
"of issue :ticket:`4258`."
msgstr ""

#: ../../changelog/changelog_12.rst:576
msgid ""
"Fixed bug where the new :meth:`.baked.Result.with_post_criteria` method "
"would not interact with a subquery-eager loader correctly, in that the "
"\"post criteria\" would not be applied to embedded subquery eager "
"loaders.   This is related to :ticket:`4128` in that the post criteria "
"feature is now used by the lazy loader."
msgstr ""

#: ../../changelog/changelog_12.rst:594
msgid ""
"Updated the dogpile.caching example to include new structures that "
"accommodate for the \"baked\" query system, which is used by default "
"within lazy loaders and some eager relationship loaders. The "
"dogpile.caching \"relationship_caching\" and \"advanced\" examples were "
"also broken due to :ticket:`4256`.  The issue here is also worked-around "
"by the fix in :ticket:`4128`."
msgstr ""

#: ../../changelog/changelog_12.rst:450
msgid ""
"Fixed connection pool issue whereby if a disconnection error were raised "
"during the connection pool's \"reset on return\" sequence in conjunction "
"with an explicit transaction opened against the enclosing "
":class:`.Connection` object (such as from calling :meth:`.Session.close` "
"without a rollback or commit, or calling :meth:`.Connection.close` "
"without first closing a transaction declared with "
":meth:`.Connection.begin`), a double-checkin would result, which could "
"then lead towards concurrent checkouts of the same connection. The "
"double-checkin condition is now prevented overall by an assertion, as "
"well as the specific double-checkin scenario has been fixed."
msgstr ""

#: ../../changelog/changelog_12.rst:530
msgid ""
"Fixed a reference leak issue where the values of the parameter dictionary"
" used in a statement execution would remain referenced by the \"compiled "
"cache\", as a result of storing the key view used by Python 3 dictionary "
"keys().  Pull request courtesy Olivier Grisel."
msgstr ""

#: ../../changelog/changelog_12.rst:495
msgid ""
"Fixed issue where the \"ambiguous literal\" error message used when "
"interpreting literal values as SQL expression values would encounter a "
"tuple value, and fail to format the message properly. Pull request "
"courtesy Miguel Ventura."
msgstr ""

#: ../../changelog/changelog_12.rst:504
msgid ""
"Fixed a 1.2 regression caused by :ticket:`4061` where the SQL Server "
"\"BIT\" type would be considered to be \"native boolean\".  The goal here"
" was to avoid creating a CHECK constraint on the column, however the "
"bigger issue is that the BIT value does not behave like a true/false "
"constant and cannot be interpreted as a standalone expression, e.g. "
"\"WHERE <column>\".   The SQL Server dialect now goes back to being non-"
"native boolean, but with an extra flag that still avoids creating the "
"CHECK constraint."
msgstr ""

#: ../../changelog/changelog_12.rst:465
msgid ""
"The Oracle BINARY_FLOAT and BINARY_DOUBLE datatypes now participate "
"within cx_Oracle.setinputsizes(), passing along NATIVE_FLOAT, so as to "
"support the NaN value.  Additionally, :class:`.oracle.BINARY_FLOAT`, "
":class:`.oracle.BINARY_DOUBLE` and :class:`.oracle.DOUBLE_PRECISION` now "
"subclass :class:`.Float`, since these are floating point datatypes, not "
"decimal.  These datatypes were already defaulting the "
":paramref:`.Float.asdecimal` flag to False in line with what "
":class:`.Float` already does."
msgstr ""

#: ../../changelog/changelog_12.rst:477
msgid ""
"Added reflection capabilities for the :class:`.oracle.BINARY_FLOAT`, "
":class:`.oracle.BINARY_DOUBLE` datatypes."
msgstr ""

#: ../../changelog/changelog_12.rst:517
msgid ""
"Altered the Oracle dialect such that when an :class:`.Integer` type is in"
" use, the cx_Oracle.NUMERIC type is set up for setinputsizes().  In "
"SQLAlchemy 1.1 and earlier, cx_Oracle.NUMERIC was passed for all numeric "
"types unconditionally, and in 1.2 this was removed to allow for better "
"numeric precision.  However, for integers, some database/client setups "
"will fail to coerce boolean values True/False into integers which "
"introduces regressive behavior when using SQLAlchemy 1.2.  Overall, the "
"setinputsizes logic seems like it will need a lot more flexibility going "
"forward so this is a start for that."
msgstr ""

#: ../../changelog/changelog_12.rst:485
msgid ""
"The horizontal sharding extension now makes use of the identity token "
"added to ORM identity keys as part of :ticket:`4137`, when an object "
"refresh or column-based deferred load or unexpiration operation occurs. "
"Since we know the \"shard\" that the object originated from, we make use "
"of this value when refreshing, thereby avoiding queries against other "
"shards that don't match this object's identity in any case."
msgstr ""

#: ../../changelog/changelog_12.rst:566
msgid ""
"Fixed a race condition which could occur if automap "
":meth:`.AutomapBase.prepare` were used within a multi-threaded context "
"against other threads which  may call :func:`.configure_mappers` as a "
"result of use of other mappers.  The unfinished mapping work of automap "
"is particularly sensitive to being pulled in by a "
":func:`.configure_mappers` step leading to errors."
msgstr ""

#: ../../changelog/changelog_12.rst:586
msgid ""
"Fixed a bug in the test suite where if an external dialect returned "
"``None`` for ``server_version_info``, the exclusion logic would raise an "
"``AttributeError``."
msgstr ""

#: ../../changelog/changelog_12.rst:609
msgid ""
"Fixed regression in 1.2 within sharded query feature where the new "
"\"identity_token\" element was not being correctly considered within the "
"scope of a lazy load operation, when searching the identity map for a "
"related many-to-one element.   The new behavior will allow for making use"
" of the \"id_chooser\" in order to determine the best identity key to "
"retrieve from the identity map.  In order to achieve this, some "
"refactoring of 1.2's \"identity_token\" approach has made some slight "
"changes to the implementation of ``ShardedQuery`` which should be noted "
"for other derivations of this class."
msgstr ""

#: ../../changelog/changelog_12.rst:667
msgid ""
"Fixed issue in single-inheritance loading where the use of an aliased "
"entity against a single-inheritance subclass in conjunction with the "
":meth:`.Query.select_from` method would cause the SQL to be rendered with"
" the unaliased table mixed in to the query, causing a cartesian product."
"  In particular this was affecting the new \"selectin\" loader when used "
"against a single-inheritance subclass."
msgstr ""

#: ../../changelog/changelog_12.rst:658
msgid ""
"Fixed issue where the compilation of an INSERT statement with the "
"\"literal_binds\" option that also uses an explicit sequence and "
"\"inline\" generation, as on Postgresql and Oracle, would fail to "
"accommodate the extra keyword argument within the sequence processing "
"routine."
msgstr ""

#: ../../changelog/changelog_12.rst:651
msgid ""
"Added new PG type :class:`.postgresql.REGCLASS` which assists in casting "
"table names to OID values.  Pull request courtesy Sebastian Bank."
msgstr ""

#: ../../changelog/changelog_12.rst:623
msgid ""
"Fixed bug where the special \"not equals\" operator for the Postgresql "
"\"range\" datatypes such as DATERANGE would fail to render \"IS NOT "
"NULL\" when compared to the Python ``None`` value."
msgstr ""

#: ../../changelog/changelog_12.rst:633
msgid ""
"Fixed 1.2 regression caused by :ticket:`4060` where the query used to "
"reflect SQL Server cross-schema foreign keys was limiting the criteria "
"incorrectly."
msgstr ""

#: ../../changelog/changelog_12.rst:642
msgid ""
"The Oracle NUMBER datatype is reflected as INTEGER if the precision is "
"NULL and the scale is zero, as this is how INTEGER values come back when "
"reflected from Oracle's tables.  Pull request courtesy Kent Bower."
msgstr ""

#: ../../changelog/changelog_12.rst:738
msgid ""
"Fixed bug where using :meth:`.Mutable.associate_with` or "
":meth:`.Mutable.as_mutable` in conjunction with a class that has non- "
"primary mappers set up with alternatively-named attributes would produce "
"an attribute error.  Since non-primary mappers are not used for "
"persistence, the mutable extension now excludes non-primary mappers from "
"its instrumentation steps."
msgstr ""

#: ../../changelog/changelog_12.rst:707
msgid ""
"Fixed bug in connection pool where a connection could be present in the "
"pool without all of its \"connect\" event handlers called, if a previous "
"\"connect\" handler threw an exception; note that the dialects themselves"
" have connect handlers that emit SQL, such as those which set transaction"
" isolation, which can fail if the database is in a non-available state, "
"but still allows a connection.  The connection is now invalidated first "
"if any of the connect handlers fail."
msgstr ""

#: ../../changelog/changelog_12.rst:698
msgid ""
"Fixed a regression that occurred from the previous fix to :ticket:`4204` "
"in version 1.2.5, where a CTE that refers to itself after the "
":meth:`.CTE.alias` method has been called would not refer to iself "
"correctly."
msgstr ""

#: ../../changelog/changelog_12.rst:690
msgid ""
"Added support for \"PARTITION BY\" in Postgresql table definitions, using"
" \"postgresql_partition_by\".  Pull request courtesy Vsevolod Solovyov."
msgstr ""

#: ../../changelog/changelog_12.rst:682
msgid ""
"Adjusted the SQL Server version detection for pyodbc to only allow for "
"numeric tokens, filtering out non-integers, since the dialect does tuple-"
" numeric comparisons with this value.  This is normally true for all "
"known SQL Server / pyodbc drivers in any case."
msgstr ""

#: ../../changelog/changelog_12.rst:719
msgid ""
"The minimum cx_Oracle version supported is 5.2 (June 2015).  Previously, "
"the dialect asserted against version 5.0 but as of 1.2.2 we are using "
"some symbols that did not appear until 5.2."
msgstr ""

#: ../../changelog/changelog_12.rst:727
msgid ""
"Removed a warning that would be emitted when calling upon "
"``__table_args__``, ``__mapper_args__`` as named with a "
"``@declared_attr`` method, when called from a non-mapped declarative "
"mixin.  Calling these directly is documented as the approach to use when "
"one is overidding one of these methods on a mapped class.  The warning "
"still emits for regular attribute names."
msgstr ""

#: ../../changelog/changelog_12.rst:791
msgid ""
"Added new feature :meth:`.Query.only_return_tuples`.  Causes the "
":class:`.Query` object to return keyed tuple objects unconditionally even"
" if the query is against a single entity.   Pull request courtesy Eric "
"Atkin."
msgstr ""

#: ../../changelog/changelog_12.rst:763
msgid ""
"Fixed bug in new \"polymorphic selectin\" loading when a selection of "
"polymorphic objects were to be partially loaded from a relationship lazy "
"loader, leading to an \"empty IN\" condition within the load that raises "
"an error for the \"inline\" form of \"IN\"."
msgstr ""

#: ../../changelog/changelog_12.rst:781
msgid ""
"Fixed 1.2 regression where a mapper option that contains an "
":class:`.AliasedClass` object, as is typical when using the "
":meth:`.QueryableAttribute.of_type` method, could not be pickled.   1.1's"
" behavior was to omit the aliased class objects from the path, so this "
"behavior is restored."
msgstr ""

#: ../../changelog/changelog_12.rst:754
msgid ""
"Fixed bug in :class:.`CTE` construct along the same lines as that of "
":ticket:`4204` where a :class:`.CTE` that was aliased would not copy "
"itself correctly during a \"clone\" operation as is frequent within the "
"ORM as well as when using the :meth:`.ClauseElement.params` method."
msgstr ""

#: ../../changelog/changelog_12.rst:772
msgid ""
"Fixed bug in CTE rendering where a :class:`.CTE` that was also turned "
"into an :class:`.Alias` would not render its \"ctename AS aliasname\" "
"clause appropriately if there were more than one reference to the CTE in "
"a FROM clause."
msgstr ""

#: ../../changelog/changelog_12.rst:801
msgid ""
"Fixed bug in new \"expanding IN parameter\" feature where the bind "
"parameter processors for values wasn't working at all, tests failed to "
"cover this pretty basic case which includes that ENUM values weren't "
"working."
msgstr ""

#: ../../changelog/changelog_11.rst:39
msgid ""
"Fixed bug in Postgresql COLLATE / ARRAY adjustment first introduced in "
":ticket:`4006` where new behaviors in Python 3.7 regular expressions "
"caused the fix to fail."
msgstr ""

#: ../../changelog/changelog_11.rst:28
msgid ""
"MySQL dialects now query the server version using ``SELECT @@version`` "
"explicitly to the server to ensure we are getting the correct version "
"information back.   Proxy servers like MaxScale interfere with the value "
"that is passed to the DBAPI's connection.server_version value so this is "
"no longer reliable."
msgstr ""

#: ../../changelog/changelog_12.rst:813
msgid ""
"Fixed 1.2 regression in ORM versioning feature where a mapping against a "
":func:`.select` or :func:`.alias` that also used a versioning column "
"against the underlying table would fail due to the check added as part of"
" :ticket:`3673`."
msgstr ""

#: ../../changelog/changelog_12.rst:822
msgid ""
"Fixed regression caused in 1.2.3 due to fix from :ticket:`4181` where the"
" changes to the event system involving :class:`.Engine` and "
":class:`.OptionEngine` did not accommodate for event removals, which "
"would raise an ``AttributeError`` when invoked at the class level."
msgstr ""

#: ../../changelog/changelog_12.rst:832
msgid ""
"Fixed bug where CTE expressions would not have their name or alias name "
"quoted when the given name is case sensitive or otherwise requires "
"quoting. Pull request courtesy Eric Atkin."
msgstr ""

#: ../../changelog/changelog_12.rst:953
msgid ""
"Added new argument :paramref:`.attributes.set_attribute.inititator` to "
"the :func:`.attributes.set_attribute` function, allowing an event token "
"received from a listener function to be propagated to subsequent set "
"events."
msgstr ""

#: ../../changelog/changelog_11.rst:74
msgid ""
"Fixed issue in post_update feature where an UPDATE is emitted when the "
"parent object has been deleted but the dependent object is not.   This "
"issue has existed for a long time however since 1.2 now asserts rows "
"matched for post_update, this was raising an error."
msgstr ""

#: ../../changelog/changelog_11.rst:102
msgid ""
"Fixed regression caused by fix for issue :ticket:`4116` affecting "
"versions 1.2.2 as well as 1.1.15, which had the effect of mis-calculation"
" of the \"owning class\" of an :class:`.AssociationProxy` as the "
"``NoneType`` class in some declarative mixin/inheritance situations as "
"well as if the association proxy were accessed off of an un-mapped class."
"  The \"figure out the owner\" logic has been replaced by an in-depth "
"routine that searches through the complete mapper hierarchy assigned to "
"the class or subclass to determine the correct (we hope) match; will not "
"assign the owner if no match is found.  An exception is now raised if the"
" proxy is used against an un-mapped instance."
msgstr ""

#: ../../changelog/changelog_12.rst:862
msgid ""
"Fixed bug where the :class:`.Bundle` object did not correctly report upon"
" the primary :class:`.Mapper` object represened by the bundle, if any.   "
"An immediate side effect of this issue was that the new selectinload "
"loader strategy wouldn't work with the horizontal sharding extension."
msgstr ""

#: ../../changelog/changelog_12.rst:914
msgid ""
"Fixed bug in concrete inheritance mapping where user-defined attributes "
"such as hybrid properties that mirror the names of mapped attributes from"
" sibling classes would be overwritten by the mapper as non-accessible at "
"the instance level.   Additionally ensured that user-bound descriptors "
"are not implicitly invoked at the class level during the mapper "
"configuration stage."
msgstr ""

#: ../../changelog/changelog_12.rst:925
msgid ""
"Fixed bug where the :func:`.orm.reconstructor` event helper would not be "
"recognized if it were applied to the ``__init__()`` method of the mapped "
"class."
msgstr ""

#: ../../changelog/changelog_12.rst:882
msgid ""
"Fixed bug where events associated with an :class:`Engine` at the class "
"level would be doubled when the :meth:`.Engine.execution_options` method "
"were used.  To achieve this, the semi-private class "
":class:`.OptionEngine` no longer accepts events directly at the class "
"level and will raise an error; the class only propagates class-level "
"events from its parent :class:`.Engine`.   Instance-level events continue"
" to work as before."
msgstr ""

#: ../../changelog/changelog_12.rst:933
msgid ""
"The :class:`.URL` object now allows query keys to be specified multiple "
"times where their values will be joined into a list.  This is to support "
"the plugins feature documented at :class:`.CreateEnginePlugin` which "
"documents that \"plugin\" can be passed multiple times. Additionally, the"
" plugin names can be passed to :func:`.create_engine` outside of the URL "
"using the new :paramref:`.create_engine.plugins` parameter."
msgstr ""

#: ../../changelog/changelog_12.rst:944
msgid ""
"Added support for :class:`.Enum` to persist the values of the "
"enumeration, rather than the keys, when using a Python pep-435 style "
"enumerated object. The user supplies a callable function that will return"
" the string values to be persisted.  This allows enumerations against "
"non-string values to be value-persistable as well.  Pull request courtesy"
" Jon Snyder."
msgstr ""

#: ../../changelog/changelog_12.rst:873
msgid ""
"Fixed bug where the :class:`.Enum` type wouldn't handle enum \"aliases\" "
"correctly, when more than one key refers to the same value.  Pull request"
" courtesy Daniel Knell."
msgstr ""

#: ../../changelog/changelog_11.rst:65
msgid ""
"Added \"SSL SYSCALL error: Operation timed out\" to the list of messages "
"that trigger a \"disconnect\" scenario for the psycopg2 driver.  Pull "
"request courtesy André Cruz."
msgstr ""

#: ../../changelog/changelog_11.rst:127
msgid ""
"Added \"TRUNCATE\" to the list of keywords accepted by the Postgresql "
"dialect as an \"autocommit\"-triggering keyword. Pull request courtesy "
"Jacob Hayes."
msgstr ""

#: ../../changelog/changelog_12.rst:852
msgid ""
"Fixed the import error raised when a platform has neither pysqlite2 nor "
"sqlite3 installed, such that the sqlite3-related import error is raised, "
"not the pysqlite2 one which is not the actual failure mode.  Pull request"
" courtesy Robin."
msgstr ""

#: ../../changelog/changelog_12.rst:904
msgid ""
"The ON DELETE options for foreign keys are now part of Oracle reflection."
"  Oracle does not support ON UPDATE cascades.  Pull request courtesy "
"Miroslav Shubernetskiy."
msgstr ""

#: ../../changelog/changelog_12.rst:844
msgid ""
"Fixed bug in cx_Oracle disconnect detection, used by pre_ping and other "
"features, where an error could be raised as DatabaseError which includes "
"a numeric error code; previously we weren't checking in this case for a "
"disconnect code."
msgstr ""

#: ../../changelog/changelog_11.rst:136
msgid ""
"Fixed a fairly serious connection pool bug where a connection that is "
"acquired after being refreshed as a result of a user-defined "
":class:`.DisconnectionError` or due to the 1.2-released \"pre_ping\" "
"feature would not be correctly reset if the connection were returned to "
"the pool by weakref cleanup (e.g. the front-facing object is garbage "
"collected); the weakref would still refer to the previously invalidated "
"DBAPI connection which would have the reset operation erroneously called "
"upon it instead. This would lead to stack traces in the logs and a "
"connection being checked into the pool without being reset, which can "
"cause locking issues."
msgstr ""

#: ../../changelog/changelog_12.rst:895
msgid ""
"A test added in 1.2 thought to confirm a Python 2.7 behavior turns out to"
" be confirming the behavior only as of Python 2.7.8. Python bug #8743 "
"still impacts set comparison in Python 2.7.7 and earlier, so the test in "
"question involving AssociationSet no longer runs for these older Python "
"2.7 versions."
msgstr ""

#: ../../changelog/changelog_12.rst:974
msgid ""
"Fixed 1.2 regression regarding new bulk_replace event where a backref "
"would fail to remove an object from the previous owner when a bulk-"
"assignment assigned the object to a new owner."
msgstr ""

#: ../../changelog/changelog_12.rst:992
msgid ""
"Added more MySQL 8.0 reserved words to the MySQL dialect for quoting "
"purposes.  Pull request courtesy Riccardo Magliocchetti."
msgstr ""

#: ../../changelog/changelog_12.rst:966
msgid ""
"Added ODBC error code 10054 to the list of error codes that count as a "
"disconnect for ODBC / MSSQL server."
msgstr ""

#: ../../changelog/changelog_12.rst:983
msgid ""
"The cx_Oracle dialect now calls setinputsizes() with cx_Oracle.NCHAR "
"unconditionally when the NVARCHAR2 datatype, in SQLAlchemy corresponding "
"to sqltypes.Unicode(), is in use.  Per cx_Oracle's author this allows the"
" correct conversions to occur within the Oracle client regardless of the "
"setting for NLS_NCHAR_CHARACTERSET."
msgstr ""

#: ../../changelog/changelog_11.rst:152
msgid ""
"Fixed bug where an object that is expunged during a rollback of a nested "
"or subtransaction which also had its primary key mutated would not be "
"correctly removed from the session, causing subsequent issues in using "
"the session."
msgstr ""

#: ../../changelog/changelog_12.rst:1004
msgid ""
"Fixed regression where pickle format of a Load / _UnboundLoad object "
"(e.g. loader options) changed and ``__setstate__()`` was raising an "
"UnboundLocalError for an object received from the legacy format, even "
"though an attempt was made to do so.  tests are now added to ensure this "
"works."
msgstr ""

#: ../../changelog/changelog_12.rst:1025
msgid ""
"Fixed regression caused by new lazyload caching scheme in :ticket:`3954` "
"where a query that makes use of loader options with of_type would cause "
"lazy loads of unrelated paths to fail with a TypeError."
msgstr ""

#: ../../changelog/changelog_12.rst:1062
msgid ""
"Fixed bug in new \"selectin\" relationship loader where the loader could "
"try to load a non-existent relationship when loading a collection of "
"polymorphic objects, where only some of the mappers include that "
"relationship, typically when :meth:`.PropComparator.of_type` is being "
"used."
msgstr ""

#: ../../changelog/changelog_11.rst:119
msgid ""
"Fixed bug in :meth:`.Insert.values` where using the \"multi-values\" "
"format in combination with :class:`.Column` objects as keys rather than "
"strings would fail.   Pull request courtesy Aubrey Stark-Toller."
msgstr ""

#: ../../changelog/changelog_12.rst:1050
msgid ""
"Fixed regression in 1.2 where newly repaired quoting of collation names "
"in :ticket:`3785` breaks SQL Server, which explicitly does not understand"
" a quoted collation name.   Whether or not mixed-case collation names are"
" quoted or not is now deferred down to a dialect-level decision so that "
"each dialect can prepare these identifiers directly."
msgstr ""

#: ../../changelog/changelog_12.rst:1033
msgid ""
"Fixed regression where the removal of most setinputsizes rules from "
"cx_Oracle dialect impacted the TIMESTAMP datatype's ability to retrieve "
"fractional seconds."
msgstr ""

#: ../../changelog/changelog_12.rst:1077
msgid ""
"Fixed regression in Oracle imports where a missing comma caused an "
"undefined symbol to be present.  Pull request courtesy Miroslav "
"Shubernetskiy."
msgstr ""

#: ../../changelog/changelog_12.rst:1014
msgid ""
"Fixed regression in association proxy due to :ticket:`3769` (allow for "
"chained any() / has()) where contains() against an association proxy "
"chained in the form (o2m relationship, associationproxy(m2o relationship,"
" m2o relationship)) would raise an error regarding the re-application of "
"contains() on the final link of the chain."
msgstr ""

#: ../../changelog/changelog_12.rst:1042
msgid ""
"Removed an oracle-specific requirements rule from the public test suite "
"that was interfering with third party dialect suites."
msgstr ""

#: ../../changelog/changelog_12.rst:1070
msgid ""
"Added a new exclusion rule group_by_complex_expression which disables "
"tests that use \"GROUP BY <expr>\", which seems to be not viable for at "
"least two third party dialects."
msgstr ""

#: ../../changelog/changelog_12.rst:1089
msgid ""
"Added a new data member to the identity key tuple used by the ORM's "
"identity map, known as the \"identity_token\".  This token defaults to "
"None but may be used by database sharding schemes to differentiate "
"objects in memory with the same primary key that come from different "
"databases.   The horizontal sharding extension integrates this token "
"applying the shard identifier to it, thus allowing primary keys to be "
"duplicated across horizontally sharded backends."
msgstr ""

#: ../../changelog/changelog_12.rst:1101
msgid ":ref:`change_4137`"
msgstr ""

#: ../../changelog/changelog_11.rst:229
msgid ""
"Fixed bug where the association proxy would inadvertently link itself to "
"an :class:`.AliasedClass` object if it were called first with the "
":class:`.AliasedClass` as a parent, causing errors upon subsequent usage."
msgstr ""

#: ../../changelog/changelog_12.rst:1189
msgid ""
"Fixed bug in :func:`.contains_eager` query option where making use of a "
"path that used :meth:`.PropComparator.of_type` to refer to a subclass "
"across more than one level of joins would also require that the \"alias\""
" argument were provided with the same subtype in order to avoid adding "
"unwanted FROM clauses to the query; additionally,  using "
":func:`.contains_eager` across subclasses that use :func:`.aliased` "
"objects of subclasses as the :meth:`.PropComparator.of_type` argument "
"will also render correctly."
msgstr ""

#: ../../changelog/changelog_12.rst:1259
msgid ""
"The :meth:`.Query.exists` method will now disable eager loaders for when "
"the query is rendered.  Previously, joined-eager load joins would be "
"rendered unnecessarily as well as subquery eager load queries would be "
"needlessly generated.   The new behavior matches that of the "
":meth:`.Query.subquery` method."
msgstr ""

#: ../../changelog/changelog_11.rst:206
msgid ""
"Fixed bug where a descriptor that is elsewhere a mapped column or "
"relationship within a hierarchy based on :class:`.AbstractConcreteBase` "
"would be referred towards during a refresh operation, causing an error as"
" the attribute is not mapped as a mapper property. A similar issue can "
"arise for other attributes like the \"type\" column added by "
":class:`.AbstractConcreteBase` if the class fails to include "
"\"concrete=True\" in its mapper, however the check here should also "
"prevent that scenario from causing a problem."
msgstr ""

#: ../../changelog/changelog_12.rst:1178
msgid ""
"The \"password\" attribute of the :class:`.url.URL` object can now be any"
" user-defined or user-subclassed string object that responds to the "
"Python ``str()`` builtin.   The object passed will be maintained as the "
"datamember :attr:`.url.URL.password_original` and will be consulted when "
"the :attr:`.url.URL.password` attribute is read to produce the string "
"value."
msgstr ""

#: ../../changelog/changelog_11.rst:198
msgid ""
"Fixed bug where ``__repr__`` of :class:`.ColumnDefault` would fail if the"
" argument were a tuple.  Pull request courtesy Nicolas Caniart."
msgstr ""

#: ../../changelog/changelog_12.rst:1129
msgid ""
"Reworked the new \"autoescape\" feature introduced in :ref:`change_2694` "
"in 1.2.0b2 to be fully automatic; the escape character now defaults to a "
"forwards slash ``\"/\"`` and is applied to percent, underscore, as well "
"as the escape character itself, for fully automatic escaping.  The "
"character can also be changed using the \"escape\" parameter."
msgstr ""

#: ../../changelog/changelog_12.rst:1138 ../../changelog/changelog_12.rst:2477
msgid ":ref:`change_2694`"
msgstr ""

#: ../../changelog/changelog_12.rst:1145
msgid ""
"Fixed bug where the :meth:`.Table.tometadata` method would not properly "
"accommodate :class:`.Index` objects that didn't consist of simple column "
"expressions, such as indexes against a :func:`.text` construct, indexes "
"that used SQL expressions or :attr:`.func`, etc.   The routine now copies"
" expressions fully to a new :class:`.Index` object while substituting all"
" table-bound :class:`.Column` objects for those of the target table."
msgstr ""

#: ../../changelog/changelog_12.rst:1157
msgid ""
"Changed the \"visit name\" of :class:`.ColumnElement` from \"column\" to "
"\"column_element\", so that when this element is used as the basis for a "
"user-defined SQL element, it is not assumed to behave like a table-bound "
":class:`.ColumnClause` when processed by various SQL traversal utilities,"
" as are commonly used by the ORM."
msgstr ""

#: ../../changelog/changelog_12.rst:1167
msgid ""
"Fixed issue in :class:`.ARRAY` datatype which is essentially the same "
"issue as that of :ticket:`3832`, except not a regression, where column "
"attachment events on top of :class:`.ARRAY` would not fire correctly, "
"thus interfering with systems which rely upon this.   A key use case that"
" was broken by this is the use of mixins to declare columns that make use"
" of :meth:`.MutableList.as_mutable`."
msgstr ""

#: ../../changelog/changelog_12.rst:1211
msgid ""
"Fixed bug in new \"expanding bind parameter\" feature whereby if multiple"
" params were used in one statement, the regular expression would not "
"match the parameter name correctly."
msgstr ""

#: ../../changelog/changelog_12.rst:1114
msgid ""
"Implemented \"DELETE..FROM\" syntax for Postgresql, MySQL, MS SQL Server "
"(as well as within the unsupported Sybase dialect) in a manner similar to"
" how \"UPDATE..FROM\" works.  A DELETE statement that refers to more than"
" one table will switch into \"multi-table\" mode and render the "
"appropriate \"USING\" or multi-table \"FROM\" clause as understood by the"
" database. Pull request courtesy Pieter Mulder."
msgstr ""

#: ../../changelog/changelog_12.rst:1123
msgid ":ref:`change_959`"
msgstr ""

#: ../../changelog/changelog_12.rst:1204
msgid ""
"Added new :class:`.postgresql.MONEY` datatype.  Pull request courtesy "
"Cleber J Santos."
msgstr ""

#: ../../changelog/changelog_11.rst:239
msgid ""
"MySQL 5.7.20 now warns for use of the @tx_isolation variable; a version "
"check is now performed and uses @transaction_isolation instead to prevent"
" this warning."
msgstr ""

#: ../../changelog/changelog_12.rst:1107
msgid ""
"Fixed regression from issue 1.2.0b3 where \"MariaDB\" version comparison "
"can fail for some particular MariaDB version strings under Python 3."
msgstr ""

#: ../../changelog/changelog_12.rst:1239
msgid ""
"Fixed bug where sqltypes.BINARY and sqltypes.VARBINARY datatypes would "
"not include correct bound-value handlers for pyodbc, which allows the "
"pyodbc.NullParam value to be passed that helps with FreeTDS."
msgstr ""

#: ../../changelog/changelog_12.rst:1231
msgid ""
"Added some additional rules to fully handle ``Decimal('Infinity')``, "
"``Decimal('-Infinity')`` values with cx_Oracle numerics when using "
"``asdecimal=True``."
msgstr ""

#: ../../changelog/changelog_12.rst:1250
msgid ""
"Added a new errors section to the documentation with background about "
"common error messages.   Selected exceptions within SQLAlchemy will "
"include a link in their string output to the relevant section within this"
" page."
msgstr ""

#: ../../changelog/changelog_12.rst:1219
msgid ""
"Added new method :meth:`.baked.Result.with_post_criteria` to baked query "
"system, allowing non-SQL-modifying transformations to take place after "
"the query has been pulled from the cache.  Among other things, this "
"method can be used with :class:`.horizontal_shard.ShardedQuery` to set "
"the shard identifier.   :class:`.horizontal_shard.ShardedQuery` has also "
"been modified such that its :meth:`.ShardedQuery.get` method interacts "
"correctly with that of :class:`.baked.Result`."
msgstr ""

#: ../../changelog/changelog_11.rst:258
msgid ""
"Fixed bug where ORM relationship would warn against conflicting sync "
"targets (e.g. two relationships would both write to the same column) for "
"sibling classes in an inheritance hierarchy, where the two relationships "
"would never actually conflict during writes."
msgstr ""

#: ../../changelog/changelog_11.rst:277
msgid ""
"Fixed bug where correlated select used against single-table inheritance "
"entity would fail to render correctly in the outer query, due to "
"adjustment for single inheritance discriminator criteria inappropriately "
"re-applying the criteria to the outer query."
msgstr ""

#: ../../changelog/changelog_11.rst:322
msgid ""
"Fixed bug in :meth:`.Session.merge` following along similar lines as that"
" of :ticket:`4030`, where an internal check for a target object in the "
"identity map could lead to an error if it were to be garbage collected "
"immediately before the merge routine actually retrieves the object."
msgstr ""

#: ../../changelog/changelog_11.rst:332
msgid ""
"Fixed bug where an :func:`.undefer_group` option would not be recognized "
"if it extended from a relationship that was loading using joined eager "
"loading.  Additionally, as the bug led to excess work being performed, "
"Python function call counts are also improved by 20% within the initial "
"calculation of result set columns, complementing the joined eager load "
"improvements of :ticket:`3915`."
msgstr ""

#: ../../changelog/changelog_11.rst:355
msgid ""
"Fixed bug in :meth:`.Session.merge` where objects in a collection that "
"had the primary key attribute set to ``None`` for a key that is  "
"typically autoincrementing would be considered to be a database-persisted"
" key for part of the internal deduplication process, causing only one "
"object to actually be inserted in the database."
msgstr ""

#: ../../changelog/changelog_11.rst:376
msgid ""
"An :class:`.InvalidRequestError` is raised when a :func:`.synonym` is "
"used against an attribute that is not against a :class:`.MapperProperty`,"
" such as an association proxy.  Previously, a recursion overflow would "
"occur trying to locate non-existent attributes."
msgstr ""

#: ../../changelog/changelog_12.rst:1386
msgid ""
"Fixed regression introduced in 1.2.0b1 due to :ticket:`3934` where the "
":class:`.Session` would fail to \"deactivate\" the transaction, if a "
"rollback failed (the target issue is when MySQL loses track of a "
"SAVEPOINT). This would cause a subsequent call to "
":meth:`.Session.rollback` to raise an error a second time, rather than "
"completing and bringing the :class:`.Session` back to ACTIVE."
msgstr ""

#: ../../changelog/changelog_12.rst:1467
msgid ""
"Fixed issue where the :func:`.make_transient_to_detached` function would "
"expire all attributes on the target object, including \"deferred\" "
"attributes, which has the effect of the attribute being undeferred for "
"the next refesh, causing an unexpected load of the attribute."
msgstr ""

#: ../../changelog/changelog_12.rst:1476
msgid ""
"Fixed bug involving delete-orphan cascade where a related item that "
"becomes an orphan before the parent object is part of a session is still "
"tracked as moving into orphan status, which results in it being expunged "
"from the session rather than being flushed."
msgstr ""

#: ../../changelog/changelog_12.rst:1481
msgid ""
"This fix was inadvertently merged during the 1.2.0b3 release and was "
"**not added to the changelog** at that time. This changelog note was "
"added to the release retroactively as of version 1.2.13."
msgstr ""

#: ../../changelog/changelog_12.rst:1490
msgid ""
"Fixed bug in :ref:`change_3948` which prevented \"selectin\" and "
"\"inline\" settings in a multi-level class hierarchy from interacting "
"together as expected.    A new example is added to the documentation."
msgstr ""

#: ../../changelog/changelog_12.rst:1496
msgid ":ref:`polymorphic_selectin_and_withpoly`"
msgstr ""

#: ../../changelog/changelog_12.rst:1511
msgid ""
"Removed the warnings that are emitted when the LRU caches employed by the"
" mapper as well as loader strategies reach their threshold; the purpose "
"of this warning was at first a guard against excess cache keys being "
"generated but became basically a check on the \"creating many engines\" "
"antipattern.   While this is still an antipattern, the presense of test "
"suites which both create an engine per test as well as raise on all "
"warnings will be an inconvenience; it should not be critical that such "
"test suites change their architecture just for this warning (though "
"engine-per-test suite is always better)."
msgstr ""

#: ../../changelog/changelog_12.rst:1525
msgid ""
"Fixed regression where the use of a :func:`.undefer_group` option in "
"conjunction with a lazy loaded relationship option would cause an "
"attribute error, due to a bug in the SQL cache key generation added in "
"1.2 as part of :ticket:`3954`."
msgstr ""

#: ../../changelog/changelog_12.rst:1565
msgid ""
"Modified the change made to the ORM update/delete evaluator in "
":ticket:`3366` such that if an unmapped column expression is present in "
"the update or delete, if the evaluator can match its name to the mapped "
"columns of the target class, a warning is emitted, rather than raising "
"UnevaluatableError.  This is essentially the pre-1.2 behavior, and is to "
"allow migration for applications that are currently relying upon this "
"pattern.  However, if the given attribute name cannot be matched to the "
"columns of the mapper, the UnevaluatableError is still raised, which is "
"what was fixed in :ticket:`3366`."
msgstr ""

#: ../../changelog/changelog_12.rst:1425
msgid ""
"A warning is emitted if a subclass attempts to override an attribute that"
" was declared on a superclass using ``@declared_attr.cascading`` that the"
" overridden attribute will be ignored. This use case cannot be fully "
"supported down to further subclasses without more complex development "
"efforts, so for consistency the \"cascading\" is honored all the way down"
" regardless of overriding attributes."
msgstr ""

#: ../../changelog/changelog_12.rst:1436
msgid ""
"A warning is emitted if the ``@declared_attr.cascading`` attribute is "
"used with a special declarative name such as ``__tablename__``, as this "
"has no effect."
msgstr ""

#: ../../changelog/changelog_12.rst:1444
#, python-format
msgid ""
"Added ``__next__()`` and ``next()`` methods to :class:`.ResultProxy`, so "
"that the ``next()`` builtin function works on the object directly. "
":class:`.ResultProxy` has long had an ``__iter__()`` method which already"
" allows it to respond to the ``iter()`` builtin.   The implementation for"
" ``__iter__()`` is unchanged, as performance testing has indicated that "
"iteration using a ``__next__()`` method with ``StopIteration`` is about "
"20% slower in both Python 2.7 and 3.6."
msgstr ""

#: ../../changelog/changelog_12.rst:1667
msgid ""
"Made some adjustments to :class:`.Pool` and :class:`.Connection` such "
"that recovery logic is not run underneath exception catches for "
"``pool.Empty``, ``AttributeError``, since when the recovery operation "
"itself fails, Python 3 creates a misleading stack trace referring to the "
"``Empty`` / ``AttributeError`` as the cause, when in fact these exception"
" catches are part of control flow."
msgstr ""

#: ../../changelog/changelog_11.rst:306
msgid ""
"Fixed bug where the recently added :meth:`.ColumnOperators.any_` and "
":meth:`.ColumnOperators.all_` methods didn't work when called as methods,"
" as opposed to using the standalone functions :func:`~.expression.any_` "
"and :func:`~.expression.all_`.  Also added documentation examples for "
"these relatively unintuitive SQL operators."
msgstr ""

#: ../../changelog/changelog_12.rst:1366
msgid ""
"Added a new method "
":meth:`.DefaultExecutionContext.get_current_parameters` which is used "
"within a function-based default value generator in order to retrieve the "
"current parameters being passed to the statement. The new function "
"differs from the :attr:`.DefaultExecutionContext.current_parameters` "
"attribute in that it also provides for optional grouping of parameters "
"that correspond to a multi-valued \"insert\" construct.  Previously it "
"was not possible to identify the subset of parameters that were relevant "
"to the function call."
msgstr ""

#: ../../changelog/changelog_12.rst:1378
msgid ":ref:`change_4075`"
msgstr ""

#: ../../changelog/changelog_12.rst:1380
msgid ":ref:`context_default_functions`"
msgstr ""

#: ../../changelog/changelog_12.rst:1579
msgid ""
"Fixed bug in new SQL comments feature where table and column comment "
"would not be copied when using :meth:`.Table.tometadata`."
msgstr ""

#: ../../changelog/changelog_12.rst:1586
msgid ""
"In release 1.1, the :class:`.Boolean` type was broken in that boolean "
"coercion via ``bool()`` would occur for backends that did not feature "
"\"native boolean\", but would not occur for native boolean backends, "
"meaning the string ``\"0\"`` now behaved inconsistently. After a poll, a "
"consensus was reached that non-boolean values should be raising an error,"
" especially in the ambiguous case of string ``\"0\"``; so the "
":class:`.Boolean` datatype will now raise ``ValueError`` if an incoming "
"value is not within the range ``None, True, False, 1, 0``."
msgstr ""

#: ../../changelog/changelog_12.rst:1597
msgid ":ref:`change_4102`"
msgstr ""

#: ../../changelog/changelog_12.rst:1603
msgid ""
"Refined the behavior of :meth:`.Operators.op` such that in all cases, if "
"the :paramref:`.Operators.op.is_comparison` flag is set to True, the "
"return type of the resulting expression will be :class:`.Boolean`, and if"
" the flag is False, the return type of the resulting expression will be "
"the same type as that of the left-hand expression, which is the typical "
"default behavior of other operators. Also added a new parameter "
":paramref:`.Operators.op.return_type` as well as a helper method "
":meth:`.Operators.bool_op`."
msgstr ""

#: ../../changelog/changelog_12.rst:1614
msgid ":ref:`change_4063`"
msgstr ""

#: ../../changelog/changelog_12.rst:1644
msgid ""
"Internal refinements to the :class:`.Enum`, :class:`.Interval`, and "
":class:`.Boolean` types, which now extend a common mixin "
":class:`.Emulated` that indicates a type that provides Python-side "
"emulation of a DB native type, switching out to the DB native type when a"
" supporting backend is in use.   The Postgresql :class:`.INTERVAL` type "
"when used directly will now include the correct type coercion rules for "
"SQL expressions that also take effect for :class:`.sqltypes.Interval` "
"(such as adding a date to an interval yields a datetime)."
msgstr ""

#: ../../changelog/changelog_12.rst:1274
msgid ""
"Added a new flag ``use_batch_mode`` to the psycopg2 dialect.  This flag "
"enables the use of psycopg2's ``psycopg2.extras.execute_batch`` extension"
" when the :class:`.Engine` calls upon ``cursor.executemany()``. This "
"extension provides a critical performance increase by over an order of "
"magnitude when running INSERT statements in batch.  The flag is False by "
"default as it is considered to be experimental for now."
msgstr ""

#: ../../changelog/changelog_12.rst:1284
msgid ":ref:`change_4109`"
msgstr ""

#: ../../changelog/changelog_11.rst:220
msgid ""
"Made further fixes to the :class:`.ARRAY` class in conjunction with "
"COLLATE, as the fix made in :ticket:`4006` failed to accommodate for a "
"multidimensional array."
msgstr ""

#: ../../changelog/changelog_11.rst:248
msgid ""
"Fixed bug in :obj:`.array_agg` function where passing an argument that is"
" already of type :class:`.ARRAY`, such as a Postgresql "
":obj:`.postgresql.array` construct, would produce a ``ValueError``, due "
"to the function attempting to nest the arrays."
msgstr ""

#: ../../changelog/changelog_11.rst:268
msgid ""
"Fixed bug in Postgresql "
":meth:`.postgresql.dml.Insert.on_conflict_do_update` which would prevent "
"the insert statement from being used as a CTE, e.g. via "
":meth:`.Insert.cte`, within another statement."
msgstr ""

#: ../../changelog/changelog_12.rst:1397
msgid ""
"Fixed bug where the pg8000 driver would fail if using "
":meth:`.MetaData.reflect` with a schema name, since the schema name would"
" be sent as a \"quoted_name\" object that's a string subclass, which "
"pg8000 doesn't recognize.   The quoted_name type is added to pg8000's "
"py_types collection on connect."
msgstr ""

#: ../../changelog/changelog_12.rst:1407
msgid ""
"Enabled UUID support for the pg8000 driver, which supports native Python "
"uuid round trips for this datatype.  Arrays of UUID are still not "
"supported, however."
msgstr ""

#: ../../changelog/changelog_11.rst:175
msgid ""
"Warning emitted when MariaDB 10.2.8 or earlier in the 10.2 series is "
"detected as there are major issues with CHECK constraints within these "
"versions that were resolved as of 10.2.9."
msgstr ""

#: ../../changelog/changelog_11.rst:180
msgid ""
"Note that this changelog message was NOT released with SQLAlchemy 1.2.0b3"
" and was added retroactively."
msgstr ""

#: ../../changelog/changelog_12.rst:1620
msgid ""
"Changed the name of the ``.values`` attribute of the new MySQL INSERT..ON"
" DUPLICATE KEY UPDATE construct to ``.inserted``, as :class:`.Insert` "
"already has a method called :meth:`.Insert.values`. The ``.inserted`` "
"attribute ultimately renders the MySQL ``VALUES()`` function."
msgstr ""

#: ../../changelog/changelog_12.rst:1456
msgid ""
"Added a new :class:`.mssql.TIMESTAMP` datatype, that correctly acts like "
"a binary datatype for SQL Server rather than a datetime type, as SQL "
"Server breaks the SQL standard here.  Also added "
":class:`.mssql.ROWVERSION`, as the \"TIMESTAMP\" type in SQL Server is "
"deprecated in favor of ROWVERSION."
msgstr ""

#: ../../changelog/changelog_12.rst:1555
msgid ""
"Added support for \"AUTOCOMMIT\" isolation level, as established via "
":meth:`.Connection.execution_options`, to the PyODBC and pymssql "
"dialects.   This isolation level sets the appropriate DBAPI-specific "
"flags on the underlying connection object."
msgstr ""

#: ../../changelog/changelog_11.rst:188
msgid ""
"Added a full range of \"connection closed\" exception codes to the PyODBC"
" dialect for SQL Server, including '08S01', '01002', '08003', '08007', "
"'08S02', '08001', 'HYT00', 'HY010'.  Previously, only '08S01' was "
"covered."
msgstr ""

#: ../../changelog/changelog_12.rst:1290
msgid ""
"SQL Server supports what SQLAlchemy calls \"native boolean\" with its BIT"
" type, as this type only accepts 0 or 1 and the DBAPIs return its value "
"as True/False.   So the SQL Server dialects now enable \"native boolean\""
" support, in that a CHECK constraint is not generated for a "
":class:`.Boolean` datatype.  The only difference vs. other native boolean"
" is that there are no \"true\" / \"false\" constants so \"1\" and \"0\" "
"are still rendered here."
msgstr ""

#: ../../changelog/changelog_12.rst:1415
msgid ""
"Fixed the pymssql dialect so that percent signs in SQL text, such as used"
" in modulus expressions or literal textual values, are **not** doubled "
"up, as seems to be what pymssql expects.  This is despite the fact that "
"the pymssql DBAPI uses the \"pyformat\" parameter style which itself "
"considers the percent sign to be significant."
msgstr ""

#: ../../changelog/changelog_12.rst:1545
msgid ""
"Fixed bug where the SQL Server dialect could pull columns from multiple "
"schemas when reflecting a self-referential foreign key constraint, if "
"multiple schemas contained a constraint of the same name against a table "
"of the same name."
msgstr ""

#: ../../changelog/changelog_12.rst:1630
msgid ""
"Added a new class of \"rowcount support\" for dialects that is specific "
"to when \"RETURNING\", which on SQL Server looks like \"OUTPUT "
"inserted\", is in use, as the PyODBC backend isn't able to give us "
"rowcount on an UPDATE or DELETE statement when OUTPUT is in effect.  This"
" primarily affects the ORM when a flush is updating a row that contains "
"server-calcluated values, raising an error if the backend does not return"
" the expected row count. PyODBC now states that it supports rowcount "
"except if OUTPUT.inserted is present, which is taken into account by the "
"ORM during a flush as to whether it will look for a rowcount."
msgstr ""

#: ../../changelog/changelog_12.rst:1657
msgid ""
"Enabled the \"sane_rowcount\" flag for the pymssql dialect, indicating "
"that the DBAPI now reports the correct number of rows affected from an "
"UPDATE or DELETE statement.  This impacts mostly the ORM versioning "
"feature in that it now can verify the number of rows affected on a target"
" version."
msgstr ""

#: ../../changelog/changelog_12.rst:1688
msgid ""
"Added a rule to SQL Server index reflection to ignore the so-called "
"\"heap\" index that is implicitly present on a table that does not "
"specify a clustered index."
msgstr ""

#: ../../changelog/changelog_10.rst:23
msgid ""
"Fixed performance regression caused by the fix for :ticket:`3937` where "
"cx_Oracle as of version 5.3 dropped the ``.UNICODE`` symbol from its "
"namespace,  which was interpreted as cx_Oracle's \"WITH_UNICODE\" mode "
"being turned on unconditionally, which invokes functions on the "
"SQLAlchemy side which convert all strings to unicode unconditionally and "
"causing a performance impact.  In fact, per cx_Oracle's author the "
"\"WITH_UNICODE\" mode has been removed entirely as of 5.1, so the "
"expensive unicode conversion functions are no longer necessary and are "
"disabled if cx_Oracle 5.1 or greater is detected under Python 2.  The "
"warning against \"WITH_UNICODE\" mode that was removed under "
":ticket:`3937` is also restored."
msgstr ""

#: ../../changelog/changelog_12.rst:1304
msgid ""
"Partial support for persisting and retrieving the Oracle value "
"\"infinity\" is implemented with cx_Oracle, using Python float values "
"only, e.g. ``float(\"inf\")``.  Decimal support is not yet fulfilled by "
"the cx_Oracle DBAPI driver."
msgstr ""

#: ../../changelog/changelog_12.rst:1312
msgid ""
"The cx_Oracle dialect has been reworked and modernized to take advantage "
"of new patterns that weren't present in the old 4.x series of cx_Oracle. "
"This includes that the minimum cx_Oracle version is the 5.x series and "
"that cx_Oracle 6.x is now fully tested. The most significant change "
"involves type conversions, primarily regarding the numeric / floating "
"point and LOB datatypes, making more effective use of cx_Oracle type "
"handling hooks to simplify how bind parameter and result data is "
"processed."
msgstr ""

#: ../../changelog/changelog_12.rst:1322 ../../changelog/changelog_12.rst:1336
#: ../../changelog/changelog_12.rst:1348 ../../changelog/changelog_12.rst:1359
msgid ":ref:`change_cxoracle_12`"
msgstr ""

#: ../../changelog/changelog_12.rst:1328
msgid ""
"two phase support for cx_Oracle has been completely removed for all "
"versions of cx_Oracle, whereas in 1.2.0b1 this change only took effect "
"for the 6.x series of cx_Oracle.  This feature never worked correctly in "
"any version of cx_Oracle and in cx_Oracle 6.x, the API which SQLAlchemy "
"relied upon was removed."
msgstr ""

#: ../../changelog/changelog_12.rst:1341
msgid ""
"The column keys present in a result set when using "
":meth:`.Insert.returning` with the cx_Oracle backend now use the correct "
"column / label names like that of all other dialects.  Previously, these "
"came out as ``ret_nnn``."
msgstr ""

#: ../../changelog/changelog_12.rst:1353
msgid ""
"Several parameters to the cx_Oracle dialect are now deprecated and will "
"have no effect: ``auto_setinputsizes``, ``exclude_setinputsizes``, "
"``allow_twophase``."
msgstr ""

#: ../../changelog/changelog_12.rst:1502
msgid ""
"Fixed bug where an index reflected under Oracle with an expression like "
"\"column DESC\" would not be returned, if the table also had no primary "
"key, as a result of logic that attempts to filter out the index "
"implicitly added by Oracle onto the primary key columns."
msgstr ""

#: ../../changelog/changelog_12.rst:1534
msgid ""
"Fixed more regressions caused by cx_Oracle 6.0; at the moment, the only "
"behavioral change for users is disconnect detection now detects for "
"cx_Oracle.DatabaseError in addition to cx_Oracle.InterfaceError, as this "
"behavior seems to have changed.   Other issues regarding numeric "
"precision and uncloseable connections are pending with the upstream "
"cx_Oracle issue tracker."
msgstr ""

#: ../../changelog/changelog_12.rst:1679
msgid ""
"Fixed bug where Oracle 8 \"non ansi\" join mode would not add the ``(+)``"
" operator to expressions that used an operator other than the ``=`` "
"operator.  The ``(+)`` needs to be on all columns that are part of the "
"right-hand side."
msgstr ""

#: ../../changelog/changelog_11.rst:405
msgid ""
"Fixed regression from 1.1.11 where adding additional non-entity columns "
"to a query that includes an entity with subqueryload relationships would "
"fail, due to an inspection added in 1.1.11 as a result of :ticket:`4011`."
msgstr ""

#: ../../changelog/changelog_11.rst:416
msgid ""
"Fixed bug involving JSON NULL evaluation logic added in 1.1 as part of "
":ticket:`3514` where the logic would not accommodate ORM mapped "
"attributes named differently from the :class:`.Column` that was mapped."
msgstr ""

#: ../../changelog/changelog_11.rst:426
msgid ""
"Added ``KeyError`` checks to all methods within "
":class:`.WeakInstanceDict` where a check for ``key in dict`` is followed "
"by indexed access to that key, to guard against a race against garbage "
"collection that under load can remove the key from the dict after the "
"code assumes its present, leading to very infrequent ``KeyError`` raises."
msgstr ""

#: ../../changelog/changelog_10.rst:43
msgid ""
"Fixed issue in testing fixtures which was incompatible with a change made"
" as of Python 3.6.2 involving context managers."
msgstr ""

#: ../../changelog/changelog_11.rst:682
msgid ""
"An :func:`.aliased()` construct can now be passed to the "
":meth:`.Query.select_entity_from` method.   Entities will be pulled from "
"the selectable represented by the :func:`.aliased` construct. This allows"
" special options for :func:`.aliased` such as "
":paramref:`.aliased.adapt_on_names` to be used in conjunction with "
":meth:`.Query.select_entity_from`."
msgstr ""

#: ../../changelog/changelog_12.rst:1716
msgid ""
"Added ``.autocommit`` attribute to :class:`.scoped_session`, proxying the"
" ``.autocommit`` attribute of the underling :class:`.Session` currently "
"assigned to the thread.  Pull request courtesy Ben Fagin."
msgstr ""

#: ../../changelog/changelog_12.rst:1783
msgid ""
"Added a new feature :func:`.orm.with_expression` that allows an ad-hoc "
"SQL expression to be added to a specific entity in a query at result "
"time.  This is an alternative to the SQL expression being delivered as a "
"separate element in the result tuple."
msgstr ""

#: ../../changelog/changelog_12.rst:1790
msgid ":ref:`change_3058`"
msgstr ""

#: ../../changelog/changelog_12.rst:1862
msgid ""
"Added a new style of mapper-level inheritance loading \"polymorphic "
"selectin\".  This style of loading emits queries for each subclass in an "
"inheritance hierarchy subsequent to the load of the base object type, "
"using IN to specify the desired primary key values."
msgstr ""

#: ../../changelog/changelog_12.rst:1871
msgid ":ref:`change_3948`"
msgstr ""

#: ../../changelog/changelog_12.rst:2044
msgid ""
"Added a new kind of eager loading called \"selectin\" loading.  This "
"style of loading is very similar to \"subquery\" eager loading, except "
"that it uses an IN expression given a list of primary key values from the"
" loaded parent objects, rather than re-stating the original query.   This"
" produces a more efficient query that is \"baked\" (e.g. the SQL string "
"is cached) and also works in the context of :meth:`.Query.yield_per`."
msgstr ""

#: ../../changelog/changelog_12.rst:2054
msgid ":ref:`change_3944`"
msgstr ""

#: ../../changelog/changelog_12.rst:2098
msgid ""
"The ``lazy=\"select\"`` loader strategy now makes used of the "
":class:`.BakedQuery` query caching system in all cases.  This removes "
"most overhead of generating a :class:`.Query` object and running it into "
"a :func:`.select` and then string SQL statement from the process of lazy-"
"loading related collections and objects.  The \"baked\" lazy loader has "
"also been improved such that it can now cache in most cases where query "
"load options are used."
msgstr ""

#: ../../changelog/changelog_12.rst:2108
msgid ":ref:`change_3954`"
msgstr ""

#: ../../changelog/changelog_12.rst:2219
msgid ""
"The :meth:`.Query.update` method can now accommodate both hybrid "
"attributes as well as composite attributes as a source of the key to be "
"placed in the SET clause.   For hybrids, an additional decorator "
":meth:`.hybrid_property.update_expression` is supplied for which the user"
" supplies a tuple-returning function."
msgstr ""

#: ../../changelog/changelog_12.rst:2227
msgid ":ref:`change_3229`"
msgstr ""

#: ../../changelog/changelog_12.rst:2324
msgid ""
"Added new attribute event :meth:`.AttributeEvents.bulk_replace`. This "
"event is triggered when a collection is assigned to a relationship, "
"before the incoming collection is compared with the existing one.  This "
"early event allows for conversion of incoming non-ORM objects as well.  "
"The event is integrated with the ``@validates`` decorator."
msgstr ""

#: ../../changelog/changelog_12.rst:2333
msgid ":ref:`change_3896_event`"
msgstr ""

#: ../../changelog/changelog_12.rst:2366
msgid ""
"Added new event handler :meth:`.AttributeEvents.modified` which is "
"triggered when the func:`.attributes.flag_modified` function is invoked, "
"which is common when using the :mod:`sqlalchemy.ext.mutable` extension "
"module."
msgstr ""

#: ../../changelog/changelog_12.rst:2373
msgid ":ref:`change_3303`"
msgstr ""

#: ../../changelog/changelog_11.rst:450
msgid ""
"Fixed issue with subquery eagerloading which continues on from the series"
" of issues fixed in :ticket:`2699`, :ticket:`3106`, :ticket:`3893` "
"involving that the \"subquery\" contains the correct FROM clause when "
"beginning from a joined inheritance subclass and then subquery eager "
"loading onto a relationship from the base class, while the query also "
"includes criteria against the subclass. The fix in the previous tickets "
"did not accommodate for additional subqueryload operations loading more "
"deeply from the first level, so the fix has been further generalized."
msgstr ""

#: ../../changelog/changelog_11.rst:536
msgid ""
"Fixed bug where a cascade such as \"delete-orphan\" (but others as well) "
"would fail to locate an object linked to a relationship that itself is "
"local to a subclass in an inheritance relationship, thus causing the "
"operation to not take place."
msgstr ""

#: ../../changelog/changelog_11.rst:706
msgid ""
"Fixed a race condition which could occur under threaded environments as a"
" result of the caching added via :ticket:`3915`.   An internal collection"
" of ``Column`` objects could be regenerated on an alias object "
"inappropriately, confusing a joined eager loader when it attempts to "
"render SQL and collect results and resulting in an attribute error.   The"
" collection is now generated up front before the alias object is cached "
"and shared among threads."
msgstr ""

#: ../../changelog/changelog_12.rst:1796
msgid ""
"An UPDATE emitted as a result of the "
":paramref:`.relationship.post_update` feature will now integrate with the"
" versioning feature to both bump the version id of the row as well as "
"assert that the existing version number was matched."
msgstr ""

#: ../../changelog/changelog_12.rst:1803
msgid ":ref:`change_3496`"
msgstr ""

#: ../../changelog/changelog_12.rst:1877
msgid ""
"Repaired several use cases involving the "
":paramref:`.relationship.post_update` feature when used in conjunction "
"with a column that has an \"onupdate\" value.   When the UPDATE emits, "
"the corresponding object attribute is now expired or refreshed so that "
"the newly generated \"onupdate\" value can populate on the object; "
"previously the stale value would remain.  Additionally, if the target "
"attribute is set in Python for the INSERT of the object, the value is now"
" re-sent during the UPDATE so that the \"onupdate\" does not overwrite it"
" (note this works just as well for server-generated onupdates). Finally, "
"the :meth:`.SessionEvents.refresh_flush` event is now emitted for these "
"attributes when refreshed within the flush."
msgstr ""

#: ../../changelog/changelog_12.rst:1891
msgid ":ref:`change_3471`"
msgstr ""

#: ../../changelog/changelog_12.rst:1897
msgid ""
"Fixed bug where programmatic version_id counter in conjunction with "
"joined table inheritance would fail if the version_id counter were not "
"actually incremented and no other values on the base table were modified,"
" as the UPDATE would have an empty SET clause.  Since programmatic "
"version_id where version counter is not incremented is a documented use "
"case, this specific condition is now detected and the UPDATE now sets the"
" version_id value to itself, so that concurrency checks still take place."
msgstr ""

#: ../../changelog/changelog_12.rst:1925
msgid ""
"The versioning feature does not support NULL for the version counter. An "
"exception is now raised if the version id is programmatic and was set to "
"NULL for an UPDATE.  Pull request courtesy Diana Clarke."
msgstr ""

#: ../../changelog/changelog_12.rst:1950
msgid ""
"Removed a very old keyword argument from :class:`.scoped_session` called "
"``scope``.  This keyword was never documented and was an early attempt at"
" allowing for variable scopes."
msgstr ""

#: ../../changelog/changelog_12.rst:1956
msgid ":ref:`change_3796`"
msgstr ""

#: ../../changelog/changelog_12.rst:1980
msgid ""
"Fixed bug where combining a \"with_polymorphic\" load in conjunction with"
" subclass-linked relationships that specify joinedload with "
"innerjoin=True, would fail to demote those \"innerjoins\" to "
"\"outerjoins\" to suit the other polymorphic classes that don't support "
"that relationship.   This applies to both a single and a joined "
"inheritance polymorphic load."
msgstr ""

#: ../../changelog/changelog_12.rst:1991
msgid ""
"Added new argument :paramref:`.with_for_update` to the "
":meth:`.Session.refresh` method.  When the :meth:`.Query.with_lockmode` "
"method were deprecated in favor of :meth:`.Query.with_for_update`, the "
":meth:`.Session.refresh` method was never updated to reflect the new "
"option."
msgstr ""

#: ../../changelog/changelog_12.rst:1999
msgid ":ref:`change_3991`"
msgstr ""

#: ../../changelog/changelog_12.rst:2005
msgid ""
"Fixed bug where a :func:`.column_property` that is also marked as "
"\"deferred\" would be marked as \"expired\" during a flush, causing it to"
" be loaded along with the unexpiry of regular attributes even though this"
" attribute was never accessed."
msgstr ""

#: ../../changelog/changelog_12.rst:2060
msgid ""
"Fixed bug in subquery eager loading where the \"join_depth\" parameter "
"for self-referential relationships would not be correctly honored, "
"loading all available levels deep rather than correctly counting the "
"specified number of levels for eager loading."
msgstr ""

#: ../../changelog/changelog_12.rst:2068
msgid ""
"Added warnings to the LRU \"compiled cache\" used by the :class:`.Mapper`"
" (and ultimately will be for other ORM-based LRU caches) such that when "
"the cache starts hitting its size limits, the application will emit a "
"warning that this is a performance-degrading situation that may require "
"attention.   The LRU caches can reach their size limits primarily if an "
"application is making use of an unbounded number of :class:`.Engine` "
"objects, which is an antipattern.  Otherwise, this may suggest an issue "
"that should be brought to the SQLAlchemy developer's attention."
msgstr ""

#: ../../changelog/changelog_12.rst:2089
msgid ""
"Fixed bug to improve upon the specificity of loader options that take "
"effect subsequent to the lazy load of a related entity, so that the "
"loader options will match to an aliased or non-aliased entity more "
"specifically if those options include entity information."
msgstr ""

#: ../../changelog/changelog_12.rst:2233
msgid ""
"The :func:`.attributes.flag_modified` function now raises "
":class:`.InvalidRequestError` if the named attribute key is not present "
"within the object, as this is assumed to be present in the flush process."
"  To mark an object \"dirty\" for a flush without referring to any "
"specific attribute, the :func:`.attributes.flag_dirty` function may be "
"used."
msgstr ""

#: ../../changelog/changelog_12.rst:2242
msgid ":ref:`change_3753`"
msgstr ""

#: ../../changelog/changelog_12.rst:2313
msgid ""
"The \"evaluate\" strategy used by :meth:`.Query.update` and "
":meth:`.Query.delete` can now accommodate a simple object comparison from"
" a many-to-one relationship to an instance, when the attribute names of "
"the primary key / foreign key columns don't match the actual names of the"
" columns.  Previously this would do a simple name-based match and fail "
"with an AttributeError."
msgstr ""

#: ../../changelog/changelog_12.rst:2339
msgid ""
"The ``@validates`` decorator now allows the decorated method to receive "
"objects from a \"bulk collection set\" operation that have not yet been "
"compared to the existing collection.  This allows incoming values to be "
"converted to compatible ORM objects as is already allowed from an "
"\"append\" event.   Note that this means that the ``@validates`` method "
"is called for **all** values during a collection assignment, rather than "
"just the ones that are new."
msgstr ""

#: ../../changelog/changelog_12.rst:2349
msgid ":ref:`change_3896_validates`"
msgstr ""

#: ../../changelog/changelog_12.rst:2388
msgid ""
"Fixed bug in single-table inheritance where the select_from() argument "
"would not be taken into account when limiting rows to a subclass.  "
"Previously, only expressions in the columns requested would be taken into"
" account."
msgstr ""

#: ../../changelog/changelog_12.rst:2395
msgid ":ref:`change_3891`"
msgstr ""

#: ../../changelog/changelog_12.rst:2401
msgid ""
"When assigning a collection to an attribute mapped by a relationship, the"
" previous collection is no longer mutated.  Previously, the old "
"collection would be emptied out in conjunction with the \"item remove\" "
"events that fire off; the events now fire off without affecting the old "
"collection."
msgstr ""

#: ../../changelog/changelog_12.rst:2409
msgid ":ref:`change_3913`"
msgstr ""

#: ../../changelog/changelog_12.rst:2483
msgid ""
"The state of the :class:`.Session` is now present when the "
":meth:`.SessionEvents.after_rollback` event is emitted, that is,  the "
"attribute state of objects prior to their being expired.   This is now "
"consistent with the  behavior of the :meth:`.SessionEvents.after_commit` "
"event which  also emits before the attribute state of objects is expired."
msgstr ""

#: ../../changelog/changelog_12.rst:2492
msgid ":ref:`change_3934`"
msgstr ""

#: ../../changelog/changelog_12.rst:2498
msgid ""
"Fixed bug where :meth:`.Query.with_parent` would not work if the "
":class:`.Query` were against an :func:`.aliased` construct rather than a "
"regular mapped class.  Also adds a new parameter "
":paramref:`.util.with_parent.from_entity` to the standalone "
":func:`.util.with_parent` function as well as :meth:`.Query.with_parent`."
msgstr ""

#: ../../changelog/changelog_12.rst:1910
msgid ""
"Fixed bug where using :class:`.declared_attr` on an "
":class:`.AbstractConcreteBase` where a particular return value were some "
"non-mapped symbol, including ``None``, would cause the attribute to hard-"
"evaluate just once and store the value to the object dictionary, not "
"allowing it to invoke for subclasses.   This behavior is normal when "
":class:`.declared_attr` is on a mapped class, and does not occur on a "
"mixin or abstract class.  Since :class:`.AbstractConcreteBase` is both "
"\"abstract\" and actually \"mapped\", a special exception case is made "
"here so that the \"abstract\" behavior takes precedence for "
":class:`.declared_attr`."
msgstr ""

#: ../../changelog/changelog_12.rst:2282
msgid ""
"Added native \"pessimistic disconnection\" handling to the :class:`.Pool`"
" object.  The new parameter :paramref:`.Pool.pre_ping`, available from "
"the engine as :paramref:`.create_engine.pool_pre_ping`, applies an "
"efficient form of the \"pre-ping\" recipe featured in the pooling "
"documentation, which upon each connection check out, emits a simple "
"statement, typically \"SELECT 1\", to test the connection for liveness. "
"If the existing connection is no longer able to respond to commands, the "
"connection is transparently recycled, and all other connections made "
"prior to the current timestamp are invalidated."
msgstr ""

#: ../../changelog/changelog_12.rst:2294
msgid ":ref:`pool_disconnects_pessimistic`"
msgstr ""

#: ../../changelog/changelog_12.rst:2296
msgid ":ref:`change_3919`"
msgstr ""

#: ../../changelog/changelog_11.rst:694
msgid ""
"Added an exception handler that will warn for the \"cause\" exception on "
"Py2K when the \"autorollback\" feature of :class:`.Connection` itself "
"raises an exception. In Py3K, the two exceptions are naturally reported "
"by the interpreter as one occurring during the handling of the other. "
"This is continuing with the series of changes for rollback failure "
"handling that were last visited as part of :ticket:`2696` in 1.0.12."
msgstr ""

#: ../../changelog/changelog_12.rst:2355
msgid ""
"Fixed bug where in the unusual case of passing a :class:`.Compiled` "
"object directly to :meth:`.Connection.execute`, the dialect with which "
"the :class:`.Compiled` object were generated was not consulted for the "
"paramstyle of the string statement, instead assuming it would match the "
"dialect-level paramstyle, causing mismatches to occur."
msgstr ""

#: ../../changelog/changelog_12.rst:2176
msgid ""
"Added a new kind of :func:`.bindparam` called \"expanding\".  This is for"
" use in ``IN`` expressions where the list of elements is rendered into "
"individual bound parameters at statement execution time, rather than at "
"statement compilation time.  This allows both a single bound parameter "
"name to be linked to an IN expression of multiple elements, as well as "
"allows query caching to be used with IN expressions.  The new feature "
"allows the related features of \"select in\" loading and \"polymorphic "
"in\" loading to make use of the baked query extension to reduce call "
"overhead.   This feature should be considered to be **experimental** for "
"1.2."
msgstr ""

#: ../../changelog/changelog_12.rst:2189
msgid ":ref:`change_3953`"
msgstr ""

#: ../../changelog/changelog_12.rst:2265
msgid ""
"Added support for SQL comments on :class:`.Table` and :class:`.Column` "
"objects, via the new :paramref:`.Table.comment` and "
":paramref:`.Column.comment` arguments.   The comments are included as "
"part of DDL on table creation, either inline or via an appropriate ALTER "
"statement, and are also reflected back within table reflection, as well "
"as via the :class:`.Inspector`.   Supported backends currently include "
"MySQL, Postgresql, and Oracle.  Many thanks to Frazer McLean for a large "
"amount of effort on this."
msgstr ""

#: ../../changelog/changelog_12.rst:2276
msgid ":ref:`change_1546`"
msgstr ""

#: ../../changelog/changelog_12.rst:2430
msgid ""
"The longstanding behavior of the :meth:`.ColumnOperators.in_` and "
":meth:`.ColumnOperators.notin_` operators emitting a warning when the "
"right-hand condition is an empty sequence has been revised; a simple "
"\"static\" expression of \"1 != 1\" or \"1 = 1\" is now rendered by "
"default, rather than pulling in the original left-hand expression.  This "
"causes the result for a NULL column comparison against an empty set to "
"change from NULL to true/false.  The behavior is configurable, and the "
"old behavior can be enabled using the "
":paramref:`.create_engine.empty_in_strategy` parameter to "
":func:`.create_engine`."
msgstr ""

#: ../../changelog/changelog_12.rst:2443
msgid ":ref:`change_3907`"
msgstr ""

#: ../../changelog/changelog_12.rst:2465
msgid ""
"Added a new option ``autoescape`` to the \"startswith\" and \"endswith\" "
"classes of comparators; this supplies an escape character also applies it"
" to all occurrences of the wildcard characters \"%\" and \"_\" "
"automatically.  Pull request courtesy Diana Clarke."
msgstr ""

#: ../../changelog/changelog_12.rst:2470
msgid ""
"This feature has been changed as of 1.2.0 from its initial implementation"
" in 1.2.0b2 such that autoescape is now passed as a boolean value, rather"
" than a specific character to use as the escape character."
msgstr ""

#: ../../changelog/changelog_11.rst:442
msgid ""
"Fixed AttributeError which would occur in :class:`.WithinGroup` construct"
" during an iteration of the structure."
msgstr ""

#: ../../changelog/changelog_11.rst:618
msgid ""
"Fixed regression released in 1.1.5 due to :ticket:`3859` where "
"adjustments to the \"right-hand-side\" evaluation of an expression based "
"on :class:`.Variant` to honor the underlying type's \"right-hand-side\" "
"rules caused the :class:`.Variant` type to be inappropriately lost, in "
"those cases when we *do* want the left-hand side type to be transferred "
"directly to the right hand side so that bind-level rules can be applied "
"to the expression's argument."
msgstr ""

#: ../../changelog/changelog_11.rst:631
msgid ""
"Changed the mechanics of :class:`.ResultProxy` to unconditionally delay "
"the \"autoclose\" step until the :class:`.Connection` is done with the "
"object; in the case where Postgresql ON CONFLICT with RETURNING returns "
"no rows, autoclose was occurring in this previously non-existent use "
"case, causing the usual autocommit behavior that occurs unconditionally "
"upon INSERT/UPDATE/DELETE to fail."
msgstr ""

#: ../../changelog/changelog_12.rst:1737
msgid ""
"The rules for type coercion between :class:`.Numeric`, :class:`.Integer`,"
" and date-related types now include additional logic that will attempt to"
" preserve the settings of the incoming type on the \"resolved\" type. "
"Currently the target for this is the ``asdecimal`` flag, so that a math "
"operation between :class:`.Numeric` or :class:`.Float` and "
":class:`.Integer` will preserve the \"asdecimal\" flag as well as if the "
"type should be the :class:`.Float` subclass."
msgstr ""

#: ../../changelog/changelog_12.rst:1747 ../../changelog/changelog_12.rst:1763
#: ../../changelog/changelog_12.rst:1777
msgid ":ref:`change_floats_12`"
msgstr ""

#: ../../changelog/changelog_12.rst:1753
msgid ""
"The result processor for the :class:`.Float` type now unconditionally "
"runs values through the ``float()`` processor if the dialect specifies "
"that it also supports \"native decimal\" mode.  While most backends will "
"deliver Python ``float`` objects for a floating point datatype, the MySQL"
" backends in some cases lack the typing information in order to provide "
"this and return ``Decimal`` unless the float conversion is done."
msgstr ""

#: ../../changelog/changelog_12.rst:1769
msgid ""
"Added some extra strictness to the handling of Python \"float\" values "
"passed to SQL statements.  A \"float\" value will be associated with the "
":class:`.Float` datatype and not the Decimal-coercing :class:`.Numeric` "
"datatype as was the case before, eliminating a confusing warning emitted "
"on SQLite as well as unecessary coercion to Decimal."
msgstr ""

#: ../../changelog/changelog_12.rst:1933
msgid ""
"The operator precedence for all comparison operators such as LIKE, IS, "
"IN, MATCH, equals, greater than, less than, etc. has all been merged into"
" one level, so that expressions which make use of these against each "
"other will produce parentheses between them.   This suits the stated "
"operator precedence of databases like Oracle, MySQL and others which "
"place all of these operators as equal precedence, as well as Postgresql "
"as of 9.5 which has also flattened its operator precendence."
msgstr ""

#: ../../changelog/changelog_12.rst:1943
msgid ":ref:`change_3999`"
msgstr ""

#: ../../changelog/changelog_12.rst:2014
msgid ""
"Repaired issue where the type of an expression that used "
":meth:`.ColumnOperators.is_` or similar would not be a \"boolean\" type, "
"instead the type would be \"nulltype\", as well as when using custom "
"comparison operators against an untyped expression.   This typing can "
"impact how the expression behaves in larger contexts as well as in "
"result-row-handling."
msgstr ""

#: ../../changelog/changelog_12.rst:2036
msgid ""
"Fixed the negation of a :class:`.Label` construct so that the inner "
"element is negated correctly, when the :func:`.not_` modifier is applied "
"to the labeled expression."
msgstr ""

#: ../../changelog/changelog_12.rst:2114
msgid ""
"The system by which percent signs in SQL statements are \"doubled\" for "
"escaping purposes has been refined.   The \"doubling\" of percent signs "
"mostly associated with the :obj:`.literal_column` construct as well as "
"operators like :meth:`.ColumnOperators.contains` now occurs based on the "
"stated paramstyle of the DBAPI in use; for percent-sensitive paramstyles "
"as are common with the Postgresql and MySQL drivers the doubling will "
"occur, for others like that of SQLite it will not.   This allows more "
"database-agnostic use of the :obj:`.literal_column` construct to be "
"possible."
msgstr ""

#: ../../changelog/changelog_12.rst:2126
msgid ":ref:`change_3740`"
msgstr ""

#: ../../changelog/changelog_12.rst:2148
msgid ""
"Fixed bug where a column-level :class:`.CheckConstraint` would fail to "
"compile the SQL expression using the underlying dialect compiler as well "
"as apply proper flags to generate literal values as inline, in the case "
"that the sqltext is a Core expression and not just a plain string.   This"
" was long-ago fixed for table-level check constraints in 0.9 as part of "
":ticket:`2742`, which more commonly feature Core SQL expressions as "
"opposed to plain string expressions."
msgstr ""

#: ../../changelog/changelog_12.rst:2195
msgid ""
"Fixed bug where a SQL-oriented Python-side column default could fail to "
"be executed properly upon INSERT in the \"pre-execute\" codepath, if the "
"SQL itself were an untyped expression, such as plain text.  The \"pre- "
"execute\" codepath is fairly uncommon however can apply to non-integer "
"primary key columns with SQL defaults when RETURNING is not used."
msgstr ""

#: ../../changelog/changelog_12.rst:2205
msgid ""
"The expression used for COLLATE as rendered by the column-level "
":func:`.expression.collate` and :meth:`.ColumnOperators.collate` is now "
"quoted as an identifier when the name is case sensitive, e.g. has "
"uppercase characters.  Note that this does not impact type-level "
"collation, which is already quoted."
msgstr ""

#: ../../changelog/changelog_12.rst:2213
msgid ":ref:`change_3785`"
msgstr ""

#: ../../changelog/changelog_12.rst:2302
msgid ""
"Fixed bug where the use of an :class:`.Alias` object in a column context "
"would raise an argument error when it tried to group itself into a "
"parenthesized expression.   Using :class:`.Alias` in this way is not yet "
"a fully supported API, however it applies to some end-user recipes and "
"may have a more prominent role in support of some future Postgresql "
"features."
msgstr ""

#: ../../changelog/changelog_11.rst:555
msgid ""
"An :class:`.ArgumentError` is now raised if a "
":class:`.ForeignKeyConstraint` object is created with a mismatched number"
" of \"local\" and \"remote\" columns, which otherwise causes the internal"
" state of the constraint to be incorrect.   Note that this also impacts "
"the condition where a dialect's reflection process produces a mismatched "
"set of columns for a foreign key constraint."
msgstr ""

#: ../../changelog/changelog_11.rst:465
msgid ""
"Continuing with the fix that correctly handles Postgresql version string "
"\"10devel\" released in 1.1.8, an additional regexp bump to handle "
"version strings of the form \"10beta1\".   While Postgresql now offers "
"better ways to get this information, we are sticking w/ the regexp at "
"least through 1.1.x for the least amount of risk to compatibility w/ "
"older or alternate Postgresql databases."
msgstr ""

#: ../../changelog/changelog_11.rst:478
msgid ""
"Fixed bug where using :class:`.ARRAY` with a string type that features a "
"collation would fail to produce the correct syntax within CREATE TABLE."
msgstr ""

#: ../../changelog/changelog_11.rst:577
msgid ""
"Added \"autocommit\" support for GRANT, REVOKE keywords.  Pull request "
"courtesy Jacob Hayes."
msgstr ""

#: ../../changelog/changelog_11.rst:669
msgid ""
"Added support for parsing the Postgresql version string for a development"
" version like \"PostgreSQL 10devel\".  Pull request courtesy Sean "
"McCully."
msgstr ""

#: ../../changelog/changelog_12.rst:2082
msgid ""
"Fixed bug where the base :class:`.sqltypes.ARRAY` datatype would not "
"invoke the bind/result processors of :class:`.postgresql.ARRAY`."
msgstr ""

#: ../../changelog/changelog_12.rst:2132
msgid ""
"Added support for all possible \"fields\" identifiers when reflecting the"
" Postgresql ``INTERVAL`` datatype, e.g. \"YEAR\", \"MONTH\", \"DAY TO "
"MINUTE\", etc..   In addition, the :class:`.postgresql.INTERVAL` datatype"
" itself now includes a new parameter "
":paramref:`.postgresql.INTERVAL.fields` where these qualifiers can be "
"specified; the qualifier is also reflected back into the resulting "
"datatype upon reflection / inspection."
msgstr ""

#: ../../changelog/changelog_12.rst:2142
msgid ":ref:`change_3959`"
msgstr ""

#: ../../changelog/changelog_12.rst:1725
msgid ""
"Added support for MySQL's ON DUPLICATE KEY UPDATE MySQL-specific "
":class:`.mysql.dml.Insert` object. Pull request courtesy Michael Doronin."
msgstr ""

#: ../../changelog/changelog_12.rst:1731
msgid ":ref:`change_4009`"
msgstr ""

#: ../../changelog/changelog_11.rst:487
msgid ""
"MySQL 5.7 has introduced permission limiting for the \"SHOW VARIABLES\" "
"command; the MySQL dialect will now handle when SHOW returns no row, in "
"particular for the initial fetch of SQL_MODE, and will emit a warning "
"that user permissions should be modified to allow the row to be present."
msgstr ""

#: ../../changelog/changelog_11.rst:585
msgid ""
"Removed an ancient and unnecessary intercept of the UTC_TIMESTAMP MySQL "
"function, which was getting in the way of using it with a parameter."
msgstr ""

#: ../../changelog/changelog_11.rst:594
msgid ""
"Fixed bug in MySQL dialect regarding rendering of table options in "
"conjunction with PARTITION options when rendering CREATE TABLE. The "
"PARTITION related options need to follow the table options, whereas "
"previously this ordering was not enforced."
msgstr ""

#: ../../changelog/changelog_12.rst:1962
msgid ""
"Added support for views that are unreflectable due to stale table "
"definitions, when calling :meth:`.MetaData.reflect`; a warning is emitted"
" for the table that cannot respond to ``DESCRIBE``, but the operation "
"succeeds."
msgstr ""

#: ../../changelog/changelog_11.rst:498
msgid ""
"Fixed bug where SQL Server transaction isolation must be fetched from a "
"different view when using Azure data warehouse, the query is now "
"attempted against both views and then a NotImplemented is raised "
"unconditionally if failure continues to provide the best resiliency "
"against future arbitrary API changes in new SQL Server versions."
msgstr ""

#: ../../changelog/changelog_11.rst:521
msgid ""
"Added a placeholder type :class:`.mssql.XML` to the SQL Server dialect, "
"so that a reflected table which includes this type can be re-rendered as "
"a CREATE TABLE.  The type has no special round-trip behavior nor does it "
"currently support additional qualifying arguments."
msgstr ""

#: ../../changelog/changelog_12.rst:2160
msgid ""
"The SQL Server dialect now allows for a database and/or owner name with a"
" dot inside of it, using brackets explicitly in the string around the "
"owner and optionally the database name as well.  In addition, sending the"
" :class:`.quoted_name` construct for the schema name will not split on "
"the dot and will deliver the full string as the \"owner\". "
":class:`.quoted_name` is also now available from the ``sqlalchemy.sql`` "
"import space."
msgstr ""

#: ../../changelog/changelog_12.rst:2170
msgid ":ref:`change_2626`"
msgstr ""

#: ../../changelog/changelog_11.rst:393
msgid ""
"Added new keywords :paramref:`.Sequence.cache` and "
":paramref:`.Sequence.order` to :class:`.Sequence`, to allow rendering of "
"the CACHE parameter understood by Oracle and PostgreSQL, and the ORDER "
"parameter understood by Oracle.  Pull request courtesy David Moore."
msgstr ""

#: ../../changelog/changelog_12.rst:1846
msgid ""
"The Oracle dialect now inspects unique and check constraints when using "
":meth:`.Inspector.get_unique_constraints`, "
":meth:`.Inspector.get_check_constraints`. As Oracle does not have unique "
"constraints that are separate from a unique :class:`.Index`, a "
":class:`.Table` that's reflected will still continue to not have "
":class:`.UniqueConstraint` objects associated with it. Pull requests "
"courtesy Eloy Felix."
msgstr ""

#: ../../changelog/changelog_12.rst:1856
msgid ":ref:`change_4003`"
msgstr ""

#: ../../changelog/changelog_11.rst:510
msgid ""
"Support for two-phase transactions has been removed entirely for "
"cx_Oracle when version 6.0b1 or later of the DBAPI is in use.  The two- "
"phase feature historically has never been usable under cx_Oracle 5.x in "
"any case, and cx_Oracle 6.x has removed the connection-level \"twophase\""
" flag upon which this feature relied."
msgstr ""

#: ../../changelog/changelog_11.rst:546
msgid ""
"Fixed bug in cx_Oracle dialect where version string parsing would fail "
"for cx_Oracle version 6.0b1 due to the \"b\" character.  Version string "
"parsing is now via a regexp rather than a simple split."
msgstr ""

#: ../../changelog/changelog_12.rst:2415
msgid ""
"The cx_Oracle dialect now supports \"sane multi rowcount\", that is, when"
" a series of parameter sets are executed via DBAPI "
"``cursor.executemany()``, we can make use of ``cursor.rowcount`` to "
"verify the number of rows matched.  This has an impact within the ORM "
"when detecting concurrent modification scenarios, in that some simple "
"conditions can now be detected even when the ORM is batching statements, "
"as well as when the more strict versioning feature is used, the ORM can "
"still use statement batching.  The flag is enabled for cx_Oracle assuming"
" at least version 5.0, which is now commonplace."
msgstr ""

#: ../../changelog/changelog_12.rst:2449
msgid ""
"Oracle reflection now \"normalizes\" the name given to a foreign key "
"constraint, that is, returns it as all lower case for a case insensitive "
"name.  This was already the behavior for indexes and primary key "
"constraints as well as all table and column names. This will allow "
"Alembic autogenerate scripts to compare and render foreign key constraint"
" names correctly when initially specified as case insensitive."
msgstr ""

#: ../../changelog/changelog_12.rst:2459
msgid ":ref:`change_3276`"
msgstr ""

#: ../../changelog/changelog_12.rst:1970
msgid ""
"Added new flag :paramref:`.Session.enable_baked_queries` to the "
":class:`.Session` to allow baked queries to be disabled session-wide, "
"reducing memory use.   Also added new :class:`.Bakery` wrapper so that "
"the bakery returned by :paramref:`.BakedQuery.bakery` can be inspected."
msgstr ""

#: ../../changelog/changelog_11.rst:567
msgid ""
"Protected against testing \"None\" as a class in the case where "
"declarative classes are being garbage collected and new automap prepare()"
" operations are taking place concurrently, very infrequently hitting a "
"weakref that has not been fully acted upon after gc."
msgstr ""

#: ../../changelog/changelog_11.rst:647
msgid ""
"Fixed bug in :mod:`sqlalchemy.ext.mutable` where the "
":meth:`.Mutable.as_mutable` method would not track a type that had been "
"copied using :meth:`.TypeEngine.copy`.  This became more of a regression "
"in 1.1 compared to 1.0 because the :class:`.TypeDecorator` class is now a"
" subclass of :class:`.SchemaEventTarget`, which among other things "
"indicates to the parent :class:`.Column` that the type should be copied "
"when the :class:`.Column` is.  These copies are common when using "
"declarative with mixins or abstract classes."
msgstr ""

#: ../../changelog/changelog_11.rst:660
msgid ""
"Added support for bound parameters, e.g. those normally set up via "
":meth:`.Query.params`, to the :meth:`.baked.Result.count` method.  "
"Previously, support for parameters were omitted. Pull request courtesy "
"Pat Deegan."
msgstr ""

#: ../../changelog/changelog_12.rst:1809
msgid ""
"The :meth:`.AssociationProxy.any`, :meth:`.AssociationProxy.has` and "
":meth:`.AssociationProxy.contains` comparison methods now support linkage"
" to an attribute that is itself also an :class:`.AssociationProxy`, "
"recursively."
msgstr ""

#: ../../changelog/changelog_12.rst:1816
msgid ":ref:`change_3769`"
msgstr ""

#: ../../changelog/changelog_12.rst:1822
msgid ""
"Implemented in-place mutation operators ``__ior__``, ``__iand__``, "
"``__ixor__`` and ``__isub__`` for :class:`.mutable.MutableSet` and "
"``__iadd__`` for :class:`.mutable.MutableList` so that change events are "
"fired off when these mutator methods are used to alter the collection."
msgstr ""

#: ../../changelog/changelog_12.rst:1830
msgid ":ref:`change_3853`"
msgstr ""

#: ../../changelog/changelog_12.rst:1836
msgid ""
"A warning is emitted if the :attr:`.declared_attr.cascading` modifier is "
"used with a declarative attribute that is itself declared on a class that"
" is to be mapped, as opposed to a declarative mixin class or "
"``__abstract__`` class.  The :attr:`.declared_attr.cascading` modifier "
"currently only applies to mixin/abstract classes."
msgstr ""

#: ../../changelog/changelog_12.rst:2025
msgid ""
"Improved the association proxy list collection so that premature "
"autoflush against a newly created association object can be prevented in "
"the case where ``list.append()`` is being used, and a lazy load would be "
"invoked when the association proxy accesses the endpoint collection.  The"
" endpoint collection is now accessed first before the creator is invoked "
"to produce the association object."
msgstr ""

#: ../../changelog/changelog_12.rst:2248
msgid ""
"The :class:`sqlalchemy.ext.hybrid.hybrid_property` class now supports "
"calling mutators like ``@setter``, ``@expression`` etc. multiple times "
"across subclasses, and now provides a ``@getter`` mutator, so that a "
"particular hybrid can be repurposed across subclasses or other classes.  "
"This now matches the behavior of ``@property`` in standard Python."
msgstr ""

#: ../../changelog/changelog_12.rst:2257
msgid ":ref:`change_3911_3912`"
msgstr ""

#: ../../changelog/changelog_12.rst:2379
msgid ""
"Fixed a bug in the ``sqlalchemy.ext.serializer`` extension whereby an "
"\"annotated\" SQL element (as produced by the ORM for many types of SQL "
"expressions) could not be reliably serialized.  Also bumped the default "
"pickle level for the serializer to \"HIGHEST_PROTOCOL\"."
msgstr ""

