# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../faq/sqlexpressions.rst:2
msgid "SQL Expressions"
msgstr "SQL式"

#: ../../faq/sqlexpressions.rst:12
msgid ""
"How do I render SQL expressions as strings, possibly with bound "
"parameters inlined?"
msgstr "SQL式を文字列としてレンダリングするにはどうすればよいでしょうか？"

#: ../../faq/sqlexpressions.rst:14
msgid ""
"The \"stringification\" of a SQLAlchemy statement or Query in the vast "
"majority of cases is as simple as::"
msgstr "ほとんどの場合、SQLAlchemy文やQueryの &quot;文字列&quot;は、次のように簡単です::"

#: ../../faq/sqlexpressions.rst:19
msgid ""
"this applies both to an ORM :class:`~.orm.query.Query` as well as any "
":func:`.select` or other statement.   Additionally, to get the statement "
"as compiled to a specific dialect or engine, if the statement itself is "
"not already bound to one you can pass this in to "
":meth:`.ClauseElement.compile`::"
msgstr "これは、ORM：class： `〜.orm.query.Query`と、：func：` .select`または他のステートメントの両方に適用されます。さらに、特定の方言またはエンジンにコンパイルされた文を取得するには、文自体がすでにバインドされていない場合は、これを：meth： `.ClauseElement.compile` ::に渡すことができます"

#: ../../faq/sqlexpressions.rst:26
msgid "or without an :class:`.Engine`::"
msgstr "an：class： `.Engine` ::なしで"

#: ../../faq/sqlexpressions.rst:31
msgid ""
"When given an ORM :class:`~.orm.query.Query` object, in order to get at "
"the :meth:`.ClauseElement.compile` method we only need access the "
":attr:`~.orm.query.Query.statement` accessor first::"
msgstr "ORM：class： `〜.orm.query.Query`オブジェクトが与えられた場合、：meth：` .ClauseElement.compile`メソッドを取得するには、次のようにアクセスする必要があります：attr： `〜.orm.query.Query .statement`アクセサを最初に::"

#: ../../faq/sqlexpressions.rst:39
msgid ""
"The above forms will render the SQL statement as it is passed to the "
"Python :term:`DBAPI`, which includes that bound parameters are not "
"rendered inline. SQLAlchemy normally does not stringify bound parameters,"
" as this is handled appropriately by the Python DBAPI, not to mention "
"bypassing bound parameters is probably the most widely exploited security"
" hole in modern web applications.   SQLAlchemy has limited ability to do "
"this stringification in certain circumstances such as that of emitting "
"DDL. In order to access this functionality one can use the "
"``literal_binds`` flag, passed to ``compile_kwargs``::"
msgstr "上記のフォームは、SQL文がPython：term： `DBAPI`に渡されるときにレンダリングします。これには、バインドされたパラメータがインラインでレンダリングされないことが含まれます。 SQLAlchemyは通常、バインドされたパラメータを文字列化しません。これはPython DBAPIによって適切に処理されるため、バインドされたパラメータを省略することはありません。 SQLAlchemyは、DDLを発行するような特定の状況でこの文字列化を行う能力は限られています。この機能にアクセスするには、 `` literal_binds``フラグを `` compile_kwargs``に渡すことができます::"

#: ../../faq/sqlexpressions.rst:57
msgid ""
"the above approach has the caveats that it is only supported for basic "
"types, such as ints and strings, and furthermore if a :func:`.bindparam` "
"without a pre-set value is used directly, it won't be able to stringify "
"that either."
msgstr "上記のアプローチでは、intや文字列などの基本型に対してのみサポートされているという注意点があります。さらに、あらかじめ設定された値を持たないa：func： `.bindparam`を直接使用すると、文字列化できませんそのいずれか。"

#: ../../faq/sqlexpressions.rst:62
msgid ""
"To support inline literal rendering for types not supported, implement a "
":class:`.TypeDecorator` for the target type which includes a "
":meth:`.TypeDecorator.process_literal_param` method::"
msgstr "サポートされていない型のインライン・リテラル・レンダリングをサポートするには、：meth： `.TypeDecorator.process_literal_param`メソッドを含むターゲット・タイプに対して：class：` .TypeDecorator`を実装します。"

#: ../../faq/sqlexpressions.rst:84
msgid "producing output like::"
msgstr "::のような出力を生成する"

#: ../../faq/sqlexpressions.rst:94
msgid ""
"I'm using op() to generate a custom operator and my parenthesis are not "
"coming out correctly"
msgstr "私はop（）を使用してカスタム演算子を生成していますが、カッコが正しく出力されていません"

#: ../../faq/sqlexpressions.rst:96
msgid ""
"The :meth:`.Operators.op` method allows one to create a custom database "
"operator otherwise not known by SQLAlchemy::"
msgstr "：meth： `.Operators.op`メソッドを使うと、SQLAlchemy ::で知られていないカスタムデータベース演算子を作成することができます"

#: ../../faq/sqlexpressions.rst:102
msgid ""
"However, when using it on the right side of a compound expression, it "
"doesn't generate parenthesis as we expect::"
msgstr "しかし、複合式の右側でそれを使用すると、期待どおり括弧が生成されません::"

#: ../../faq/sqlexpressions.rst:108
msgid "Where above, we probably want ``(q1 + q2) -> p``."
msgstr "上記の場合、おそらく ``（q1 + q2） - &gt; p``が必要です。"

#: ../../faq/sqlexpressions.rst:110
msgid ""
"The solution to this case is to set the precedence of the operator, using"
" the :paramref:`.Operators.op.precedence` parameter, to a high number, "
"where 100 is the maximum value, and the highest number used by any "
"SQLAlchemy operator is currently 15::"
msgstr "この場合の解決策は、：paramref： `.Operators.op.precedence`パラメータを高い数値に設定して、演算子の優先順位を設定することです。ここで、100は最大値であり、SQLAlchemy演算子現在15です::"

#: ../../faq/sqlexpressions.rst:118
msgid ""
"We can also usually force parenthesization around a binary expression "
"(e.g. an expression that has left/right operands and an operator) using "
"the :meth:`.ColumnElement.self_group` method::"
msgstr "通常は、：meth： `.ColumnElement.self_group`メソッドを使用して、バイナリ式（左辺/右辺オペランドと演算子を持つ式など）を括弧で囲むこともできます。"

#: ../../faq/sqlexpressions.rst:126
msgid "Why are the parentheses rules like this?"
msgstr "なぜかっこのルールはどうですか？"

#: ../../faq/sqlexpressions.rst:128
msgid ""
"A lot of databases barf when there are excessive parenthesis or when "
"parenthesis are in unusual places they doesn't expect, so SQLAlchemy does"
" not generate parenthesis based on groupings, it uses operator precedence"
" and if the operator is known to be associative, so that parenthesis are "
"generated minimally. Otherwise, an expression like::"
msgstr "余分な括弧がある場合や括弧が予想外の場所にある場合、SQLAlchemyはグループ化に基づいて括弧を生成せず、演算子の優先順位を使用し、演算子が結合的であるとわかっている場合は括弧最小限に生成される。さもなければ、::のような式"

#: ../../faq/sqlexpressions.rst:136 ../../faq/sqlexpressions.rst:146
msgid "would produce::"
msgstr "生成するだろう::"

#: ../../faq/sqlexpressions.rst:140
msgid ""
"which is fine but would probably annoy people (and be reported as a bug)."
" In other cases, it leads to things that are more likely to confuse "
"databases or at the very least readability, such as::"
msgstr "これは問題ありませんが、おそらく人々を悩ますでしょう（とバグとして報告される）。他のケースでは、データベースを混乱させる可能性のあるものや、最低限の可読性をもたらすものにつながります::"

#: ../../faq/sqlexpressions.rst:150
msgid ""
"There are also some edge cases where we get things like ``\"(x) = 7\"`` "
"and databases really don't like that either.  So parenthesization doesn't"
" naively parenthesize, it uses operator precedence and associativity to "
"determine groupings."
msgstr "また、 `` \ &quot;（x）= 7 \&quot; ``のようなものがあり、データベースはそれを気に入らないケースもあります。したがって、かっこは括弧で囲むのではなく、演算子の優先順位と結合性を使用してグループ化を決定します。"

#: ../../faq/sqlexpressions.rst:155
msgid "For :meth:`.Operators.op`, the value of precedence defaults to zero."
msgstr "：meth： `.Operators.op`の場合、優先順位の値はデフォルトでゼロになります。"

#: ../../faq/sqlexpressions.rst:157
msgid ""
"What if we defaulted the value of :paramref:`.Operators.op.precedence` to"
" 100, e.g. the highest?  Then this expression makes more parenthesis, but"
" is otherwise OK, that is, these two are equivalent::"
msgstr "：paramref： `.Operators.op.precedence`の値を100にデフォルト設定した場合、例えば最高ですか？次に、この式はより多くの括弧を作成しますが、そうでなければOKです。つまり、これら2つは同等です。"

#: ../../faq/sqlexpressions.rst:166
msgid "but these two are not::"
msgstr "しかし、これらの2つはありません::"

#: ../../faq/sqlexpressions.rst:173
msgid ""
"For now, it's not clear that as long as we are doing parenthesization "
"based on operator precedence and associativity, if there is really a way "
"to parenthesize automatically for a generic operator with no precedence "
"given that is going to work in all cases, because sometimes you want a "
"custom op to have a lower precedence than the other operators and "
"sometimes you want it to be higher."
msgstr "現時点では、演算子の優先順位と結合性に基づいてかっこを行っている限り、すべての場合に優先する優先順位のない汎用演算子に対して自動的にかっこをかける方法が実際にある場合は、カスタムオペレーションの優先順位を他のオペレータよりも低くしたい場合があります。"

#: ../../faq/sqlexpressions.rst:179
msgid ""
"It is possible that maybe if the \"binary\" expression above forced the "
"use of the ``self_group()`` method when ``op()`` is called, making the "
"assumption that a compound expression on the left side can always be "
"parenthesized harmlessly. Perhaps this change can be made at some point, "
"however for the time being keeping the parenthesization rules more "
"internally consistent seems to be the safer approach."
msgstr "`` op（） ``が呼び出されたときに、上記の\ &quot;バイナリ\&quot;の式が強制的に `` self_group（） ``メソッドを使用すると、左側の複合式が、無害に常にカッコで囲んでください。おそらく、この変更はある時点で行うことができますが、括弧の規則をより内部的に一貫して維持することは、より安全なアプローチであるようです。"

