# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/versioning.rst:4
msgid "Configuring a Version Counter"
msgstr "バージョンカウンタの設定"

#: ../../orm/versioning.rst:6
msgid ""
"The :class:`.Mapper` supports management of a :term:`version id column`, "
"which is a single table column that increments or otherwise updates its "
"value each time an ``UPDATE`` to the mapped table occurs.  This value is "
"checked each time the ORM emits an ``UPDATE`` or ``DELETE`` against the "
"row to ensure that the value held in memory matches the database value."
msgstr "：class： `.Mapper`は、：term：` version id column`の管理をサポートしています。これは、マップされたテーブルへの `` UPDATE``が発生するたびにその値をインクリメントまたは更新する単一のテーブルカラムです。この値はORMが行に対して「UPDATE」または「DELETE」を発行するたびにチェックされ、メモリに保持されている値がデータベース値と一致することを保証します。"

#: ../../orm/versioning.rst:14
msgid ""
"Because the versioning feature relies upon comparison of the **in "
"memory** record of an object, the feature only applies to the "
":meth:`.Session.flush` process, where the ORM flushes individual in-"
"memory rows to the database. It does **not** take effect when performing "
"a multirow UPDATE or DELETE using :meth:`.Query.update` or "
":meth:`.Query.delete` methods, as these methods only emit an UPDATE or "
"DELETE statement but otherwise do not have direct access to the contents "
"of those rows being affected."
msgstr "バージョン管理機能はオブジェクトの**メモリ**レコードの比較に依存するため、この機能は：meth： `.Session.flush`プロセスにのみ適用されます。このプロセスでは、ORMによって個々のメモリ内の行がデータベースにフラッシュされます。 meth： `.Query.update`メソッドまたは：meth：` .Query.delete`メソッドを使用して複数行のUPDATEまたはDELETEを実行する場合は**これらのメソッドはUPDATEまたはDELETEステートメントのみを出力しますが、影響を受ける行の内容に直接アクセスすることはできません。"

#: ../../orm/versioning.rst:22
msgid ""
"The purpose of this feature is to detect when two concurrent transactions"
" are modifying the same row at roughly the same time, or alternatively to"
" provide a guard against the usage of a \"stale\" row in a system that "
"might be re-using data from a previous transaction without refreshing "
"(e.g. if one sets ``expire_on_commit=False`` with a :class:`.Session`, it"
" is possible to re-use the data from a previous transaction)."
msgstr "この機能の目的は、2つの同時トランザクションが同じ行をほぼ同じ時間に変更しているかどうかを検出するか、またはデータを再利用している可能性があるシステム内の古い行の使用に対してガードを提供することです（例えば：class： `.Session`で` expire_on_commit = False``を設定すると、以前のトランザクションからのデータを再利用することができます）。"

#: ../../orm/versioning.rst:31
msgid ""
"When detecting concurrent updates within transactions, it is typically "
"the case that the database's transaction isolation level is below the "
"level of :term:`repeatable read`; otherwise, the transaction will not be "
"exposed to a new row value created by a concurrent update which conflicts"
" with the locally updated value.  In this case, the SQLAlchemy versioning"
" feature will typically not be useful for in-transaction conflict "
"detection, though it still can be used for cross-transaction staleness "
"detection."
msgstr "トランザクション内での同時更新を検出する場合、通常、データベースのトランザクション分離レベルが以下のレベルより低い場合があります。term： `repeatable read`;それ以外の場合、トランザクションは、ローカル更新値と競合する並行更新によって作成された新しい行値に公開されません。この場合、SQLAlchemyのバージョニング機能は、通常、トランザクション内の競合検出には使用できませんが、トランザクション内の競合検出には有効ではありません。"

#: ../../orm/versioning.rst:39
msgid ""
"The database that enforces repeatable reads will typically either have "
"locked the target row against a concurrent update, or is employing some "
"form of multi version concurrency control such that it will emit an error"
" when the transaction is committed.  SQLAlchemy's version_id_col is an "
"alternative which allows version tracking to occur for specific tables "
"within a transaction that otherwise might not have this isolation level "
"set."
msgstr "反復可能な読み取りを強制するデータベースは、通常、並行更新に対してターゲット行をロックしているか、トランザクションがコミットされたときにエラーを発行するような何らかの形式のマルチバージョン同時実行制御を採用しています。 SQLAlchemyのversion_id_colは、この分離レベルが設定されていない可能性があるトランザクション内の特定のテーブルでバージョントラッキングを実行できるようにする代替手段です。"

#: ../../orm/versioning.rst:48
msgid ""
"`Repeatable Read Isolation Level "
"<http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-"
"REPEATABLE-READ>`_ - PostgreSQL's implementation of repeatable read, "
"including a description of the error condition."
msgstr "`反復可能な読み取り分離レベル<http://www.postgresql.org/docs/9.1/static/transaction-iso.html#XACT-REPEATABLE-READ> `_  - エラー状態の説明を含むPostgreSQLの反復可能な読み込みの実装。"

#: ../../orm/versioning.rst:51
msgid "Simple Version Counting"
msgstr "単純なバージョンのカウント"

#: ../../orm/versioning.rst:53
msgid ""
"The most straightforward way to track versions is to add an integer "
"column to the mapped table, then establish it as the ``version_id_col`` "
"within the mapper options::"
msgstr "バージョンを追跡する最も簡単な方法は、マップされたテーブルに整数列を追加し、それをマッパーオプションの `` version_id_col``として設定することです："

#: ../../orm/versioning.rst:68
msgid ""
"It is **strongly recommended** that the ``version_id`` column be made NOT"
" NULL.  The versioning feature **does not support** a NULL value in the "
"versioning column."
msgstr "`` version_id``カラムをNOT NULLにすることを強くお勧めします**。バージョン管理機能**は、バージョン管理列のNULL値をサポートしていません。"

#: ../../orm/versioning.rst:72
msgid ""
"Above, the ``User`` mapping tracks integer versions using the column "
"``version_id``.   When an object of type ``User`` is first flushed, the "
"``version_id`` column will be given a value of \"1\".   Then, an UPDATE "
"of the table later on will always be emitted in a manner similar to the "
"following::"
msgstr "上記の `` User``マッピングは `` version_id``カラムを使って整数バージョンを追跡します。 `` User``型のオブジェクトが最初にフラッシュされると、 `` version_id``カラムは\ &quot;1 \&quot;の値が与えられます。その後、次のような方法で表のUPDATEが常に発行されます。"

#: ../../orm/versioning.rst:82
msgid ""
"The above UPDATE statement is updating the row that not only matches "
"``user.id = 1``, it also is requiring that ``user.version_id = 1``, where"
" \"1\" is the last version identifier we've been known to use on this "
"object. If a transaction elsewhere has modified the row independently, "
"this version id will no longer match, and the UPDATE statement will "
"report that no rows matched; this is the condition that SQLAlchemy tests,"
" that exactly one row matched our UPDATE (or DELETE) statement.  If zero "
"rows match, that indicates our version of the data is stale, and a "
":exc:`.StaleDataError` is raised."
msgstr "上記のUPDATE文は、 `` user.id = 1``と一致するだけでなく、 `` user.version_id = 1``を必要としている行を更新しています。\ &quot;1 \&quot;は、このオブジェクトで使用することが知られています。別の場所のトランザクションが独立に行を変更した場合、このバージョンIDは一致しなくなり、UPDATE文は一致する行がないことを報告します。これは、SQLAlchemyがテストしている条件で、ちょうど1つの行がUPDATE（またはDELETE）ステートメントと一致しています。ゼロ行が一致すると、データのバージョンが古く、a：exc： `.StaleDataError`が発生したことを示します。"

#: ../../orm/versioning.rst:94
msgid "Custom Version Counters / Types"
msgstr "カスタムバージョンのカウンタ/タイプ"

#: ../../orm/versioning.rst:96
msgid ""
"Other kinds of values or counters can be used for versioning.  Common "
"types include dates and GUIDs.   When using an alternate type or counter "
"scheme, SQLAlchemy provides a hook for this scheme using the "
"``version_id_generator`` argument, which accepts a version generation "
"callable.  This callable is passed the value of the current known "
"version, and is expected to return the subsequent version."
msgstr "バージョン管理には他の種類の値やカウンタを使用できます。一般的な型には、日付とGUIDが含まれます。代替型またはカウンタ方式を使用する場合、SQLAlchemyは、バージョン生成呼び出し可能を受け入れる `` version_id_generator``引数を使用して、このスキームのフックを提供します。この呼び出し可能オブジェクトは現在の既知のバージョンの値を渡され、後続のバージョンを返すことが期待されます。"

#: ../../orm/versioning.rst:102
msgid ""
"For example, if we wanted to track the versioning of our ``User`` class "
"using a randomly generated GUID, we could do this (note that some "
"backends support a native GUID type, but we illustrate here using a "
"simple string)::"
msgstr "たとえば、ランダムに生成されたGUIDを使用して、 `` User``クラスのバージョン管理を追跡したい場合、これを行うことができます（いくつかのバックエンドはネイティブなGUIDタイプをサポートしていますが、"

#: ../../orm/versioning.rst:120
msgid ""
"The persistence engine will call upon ``uuid.uuid4()`` each time a "
"``User`` object is subject to an INSERT or an UPDATE.  In this case, our "
"version generation function can disregard the incoming value of "
"``version``, as the ``uuid4()`` function generates identifiers without "
"any prerequisite value.  If we were using a sequential versioning scheme "
"such as numeric or a special character system, we could make use of the "
"given ``version`` in order to help determine the subsequent value."
msgstr "永続エンジンは、 `` User``オブジェクトがINSERTまたはUPDATEの対象となるたびに、 `` uuid.uuid4（） ``を呼び出します。この場合、 `` uuid4（） ``関数は前提条件値なしで識別子を生成するので、バージョン生成関数は `` version``の入力値を無視できます。数値や特殊文字システムなどのシーケンシャルバージョニングスキームを使用していた場合、後続の値を決定するために、与えられた `` version``を利用することができます。"

#: ../../orm/versioning.rst:131
msgid ":ref:`custom_guid_type`"
msgstr "：ref： `custom_guid_type`"

#: ../../orm/versioning.rst:136
msgid "Server Side Version Counters"
msgstr "サーバー側バージョンカウンタ"

#: ../../orm/versioning.rst:138
msgid ""
"The ``version_id_generator`` can also be configured to rely upon a value "
"that is generated by the database.  In this case, the database would need"
" some means of generating new identifiers when a row is subject to an "
"INSERT as well as with an UPDATE.   For the UPDATE case, typically an "
"update trigger is needed, unless the database in question supports some "
"other native version identifier.  The PostgreSQL database in particular "
"supports a system column called `xmin "
"<http://www.postgresql.org/docs/9.1/static/ddl-system-columns.html>`_ "
"which provides UPDATE versioning.  We can make use of the PostgreSQL "
"``xmin`` column to version our ``User`` class as follows::"
msgstr "`` version_id_generator``は、データベースによって生成された値に依存するように設定することもできます。この場合、データベースは、行がINSERTとUPDATEの両方を受けたときに新しい識別子を生成する手段を必要とします。 UPDATEの場合、問題のデータベースが他のネイティブバージョン識別子をサポートしていない限り、通常は更新トリガーが必要です。 PostgreSQLデータベースは、特に、 `xmin <http://www.postgresql.org/docs/9.1/static/ddl-system-columns.html> `_はUPDATEバージョン管理を提供します。 PostgreSQLの `` xmin``カラムを使って、 `` User``クラスを次のようにバージョンアップすることができます::"

#: ../../orm/versioning.rst:163
msgid ""
"With the above mapping, the ORM will rely upon the ``xmin`` column for "
"automatically providing the new value of the version id counter."
msgstr "上記のマッピングでは、ORMはバージョンIDカウンタの新しい値を自動的に提供する `` xmin``カラムに依存します。"

#: ../../orm/versioning.rst:168
msgid ""
"In the above scenario, as ``xmin`` is a system column provided by "
"PostgreSQL, we use the ``system=True`` argument to mark it as a system-"
"provided column, omitted from the ``CREATE TABLE`` statement."
msgstr "上記のシナリオでは、 `` xmin``はPostgreSQLが提供するシステムカラムであるため、 `` system = True``引数を使用してシステム提供のカラムとしてマークします。これは `` CREATE TABLE``文。"

#: ../../orm/versioning.rst:173
msgid ""
"The ORM typically does not actively fetch the values of database-"
"generated values when it emits an INSERT or UPDATE, instead leaving these"
" columns as \"expired\" and to be fetched when they are next accessed, "
"unless the ``eager_defaults`` :func:`.mapper` flag is set.  However, when"
" a server side version column is used, the ORM needs to actively fetch "
"the newly generated value.  This is so that the version counter is set up"
" *before* any concurrent transaction may update it again.   This fetching"
" is also best done simultaneously within the INSERT or UPDATE statement "
"using :term:`RETURNING`, otherwise if emitting a SELECT statement "
"afterwards, there is still a potential race condition where the version "
"counter may change before it can be fetched."
msgstr "ORMは通常、INSERTまたはUPDATEを発行するときにデータベース生成値の値を積極的にフェッチしません。これらの列を\ &quot;期限切れ\&quot;として残し、次回アクセス時にフェッチします。 func： `.mapper`フラグがセットされています。ただし、サーバー側のバージョン列を使用する場合、ORMは新しく生成された値をアクティブに取得する必要があります。これは、バージョンカウンタが設定されている*ため、同時トランザクションがそれを再び更新する前に*設定されているためです。このフェッチは、INSERTステートメントまたはUPDATEステートメント内で：term： `RETURNING`を使用して同時に行うのが最善です。そうしないと、後でSELECTステートメントを発行する場合でも、フェッチできる前にバージョンカウンターが変更される可能性があります。"

#: ../../orm/versioning.rst:184
msgid ""
"When the target database supports RETURNING, an INSERT statement for our "
"``User`` class will look like this::"
msgstr "ターゲットデータベースがRETURNINGをサポートしている場合、 `` User``クラスのINSERT文は次のようになります::"

#: ../../orm/versioning.rst:190
msgid ""
"Where above, the ORM can acquire any newly generated primary key values "
"along with server-generated version identifiers in one statement.   When "
"the backend does not support RETURNING, an additional SELECT must be "
"emitted for **every** INSERT and UPDATE, which is much less efficient, "
"and also introduces the possibility of missed version counters::"
msgstr "上記の場合、ORMは、新しく生成された主キー値を、1つのステートメント内のサーバー生成バージョン識別子とともに取得できます。バックエンドがRETURNINGをサポートしていない場合、** INSERTとUPDATEの**に対しては、より効率的ではない追加のSELECTを発行する必要があります。また、バージョンカウンタが紛失してしまう可能性もあります。"

#: ../../orm/versioning.rst:203
msgid ""
"It is *strongly recommended* that server side version counters only be "
"used when absolutely necessary and only on backends that support "
":term:`RETURNING`, e.g. PostgreSQL, Oracle, SQL Server (though SQL Server"
" has `major caveats "
"<http://blogs.msdn.com/b/sqlprogrammability/archive/2008/07/11/update-"
"with-output-clause-triggers-and-sqlmoreresults.aspx>`_ when triggers are "
"used), Firebird."
msgstr "サーバーサイドのバージョンカウンターは絶対に必要なときにのみ使用することを強くお勧めします。term： `RETURNING`をサポートするバックエンド、例えばPostgreSQL、Oracle、SQL Server（ただしSQL Serverには主な注意点があります<http://blogs.msdn.com/b/sqlprogrammability/archive/2008/07/11/update-with-output-clause-triggers-and-sqlmoreresults.aspx> `_トリガが使用されたときに_）、Firebird。"

#: ../../orm/versioning.rst:210
msgid "Support for server side version identifier tracking."
msgstr "サーバー側のバージョン識別子トラッキングのサポート。"

#: ../../orm/versioning.rst:213
msgid "Programmatic or Conditional Version Counters"
msgstr "プログラム型または条件付きバージョンのカウンタ"

#: ../../orm/versioning.rst:215
msgid ""
"When ``version_id_generator`` is set to False, we can also "
"programmatically (and conditionally) set the version identifier on our "
"object in the same way we assign any other mapped attribute.  Such as if "
"we used our UUID example, but set ``version_id_generator`` to ``False``, "
"we can set the version identifier at our choosing::"
msgstr "`` version_id_generator``がFalseに設定されている場合、他のマップされた属性を割り当てるのと同じ方法で、プログラム上（そして条件付きで）オブジェクトのバージョン識別子を設定することもできます。たとえば、UUIDの例を使用していて、 `` version_id_generator``を `` False``に設定した場合、バージョン識別子は次のように設定できます::"

#: ../../orm/versioning.rst:246
msgid ""
"We can update our ``User`` object without incrementing the version "
"counter as well; the value of the counter will remain unchanged, and the "
"UPDATE statement will still check against the previous value.  This may "
"be useful for schemes where only certain classes of UPDATE are sensitive "
"to concurrency issues::"
msgstr "バージョンカウンタもインクリメントせずに `` User``オブジェクトを更新することができます。カウンターの値は変更されず、UPDATEステートメントは引き続き前の値と照合します。これは、ある種のUPDATEのクラスだけが並行性の問題に敏感であるスキームで役に立ちます::"

#: ../../orm/versioning.rst:258
msgid "Support for programmatic and conditional version identifier tracking."
msgstr "プログラム型および条件付きバージョン識別子トラッキングのサポート。"

