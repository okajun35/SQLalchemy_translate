# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/extensions/associationproxy.rst:4
msgid "Association Proxy"
msgstr "アソシエーションプロキシ"

#: ../../orm/extensions/associationproxy.rst:8
msgid ""
"``associationproxy`` is used to create a read/write view of a target "
"attribute across a relationship.  It essentially conceals the usage of a "
"\"middle\" attribute between two endpoints, and can be used to cherry-"
"pick fields from a collection of related objects or to reduce the "
"verbosity of using the association object pattern.   Applied creatively, "
"the association proxy allows the construction of sophisticated "
"collections and dictionary views of virtually any geometry, persisted to "
"the database using standard, transparently configured relational "
"patterns."
msgstr "`` associationproxy``は、関係をまたいだターゲット属性の読み取り/書き込みビューを作成するために使用されます。基本的に2つのエンドポイント間の\ &quot;middle \&quot;属性の使用を隠し、関連オブジェクトのコレクションからフィールドをチェリーピックするか、関連オブジェクトパターンを使用する冗長性を減らすために使用できます。創造的に適用されるアソシエーションプロキシは、透過的に構成された標準のリレーショナルパターンを使用してデータベースに保存された、あらゆるジオメトリの洗練されたコレクションと辞書ビューの構築を可能にします。"

#: ../../orm/extensions/associationproxy.rst:20
msgid "Simplifying Scalar Collections"
msgstr "スカラーコレクションの単純化"

#: ../../orm/extensions/associationproxy.rst:22
msgid ""
"Consider a many-to-many mapping between two classes, ``User`` and "
"``Keyword``. Each ``User`` can have any number of ``Keyword`` objects, "
"and vice-versa (the many-to-many pattern is described at "
":ref:`relationships_many_to_many`)::"
msgstr "`` User``と `` Keyword``の2つのクラス間の多対多マッピングを考えてみましょう。それぞれの `` User``は任意の数の `` Keyword``オブジェクトを持つことができ、その逆もあります（多対多パターンはref： `relationships_many_to_many`で説明されています）::"

#: ../../orm/extensions/associationproxy.rst:56
msgid ""
"Reading and manipulating the collection of \"keyword\" strings associated"
" with ``User`` requires traversal from each collection element to the "
"``.keyword`` attribute, which can be awkward::"
msgstr "`` User``に関連付けられた\ &quot;keyword \&quot;文字列のコレクションを読み込んで操作するには、各コレクション要素から `` .keyword``属性までのトラバーサルが必要です。"

#: ../../orm/extensions/associationproxy.rst:69
msgid ""
"The ``association_proxy`` is applied to the ``User`` class to produce a "
"\"view\" of the ``kw`` relationship, which only exposes the string value "
"of ``.keyword`` associated with each ``Keyword`` object::"
msgstr "`` association_proxy``は `` User``クラスに適用され、 `` kw``関係の\ &quot;view \&quot;を生成します。これは各 `` .keyword``に関連付けられた `` .keyword``の文字列値だけを公開します。 `Keyword`オブジェクト::"

#: ../../orm/extensions/associationproxy.rst:87
msgid ""
"We can now reference the ``.keywords`` collection as a listing of "
"strings, which is both readable and writable.  New ``Keyword`` objects "
"are created for us transparently::"
msgstr "`` .keywords``コレクションは、読み書き可能な文字列のリストとして参照できるようになりました。新しい `` Keyword``オブジェクトが私たちのために透明に作成されます::"

#: ../../orm/extensions/associationproxy.rst:99
msgid ""
"The :class:`.AssociationProxy` object produced by the "
":func:`.association_proxy` function is an instance of a `Python "
"descriptor <http://docs.python.org/howto/descriptor.html>`_. It is always"
" declared with the user-defined class being mapped, regardless of whether"
" Declarative or classical mappings via the :func:`.mapper` function are "
"used."
msgstr "：func： `.association_proxy`関数によって生成される：class：` .AssociationProxy`オブジェクトは `Python記述子のインスタンスです<http://docs.python.org/howto/descriptor.html> `_。 ：func： `.mapper`関数による宣言的または古典的なマッピングが使用されているかどうかにかかわらず、常にユーザー定義のクラスがマッピングされて宣言されます。"

#: ../../orm/extensions/associationproxy.rst:104
msgid ""
"The proxy functions by operating upon the underlying mapped attribute or "
"collection in response to operations, and changes made via the proxy are "
"immediately apparent in the mapped attribute, as well as vice versa.   "
"The underlying attribute remains fully accessible."
msgstr "操作に応答して基礎となるマップされた属性またはコレクションを操作することによるプロキシ関数、およびプロキシを介して行われた変更は、マップされた属性で直ちに明らかになります。基本属性は完全にアクセス可能なままです。"

#: ../../orm/extensions/associationproxy.rst:109
msgid ""
"When first accessed, the association proxy performs introspection "
"operations on the target collection so that its behavior corresponds "
"correctly. Details such as if the locally proxied attribute is a "
"collection (as is typical) or a scalar reference, as well as if the "
"collection acts like a set, list, or dictionary is taken into account, so"
" that the proxy should act just like the underlying collection or "
"attribute does."
msgstr "最初にアクセスされるとき、アソシエーションプロキシは、その動作が正しく対応するように、ターゲットコレクションに対してイントロスペクション操作を実行します。ローカルにプロキシされた属性が（典型的なように）コレクションであるかスカラー参照であるか、コレクションがセット、リスト、または辞書のように動作するかどうかなどの詳細は、プロキシが基になるコレクションまたは属性が行います。"

#: ../../orm/extensions/associationproxy.rst:117
msgid "Creation of New Values"
msgstr "新しい価値の創造"

#: ../../orm/extensions/associationproxy.rst:119
msgid ""
"When a list append() event (or set add(), dictionary __setitem__(), or "
"scalar assignment event) is intercepted by the association proxy, it "
"instantiates a new instance of the \"intermediary\" object using its "
"constructor, passing as a single argument the given value. In our example"
" above, an operation like::"
msgstr "リストappend（）イベント（またはset add（）、dictionary __setitem __（）、またはスカラー割り当てイベント）がアソシエーションプロキシによって傍受されると、そのコンストラクタを使用して\ &quot;intermediary \&quot;オブジェクトの新しいインスタンスをインスタンス化し、指定された値を1つの引数として取ります。上記の例では、::"

#: ../../orm/extensions/associationproxy.rst:126
msgid "Is translated by the association proxy into the operation::"
msgstr "アソシエーションプロキシによって動作に変換されます::"

#: ../../orm/extensions/associationproxy.rst:130
msgid ""
"The example works here because we have designed the constructor for "
"``Keyword`` to accept a single positional argument, ``keyword``.   For "
"those cases where a single-argument constructor isn't feasible, the "
"association proxy's creational behavior can be customized using the "
"``creator`` argument, which references a callable (i.e. Python function) "
"that will produce a new object instance given the singular argument.  "
"Below we illustrate this using a lambda as is typical::"
msgstr "この例は、 `` Keyword``のコンストラクタが単一の位置引数 `` keyword``を受け入れるように設計しているため、ここで動作します。単一引数のコンストラクタが実現できない場合、アソシエーションプロキシの作成動作は、 `` creator``引数を使用してカスタマイズすることができます。これは、単数型の場合に新しいオブジェクトインスタンスを生成する呼び出し可能な（Python関数）引数。以下では典型的なラムダを使用してこれを説明します::"

#: ../../orm/extensions/associationproxy.rst:144
msgid ""
"The ``creator`` function accepts a single argument in the case of a list-"
" or set- based collection, or a scalar attribute.  In the case of a "
"dictionary-based collection, it accepts two arguments, \"key\" and "
"\"value\".   An example of this is below in :ref:`proxying_dictionaries`."
msgstr "`` creator``関数は、リストベースまたは集合ベースのコレクションの場合は単一の引数を受け取り、スカラー属性を受け取ります。辞書ベースのコレクションの場合、\ &quot;key \&quot;と\ &quot;value \&quot;という2つの引数を受け取ります。これの例は：ref： `proxying_dictionaries`です。"

#: ../../orm/extensions/associationproxy.rst:150
msgid "Simplifying Association Objects"
msgstr "関連オブジェクトの簡略化"

#: ../../orm/extensions/associationproxy.rst:152
msgid ""
"The \"association object\" pattern is an extended form of a many-to-many "
"relationship, and is described at :ref:`association_pattern`. Association"
" proxies are useful for keeping \"association objects\" out of the way "
"during regular use."
msgstr "\ &quot;連想オブジェクト\&quot;パターンは、多対多の関係の拡張形式で、ref： `association_pattern`に記述されています。アソシエーションプロキシは、通常の使用中に\ &quot;関連オブジェクト\&quot;を保持するのに便利です。"

#: ../../orm/extensions/associationproxy.rst:157
msgid ""
"Suppose our ``userkeywords`` table above had additional columns which "
"we'd like to map explicitly, but in most cases we don't require direct "
"access to these attributes.  Below, we illustrate a new mapping which "
"introduces the ``UserKeyword`` class, which is mapped to the "
"``userkeywords`` table illustrated earlier. This class adds an additional"
" column ``special_key``, a value which we occasionally want to access, "
"but not in the usual case.   We create an association proxy on the "
"``User`` class called ``keywords``, which will bridge the gap from the "
"``user_keywords`` collection of ``User`` to the ``.keyword`` attribute "
"present on each ``UserKeyword``::"
msgstr "上記の `` userkeywords``表に、明示的にマップしたい追加の列があるとしますが、ほとんどの場合、これらの属性に直接アクセスする必要はありません。以下に、前述の `` userkeywords``テーブルにマップされた `` UserKeyword``クラスを紹介する新しいマッピングを示します。このクラスは、特別なカラム `` special_key``を追加します。これは、時々アクセスしたい値ですが、通常はそうではありません。 `` User``の `` User`keyコレクションから `` .keyword``属性までのギャップを橋渡しする `` User``クラスの `` Keywords``に関連プロキシを作成します各 `` UserKeyword`` ::"

#: ../../orm/extensions/associationproxy.rst:220
msgid ""
"With the above configuration, we can operate upon the ``.keywords`` "
"collection of each ``User`` object, and the usage of ``UserKeyword`` is "
"concealed::"
msgstr "上記の設定では、各 `` User``オブジェクトの `` .keywords``コレクションを操作することができ、 `` UserKeyword``の使用法は隠蔽されています::"

#: ../../orm/extensions/associationproxy.rst:231
msgid "Where above, each ``.keywords.append()`` operation is equivalent to::"
msgstr "上記の場合、 `` .keywords.append（） ``の各操作は、"

#: ../../orm/extensions/associationproxy.rst:235
msgid ""
"The ``UserKeyword`` association object has two attributes here which are "
"populated; the ``.keyword`` attribute is populated directly as a result "
"of passing the ``Keyword`` object as the first argument.   The ``.user`` "
"argument is then assigned as the ``UserKeyword`` object is appended to "
"the ``User.user_keywords`` collection, where the bidirectional "
"relationship configured between ``User.user_keywords`` and "
"``UserKeyword.user`` results in a population of the ``UserKeyword.user`` "
"attribute. The ``special_key`` argument above is left at its default "
"value of ``None``."
msgstr "`` UserKeyword``関連オブジェクトには、ここに2つの属性が設定されています。 `` .keyword``属性は、 `` Keyword``オブジェクトを最初の引数として渡した結果として直接読み込まれます。 `` User.user_keywords``と `` UserKeyword &#39;の間で双方向の関係が設定されている `` User.user_keywords``コレクションに `` UserKeyword``オブジェクトが追加されるときに `` .user``引数が割り当てられます。 user``は、 `` UserKeyword.user``属性の集団になります。上の `` special_key``引数はデフォルト値 `` None``のままです。"

#: ../../orm/extensions/associationproxy.rst:243
msgid ""
"For those cases where we do want ``special_key`` to have a value, we "
"create the ``UserKeyword`` object explicitly.  Below we assign all three "
"attributes, where the assignment of ``.user`` has the effect of the "
"``UserKeyword`` being appended to the ``User.user_keywords`` collection::"
msgstr "`` special_key``に値を持たせたい場合、 `` UserKeyword``オブジェクトを明示的に作成します。以下の3つの属性をすべて割り当てます。 `` .user``の割り当ては、 `` User.user_keywords``コレクションに `` UserKeyword``が追加される効果を持っています::"

#: ../../orm/extensions/associationproxy.rst:250
msgid ""
"The association proxy returns to us a collection of ``Keyword`` objects "
"represented by all these operations::"
msgstr "アソシエーションプロキシは、これらすべての操作によって表される `` Keyword``オブジェクトのコレクションを返します::"

#: ../../orm/extensions/associationproxy.rst:259
msgid "Proxying to Dictionary Based Collections"
msgstr "辞書ベースのコレクションへのプロキシ"

#: ../../orm/extensions/associationproxy.rst:261
msgid ""
"The association proxy can proxy to dictionary based collections as well."
"   SQLAlchemy mappings usually use the "
":func:`.attribute_mapped_collection` collection type to create dictionary"
" collections, as well as the extended techniques described in "
":ref:`dictionary_collections`."
msgstr "アソシエーションプロキシは辞書ベースのコレクションにもプロキシすることができます。 SQLAlchemyのマッピングでは、通常、：func： `.attribute_mapped_collection`コレクション型を使用して辞書コレクションを作成します。また、ref：` dictionary_collections &#39;で説明されている拡張テクニックもあります。"

#: ../../orm/extensions/associationproxy.rst:266
msgid ""
"The association proxy adjusts its behavior when it detects the usage of a"
" dictionary-based collection. When new values are added to the "
"dictionary, the association proxy instantiates the intermediary object by"
" passing two arguments to the creation function instead of one, the key "
"and the value. As always, this creation function defaults to the "
"constructor of the intermediary class, and can be customized using the "
"``creator`` argument."
msgstr "アソシエーションプロキシは、辞書ベースのコレクションの使用を検出すると、その動作を調整します。新しい値が辞書に追加されると、アソシエーションプロキシは、キー、値の代わりに2つの引数を作成関数に渡すことによって中間オブジェクトをインスタンス化します。いつものように、この作成関数はデフォルトで中間クラスのコンストラクタになり、 `` creator``引数を使ってカスタマイズできます。"

#: ../../orm/extensions/associationproxy.rst:273
msgid ""
"Below, we modify our ``UserKeyword`` example such that the "
"``User.user_keywords`` collection will now be mapped using a dictionary, "
"where the ``UserKeyword.special_key`` argument will be used as the key "
"for the dictionary.   We then apply a ``creator`` argument to the "
"``User.keywords`` proxy so that these values are assigned appropriately "
"when new elements are added to the dictionary::"
msgstr "以下では、 `` UserKeyword``の例を変更して、 `` User.user_keywords``コレクションを辞書を使ってマッピングします。ここで `` UserKeyword.special_key``引数は辞書のキーとして使われます。 `` User.keywords``プロキシに `` creator``引数を適用して、新しい要素が辞書に追加されたときにこれらの値が適切に割り当てられるようにします::"

#: ../../orm/extensions/associationproxy.rst:330
msgid ""
"We illustrate the ``.keywords`` collection as a dictionary, mapping the "
"``UserKeyword.string_key`` value to ``Keyword`` objects::"
msgstr "`` .keywords``コレクションを辞書として説明し、 `` UserKeyword.string_key``値を `` Keyword``オブジェクトにマッピングします::"

#: ../../orm/extensions/associationproxy.rst:344
msgid "Composite Association Proxies"
msgstr "複合アソシエーションプロキシ"

#: ../../orm/extensions/associationproxy.rst:346
msgid ""
"Given our previous examples of proxying from relationship to scalar "
"attribute, proxying across an association object, and proxying "
"dictionaries, we can combine all three techniques together to give "
"``User`` a ``keywords`` dictionary that deals strictly with the string "
"value of ``special_key`` mapped to the string ``keyword``.  Both the "
"``UserKeyword`` and ``Keyword`` classes are entirely concealed.  This is "
"achieved by building an association proxy on ``User`` that refers to an "
"association proxy present on ``UserKeyword``::"
msgstr "これまでの関係からスカラー属性へのプロキシ、アソシエーションオブジェクト全体にわたるプロキシ、およびプロキシ辞書を例として、3つの手法を組み合わせて、文字列値を厳密に扱う ``ユーザー &#39;`` keywords``辞書を作成することができます文字列 `` keyword``にマップされた `` special_key``の `` `` UserKeyword``と `` Keyword``クラスは完全に隠されています。これは、 `` UserKeyword``に存在するアソシエーションプロキシを参照する `` User``にアソシエーションプロキシを構築することによって実現されます::"

#: ../../orm/extensions/associationproxy.rst:411
msgid ""
"``User.keywords`` is now a dictionary of string to string, where "
"``UserKeyword`` and ``Keyword`` objects are created and removed for us "
"transparently using the association proxy. In the example below, we "
"illustrate usage of the assignment operator, also appropriately handled "
"by the association proxy, to apply a dictionary value to the collection "
"at once::"
msgstr "`` User.keywords``は文字列から文字列への辞書になりました。ここで、 `` UserKeyword``と `` Keyword``オブジェクトはアソシエーションプロキシを使って透過的に作成され、削除されます。以下の例では、アソシエーションプロキシによって適切に処理される代入演算子の使用法を示しています。コレクション値にコレクション値を一度に適用する::"

#: ../../orm/extensions/associationproxy.rst:434
msgid ""
"One caveat with our example above is that because ``Keyword`` objects are"
" created for each dictionary set operation, the example fails to maintain"
" uniqueness for the ``Keyword`` objects on their string name, which is a "
"typical requirement for a tagging scenario such as this one.  For this "
"use case the recipe `UniqueObject "
"<http://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject>`_, or a "
"comparable creational strategy, is recommended, which will apply a "
"\"lookup first, then create\" strategy to the constructor of the "
"``Keyword`` class, so that an already existing ``Keyword`` is returned if"
" the given name is already present."
msgstr "上記の例の注意点の1つは、 `` Keyword``オブジェクトが辞書セット操作ごとに作成されるため、その例ではタグ付けの一般的な要件である `` Keyword``オブジェクトの文字列名の一意性を維持できませんこのようなシナリオ。この使用例では、レシピ `UniqueObject <http://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject> `_、またはこれに類する作成戦略が推奨されています。これは、最初にルックアップを適用し、次に` `Keyword``クラスのコンストラクタに戦略を作成して、既に存在する` `Keyword``が返されるようにします指定された名前がすでに存在する場合"

#: ../../orm/extensions/associationproxy.rst:445
msgid "Querying with Association Proxies"
msgstr "アソシエーションプロキシを使用したクエリ"

#: ../../orm/extensions/associationproxy.rst:447
msgid ""
"The :class:`.AssociationProxy` features simple SQL construction "
"capabilities which relate down to the underlying :func:`.relationship` in"
" use as well as the target attribute.  For example, the "
":meth:`.RelationshipProperty.Comparator.any` and "
":meth:`.RelationshipProperty.Comparator.has` operations are available, "
"and will produce a \"nested\" EXISTS clause, such as in our basic "
"association object example::"
msgstr "：class： `.AssociationProxy`は、基本的な：func：` .relationship`とターゲット属性に関連するシンプルなSQL構築機能を備えています。例えば、：meth： `.RelationshipProperty.Comparator.any`と：meth：` .RelationshipProperty.Comparator.has`操作が利用可能であり、私たちの基本的な関連オブジェクトのような\ &quot;入れ子\&quot;のEXISTS節を生成します例::"

#: ../../orm/extensions/associationproxy.rst:462
msgid "For a proxy to a scalar attribute, ``__eq__()`` is supported::"
msgstr "スカラー属性へのプロキシの場合、 `` __eq __（） ``がサポートされています::"

#: ../../orm/extensions/associationproxy.rst:471
msgid "and ``.contains()`` is available for a proxy to a scalar collection::"
msgstr "`` .contains（） ``はスカラーコレクションへのプロキシで利用可能です::"

#: ../../orm/extensions/associationproxy.rst:482
msgid ""
":class:`.AssociationProxy` can be used with :meth:`.Query.join` somewhat "
"manually using the :attr:`~.AssociationProxy.attr` attribute in a star-"
"args context::"
msgstr "：class： `.AssociationProxy`は、star-argsコンテキストの：attr：`〜.AssociationProxy.attr`属性を使って：meth： `.Query.join`で幾分手動で使用できます::"

#: ../../orm/extensions/associationproxy.rst:487
msgid ":attr:`~.AssociationProxy.attr` attribute in a star-args context."
msgstr "：attr： `〜.AssociationProxy.attr`属性は、star-argsコンテキスト内にあります。"

#: ../../orm/extensions/associationproxy.rst:490
msgid ""
":attr:`~.AssociationProxy.attr` is composed of "
":attr:`.AssociationProxy.local_attr` and "
":attr:`.AssociationProxy.remote_attr`, which are just synonyms for the "
"actual proxied attributes, and can also be used for querying::"
msgstr "：attr： `〜.AssociationProxy.attr`は、attr：` .AssociationProxy.local_attr`と：attr： `.AssociationProxy.remote_attr`で構成され、実際のプロキシ属性と同義であり、クエリにも使用できます::"

#: ../../orm/extensions/associationproxy.rst:500
msgid ""
":attr:`.AssociationProxy.local_attr` and "
":attr:`.AssociationProxy.remote_attr`, synonyms for the actual proxied "
"attributes, and usable for querying."
msgstr "：attr： `.AssociationProxy.local_attr`と：attr：` .AssociationProxy.remote_attr`は、実際のプロキシ属性の同義語で、クエリに使用できます。"

#: ../../orm/extensions/associationproxy.rst:505
msgid "API Documentation"
msgstr "APIドキュメント"

#: of sqlalchemy.ext.associationproxy.association_proxy:1
msgid ""
"Return a Python property implementing a view of a target attribute which "
"references an attribute on members of the target."
msgstr "ターゲットのメンバーの属性を参照するターゲット属性のビューを実装するPythonプロパティを返します。"

#: of sqlalchemy.ext.associationproxy.association_proxy:5
msgid "The returned value is an instance of :class:`.AssociationProxy`."
msgstr "返される値は、class： `.AssociationProxy`のインスタンスです。"

#: of sqlalchemy.ext.associationproxy.association_proxy:7
msgid ""
"Implements a Python property representing a relationship as a collection "
"of simpler values, or a scalar value.  The proxied property will mimic "
"the collection type of the target (list, dict or set), or, in the case of"
" a one to one relationship, a simple scalar value."
msgstr "単純な値またはスカラー値のコレクションとして関係を表すPythonプロパティを実装します。プロキシされたプロパティは、ターゲット（list、dictまたはset）のコレクション型、または1対1の関係の場合は単純なスカラー値を模倣します。"

#: of sqlalchemy.ext.associationproxy.association_proxy
msgid "パラメータ"
msgstr "パラメータ"

#: of sqlalchemy.ext.associationproxy.association_proxy:12
msgid ""
"Name of the attribute we'll proxy to. This attribute is typically mapped "
"by :func:`~sqlalchemy.orm.relationship` to link to a target collection, "
"but can also be a many-to-one or non-scalar relationship."
msgstr "プロキシする属性の名前。この属性は、通常は：func： `〜sqlalchemy.orm.relationship`によってマッピングされ、ターゲットコレクションにリンクしますが、多対1または非スカラ関係でもあります。"

#: of sqlalchemy.ext.associationproxy.association_proxy:17
msgid ""
"Attribute on the associated instance or instances we'll proxy for.  For "
"example, given a target collection of [obj1, obj2], a list created by "
"this proxy property would look like [getattr(obj1, *attr*), getattr(obj2,"
" *attr*)]  If the relationship is one-to-one or otherwise uselist=False, "
"then simply: getattr(obj, *attr*)"
msgstr "関連する1つまたは複数のインスタンスの属性。たとえば、[obj1、obj2]のターゲットコレクションがある場合、このプロキシプロパティによって作成されるリストは、[getattr（obj1、* attr *）、getattr（obj2、* attr *）]のようになります。 -oneまたはそうでない場合はuselist = False、次に単純に：getattr（obj、* attr *）"

#: of sqlalchemy.ext.associationproxy.association_proxy:17
msgid "Attribute on the associated instance or instances we'll proxy for."
msgstr "関連する1つまたは複数のインスタンスの属性。"

#: of sqlalchemy.ext.associationproxy.association_proxy:20
msgid ""
"For example, given a target collection of [obj1, obj2], a list created by"
" this proxy property would look like [getattr(obj1, *attr*), "
"getattr(obj2, *attr*)]"
msgstr "たとえば、[obj1、obj2]のターゲットコレクションがある場合、このプロキシプロパティによって作成されるリストは[getattr（obj1、* attr *）、getattr（obj2、* attr *）]のようになります。"

#: of sqlalchemy.ext.associationproxy.association_proxy:24
msgid ""
"If the relationship is one-to-one or otherwise uselist=False, then "
"simply: getattr(obj, *attr*)"
msgstr "関係が1対1であるか、そうでない場合はuselist = Falseの場合、単純に：getattr（obj、* attr *）"

#: of sqlalchemy.ext.associationproxy.association_proxy:27
msgid ""
"optional.  When new items are added to this proxied collection, new "
"instances of the class collected by the target collection will be "
"created.  For list and set collections, the target class constructor will"
" be called with the 'value' for the new instance.  For dict types, two "
"arguments are passed: key and value.  If you want to construct instances "
"differently, supply a *creator* function that takes arguments as above "
"and returns instances.  For scalar relationships, creator() will be "
"called if the target is None. If the target is present, set operations "
"are proxied to setattr() on the associated object.  If you have an "
"associated object with multiple attributes, you may set up multiple "
"association proxies mapping to different attributes.  See the unit tests "
"for examples, and for examples of how creator() functions can be used to "
"construct the scalar relationship on-demand in this situation."
msgstr "オプション。このプロキシされたコレクションに新しいアイテムが追加されると、ターゲットコレクションによって収集されたクラスの新しいインスタンスが作成されます。リストコレクションと集合コレクションの場合、新しいインスタンスの &#39;value&#39;を指定してターゲットクラスコンストラクターが呼び出されます。 dict型の場合、keyとvalueの2つの引数が渡されます。別々にインスタンスを構築したい場合は、上記のように引数をとり、インスタンスを返す* creator *関数を提供します。スカラー関係の場合、ターゲットがNoneの場合、creator（）が呼び出されます。ターゲットが存在する場合、set操作は関連オブジェクトのsetattr（）にプロキシされます。複数の属性を持つ関連オブジェクトがある場合は、複数の関連プロキシを異なる属性にマッピングするように設定できます。サンプルについては単体テストを参照し、この状況でオンデマンドでスカラー関係を構築するためにcreator（）関数をどのように使用できるかについての例を参照してください。"

#: of sqlalchemy.ext.associationproxy.association_proxy:27
msgid "optional."
msgstr "オプション。"

#: of sqlalchemy.ext.associationproxy.association_proxy:29
msgid ""
"When new items are added to this proxied collection, new instances of the"
" class collected by the target collection will be created.  For list and "
"set collections, the target class constructor will be called with the "
"'value' for the new instance.  For dict types, two arguments are passed: "
"key and value."
msgstr "このプロキシされたコレクションに新しいアイテムが追加されると、ターゲットコレクションによって収集されたクラスの新しいインスタンスが作成されます。リストコレクションと集合コレクションの場合、新しいインスタンスの &#39;value&#39;を指定してターゲットクラスコンストラクターが呼び出されます。 dict型の場合、keyとvalueの2つの引数が渡されます。"

#: of sqlalchemy.ext.associationproxy.association_proxy:35
msgid ""
"If you want to construct instances differently, supply a *creator* "
"function that takes arguments as above and returns instances."
msgstr "別々にインスタンスを構築したい場合は、上記のように引数をとり、インスタンスを返す* creator *関数を提供します。"

#: of sqlalchemy.ext.associationproxy.association_proxy:38
msgid ""
"For scalar relationships, creator() will be called if the target is None."
" If the target is present, set operations are proxied to setattr() on the"
" associated object."
msgstr "スカラー関係の場合、ターゲットがNoneの場合、creator（）が呼び出されます。ターゲットが存在する場合、set操作は関連オブジェクトのsetattr（）にプロキシされます。"

#: of sqlalchemy.ext.associationproxy.association_proxy:42
msgid ""
"If you have an associated object with multiple attributes, you may set up"
" multiple association proxies mapping to different attributes.  See the "
"unit tests for examples, and for examples of how creator() functions can "
"be used to construct the scalar relationship on-demand in this situation."
msgstr "複数の属性を持つ関連オブジェクトがある場合は、複数の関連プロキシを異なる属性にマッピングするように設定できます。サンプルについては単体テストを参照し、この状況でオンデマンドでスカラー関係を構築するためにcreator（）関数をどのように使用できるかについての例を参照してください。"

#: of sqlalchemy.ext.associationproxy.association_proxy:48
msgid "Passes along any other keyword arguments to :class:`.AssociationProxy`."
msgstr "ほかのキーワード引数をclass： `.AssociationProxy`に渡します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy:1
msgid "A descriptor that presents a read/write view of an object attribute."
msgstr "オブジェクト属性の読み取り/書き込みビューを表す記述子。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.for_class:1
msgid "Return the internal state local to a specific mapped class."
msgstr "ローカルの内部状態を特定のマップされたクラスに戻します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.for_class:3
msgid "E.g., given a class ``User``::"
msgstr "例えば、クラス `` User``を与えられます::"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.for_class:10
msgid ""
"If we access this :class:`.AssociationProxy` from "
":attr:`.Mapper.all_orm_descriptors`, and we want to view the target class"
" for this proxy as mapped by ``User``::"
msgstr "：attr： `.Mapper.all_orm_descriptors`からthis：class：` .AssociationProxy`にアクセスすると、このプロキシのターゲットクラスを `` User``："

#: of sqlalchemy.ext.associationproxy.AssociationProxy.for_class:16
msgid ""
"This returns an instance of :class:`.AssociationProxyInstance` that is "
"specific to the ``User`` class.   The :class:`.AssociationProxy` object "
"remains agnostic of its parent class."
msgstr "これは、 `` User``クラスに固有の：class： `.AssociationProxyInstance`のインスタンスを返します。 ：class： `.AssociationProxy`オブジェクトは、その親クラスにとらわれないままです。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.for_class:20
msgid ""
"- :class:`.AssociationProxy` no longer stores any state specific to a "
"particular parent class; the state is now stored in per-class "
":class:`.AssociationProxyInstance` objects."
msgstr "- ：class： `.AssociationProxy`は特定の親クラスに固有の状態を保存しません。状態はper-class：class： `.AssociationProxyInstance`オブジェクトに格納されます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:1
msgid ""
"Info dictionary associated with the object, allowing user-defined data to"
" be associated with this :class:`.InspectionAttr`."
msgstr "オブジェクトに関連付けられた情報ディクショナリで、ユーザ定義のデータをこの：class： `.InspectionAttr`に関連付けることができます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:4
msgid ""
"The dictionary is generated when first accessed.  Alternatively, it can "
"be specified as a constructor argument to the :func:`.column_property`, "
":func:`.relationship`, or :func:`.composite` functions."
msgstr "辞書は、最初にアクセスされたときに生成されます。あるいは、：func： `.column_property`、：func：` .relationship`、または：func： `.composite`関数のコンストラクタ引数として指定することもできます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:9
msgid "Added support for .info to all :class:`.MapperProperty` subclasses."
msgstr ".infoのサポートをall：class： `.MapperProperty`サブクラスに追加しました。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:12
msgid ""
":attr:`.MapperProperty.info` is also available on extension types via the"
" :attr:`.InspectionAttrInfo.info` attribute, so that it can apply to a "
"wider variety of ORM and extension constructs."
msgstr "：attr： `.MapperProperty.info`は：attr：` .InspectionAttrInfo.info`属性を使って拡張タイプでも利用できます。これにより、より多様なORMと拡張構造に適用できます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:19
msgid ":attr:`.QueryableAttribute.info`"
msgstr "：attr： `.QueryableAttribute.info`"

#: of sqlalchemy.ext.associationproxy.AssociationProxy.info:21
msgid ":attr:`.SchemaItem.info`"
msgstr "：のAttr： `.SchemaItem.info`"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance:1
msgid "A per-class object that serves class- and object-specific results."
msgstr "クラス固有およびオブジェクト固有の結果を提供するクラスごとのオブジェクト。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance:3
msgid ""
"This is used by :class:`.AssociationProxy` when it is invoked in terms of"
" a specific class or instance of a class, i.e. when it is used as a "
"regular Python descriptor."
msgstr "これは、class： `.AssociationProxy`がクラスの特定のクラスまたはインスタンスに関して呼び出されたとき、つまりそれが通常のPython記述子として使用されるときに使用されます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance:7
msgid ""
"When referring to the :class:`.AssociationProxy` as a normal Python "
"descriptor, the :class:`.AssociationProxyInstance` is the object that "
"actually serves the information.   Under normal circumstances, its "
"presence is transparent::"
msgstr "通常のPython記述子として：class： `.AssociationProxy`を参照する場合、：class：` .AssociationProxyInstance`は実際に情報を提供するオブジェクトです。通常の状況下では、その存在は透過的です::"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance:15
msgid ""
"In the special case that the :class:`.AssociationProxy` object is being "
"accessed directly, in order to get an explicit handle to the "
":class:`.AssociationProxyInstance`, use the "
":meth:`.AssociationProxy.for_class` method::"
msgstr "特別な場合：class： `.AssociationProxy`オブジェクトが直接アクセスされている場合、：class：` .AssociationProxyInstance`への明示的なハンドルを取得するには、：meth： `.AssociationProxy.for_class`メソッドを使用します::"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.any:1
msgid "Produce a proxied 'any' expression using EXISTS."
msgstr "EXISTSを使用してプロキシされた「任意の」表現を生成します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.any:3
#: sqlalchemy.ext.associationproxy.AssociationProxyInstance.has:3
msgid ""
"This expression will be a composed product using the "
":meth:`.RelationshipProperty.Comparator.any` and/or "
":meth:`.RelationshipProperty.Comparator.has` operators of the underlying "
"proxied attributes."
msgstr "この式は、基本的なプロキシ属性の：meth： `.RelationshipProperty.Comparator.any`および/または：meth：` .RelationshipProperty.Comparator.has`演算子を使用して合成されたプロダクトになります。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr:1
msgid "Return a tuple of ``(local_attr, remote_attr)``."
msgstr "``（local_attr、remote_attr） ``のタプルを返します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr:3
msgid ""
"This attribute is convenient when specifying a join using "
":meth:`.Query.join` across two relationships::"
msgstr "この属性は、2つの関係間で：meth： `.Query.join`を使用して結合を指定するときに便利です::"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr:10
msgid ":attr:`.AssociationProxyInstance.local_attr`"
msgstr "：attr： `.AssociationProxyInstance.local_attr`"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr:12
#: sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr:8
msgid ":attr:`.AssociationProxyInstance.remote_attr`"
msgstr "：attr： `.AssociationProxyInstance.remote_attr`"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains:1
msgid "Produce a proxied 'contains' expression using EXISTS."
msgstr "EXISTSを使用してプロキシの「包含」表現を生成します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains:3
msgid ""
"This expression will be a composed product using the "
":meth:`.RelationshipProperty.Comparator.any` , "
":meth:`.RelationshipProperty.Comparator.has`, and/or "
":meth:`.RelationshipProperty.Comparator.contains` operators of the "
"underlying proxied attributes."
msgstr "この式は、：meth： `.RelationshipProperty.Comparator.any`、：meth：` .RelationshipProperty.Comparator.has`、および/または：meth： `.RelationshipProperty.Comparator.contains`演算子を使用した合成済みの式です。基になるプロキシ属性。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.has:1
msgid "Produce a proxied 'has' expression using EXISTS."
msgstr "EXISTSを使用してプロキシされた「持っている」表現を生成する。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr:1
msgid ""
"The 'local' :class:`.MapperProperty` referenced by this "
":class:`.AssociationProxyInstance`."
msgstr "this：class： `.AssociationProxyInstance`によって参照される &#39;local&#39;：class：` .MapperProperty`です。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr:6
msgid ":attr:`.AssociationProxyInstance.attr`"
msgstr "：attr： `.AssociationProxyInstance.attr`"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr:1
msgid ""
"The 'remote' :class:`.MapperProperty` referenced by this "
":class:`.AssociationProxyInstance`."
msgstr "this：class： `.AssociationProxyInstance`によって参照される &#39;remote&#39;：class：` .MapperProperty`です。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr:4
msgid "..seealso::"
msgstr "..seealso ::"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar:1
msgid ""
"Return ``True`` if this :class:`.AssociationProxyInstance` proxies a "
"scalar relationship on the local side."
msgstr "次のような場合は `` True``を返します。class： `.AssociationProxyInstance`はローカル側でスカラ関係を代理します。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class:1
msgid "The intermediary class handled by this :class:`.AssociationProxyInstance`."
msgstr "中間クラスはthis：class： `.AssociationProxyInstance`によって処理されます。"

#: of sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class:4
msgid ""
"Intercepted append/set/assignment events will result in the generation of"
" new instances of this class."
msgstr "インターセプトされた追加/設定/割り当てイベントにより、このクラスの新しいインスタンスが生成されます。"

