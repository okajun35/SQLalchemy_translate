# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/extensions/declarative/basic_use.rst:3
msgid "Basic Use"
msgstr "基本的な使用"

#: ../../orm/extensions/declarative/basic_use.rst:7
msgid ""
"This section describes specifics about how the Declarative system "
"interacts with the SQLAlchemy ORM.  For a general introduction to class "
"mapping, see :ref:`ormtutorial_toplevel` as well as "
":ref:`mapper_config_toplevel`."
msgstr "このセクションでは、宣言システムがSQLAlchemy ORMとどのように対話するかについて説明します。クラスマッピングの一般的な紹介については、：ref： `ormtutorial_toplevel`と：ref：` mapper_config_toplevel`を参照してください。"

#: ../../orm/extensions/declarative/basic_use.rst:12
msgid ""
"SQLAlchemy object-relational configuration involves the combination of "
":class:`.Table`, :func:`.mapper`, and class objects to define a mapped "
"class. :mod:`~sqlalchemy.ext.declarative` allows all three to be "
"expressed at once within the class declaration. As much as possible, "
"regular SQLAlchemy schema and ORM constructs are used directly, so that "
"configuration between \"classical\" ORM usage and declarative remain "
"highly similar."
msgstr "SQLAlchemyのオブジェクトリレーショナル構成では、class： `.Table`、：func：` .mapper`、およびクラスオブジェクトを組み合わせて、マップされたクラスを定義します。 ：mod： `〜sqlalchemy.ext.declarative`は、クラス宣言内で3つすべてを一度に表現できるようにします。できるだけ多くの場合、通常のSQLAlchemyスキーマとORM構文が直接使用されるため、\ &quot;古典的な\&quot; ORMの使用と宣言の間の設定は非常に似たままです。"

#: ../../orm/extensions/declarative/basic_use.rst:21
msgid "As a simple example::"
msgstr "簡単な例として::"

#: ../../orm/extensions/declarative/basic_use.rst:33
msgid ""
"Above, the :func:`declarative_base` callable returns a new base class "
"from which all mapped classes should inherit. When the class definition "
"is completed, a new :class:`.Table` and :func:`.mapper` will have been "
"generated."
msgstr "上の：：func： `declarative_base`呼び出し可能関数は、すべてのマップされたクラスが継承する新しい基本クラスを返します。クラス定義が完了すると、新しい：class： `.Table`と：func：` .mapper`が生成されます。"

#: ../../orm/extensions/declarative/basic_use.rst:37
msgid ""
"The resulting table and mapper are accessible via ``__table__`` and "
"``__mapper__`` attributes on the ``SomeClass`` class::"
msgstr "結果のテーブルとマッパーは、 `` SomeClass``クラスの `` __table__``と `` __mapper__``属性を介してアクセスできます::"

#: ../../orm/extensions/declarative/basic_use.rst:48
msgid "Defining Attributes"
msgstr "属性の定義"

#: ../../orm/extensions/declarative/basic_use.rst:50
msgid ""
"In the previous example, the :class:`.Column` objects are automatically "
"named with the name of the attribute to which they are assigned."
msgstr "前の例では、：class： `.Column`オブジェクトは自動的に、それらが割り当てられている属性の名前で命名されています。"

#: ../../orm/extensions/declarative/basic_use.rst:54
msgid ""
"To name columns explicitly with a name distinct from their mapped "
"attribute, just give the column a name.  Below, column \"some_table_id\" "
"is mapped to the \"id\" attribute of `SomeClass`, but in SQL will be "
"represented as \"some_table_id\"::"
msgstr "マッピングされた属性とは異なる名前で列を明示的に指定するには、列に名前を付けます。下の列\ &quot;some_table_id \&quot;は &quot;SomeClass&quot;の\ &quot;id \&quot;属性にマップされますが、SQLでは\ &quot;some_table_id \&quot;として表されます::"

#: ../../orm/extensions/declarative/basic_use.rst:63
msgid ""
"Attributes may be added to the class after its construction, and they "
"will be added to the underlying :class:`.Table` and :func:`.mapper` "
"definitions as appropriate::"
msgstr "属性は構築後にクラスに追加することができ、それらは基礎となるclass： `.Table`と：func：` .mapper`の定義に適宜追加されます::"

#: ../../orm/extensions/declarative/basic_use.rst:70
msgid ""
"Classes which are constructed using declarative can interact freely with "
"classes that are mapped explicitly with :func:`.mapper`."
msgstr "宣言を使用して構築されたクラスは、：func： `.mapper`で明示的にマッピングされたクラスと自由に相互作用できます。"

#: ../../orm/extensions/declarative/basic_use.rst:73
msgid ""
"It is recommended, though not required, that all tables share the same "
"underlying :class:`~sqlalchemy.schema.MetaData` object, so that string-"
"configured :class:`~sqlalchemy.schema.ForeignKey` references can be "
"resolved without issue."
msgstr "必須ではありませんが、すべてのテーブルがclass： `〜sqlalchemy.schema.MetaData`オブジェクトを共有することをお勧めします。これにより、string-configured：class：`〜sqlalchemy.schema.ForeignKey`の参照は問題なく解決されます。"

#: ../../orm/extensions/declarative/basic_use.rst:79
msgid "Accessing the MetaData"
msgstr "MetaDataへのアクセス"

#: ../../orm/extensions/declarative/basic_use.rst:81
msgid ""
"The :func:`declarative_base` base class contains a :class:`.MetaData` "
"object where newly defined :class:`.Table` objects are collected. This "
"object is intended to be accessed directly for "
":class:`.MetaData`-specific operations. Such as, to issue CREATE "
"statements for all tables::"
msgstr "：func： `declarative_base`基本クラスには：class：` .MetaData`オブジェクトが含まれています。新しく定義されたクラス： `.Table`オブジェクトが収集されます。このオブジェクトは、class： `.MetaData`固有の操作で直接アクセスすることを意図しています。のような、すべてのテーブルのCREATEステートメントを発行する::"

#: ../../orm/extensions/declarative/basic_use.rst:91
msgid ""
":func:`declarative_base` can also receive a pre-existing "
":class:`.MetaData` object, which allows a declarative setup to be "
"associated with an already existing traditional collection of "
":class:`~sqlalchemy.schema.Table` objects::"
msgstr "：func： `declarative_base`は既存の：class：` .MetaData`オブジェクトも受け取ることができます。このオブジェクトは、宣言的な設定を、class： `〜sqlalchemy.schema.Table`オブジェクトの既存の伝統的なコレクションに関連付けることができます： ："

#: ../../orm/extensions/declarative/basic_use.rst:102
msgid "Class Constructor"
msgstr "クラスコンストラクタ"

#: ../../orm/extensions/declarative/basic_use.rst:104
msgid ""
"As a convenience feature, the :func:`declarative_base` sets a default "
"constructor on classes which takes keyword arguments, and assigns them to"
" the named attributes::"
msgstr "便利な機能として、：func： `declarative_base`はキーワード引数を取るクラスのデフォルトのコンストラクタを設定し、それらを名前付き属性に割り当てます::"

#: ../../orm/extensions/declarative/basic_use.rst:111
msgid "Mapper Configuration"
msgstr "マッパー設定"

#: ../../orm/extensions/declarative/basic_use.rst:113
msgid ""
"Declarative makes use of the :func:`~.orm.mapper` function internally "
"when it creates the mapping to the declared table.   The options for "
":func:`~.orm.mapper` are passed directly through via the "
"``__mapper_args__`` class attribute.  As always, arguments which "
"reference locally mapped columns can reference them directly from within "
"the class declaration::"
msgstr "Declarativeは、宣言されたテーブルへのマッピングを作成するときに：func： `〜.orm.mapper`関数を内部的に使用します。 ：func： `〜.orm.mapper`のオプションは、` `__mapper_args__``クラス属性を介して直接渡されます。いつものように、ローカルにマップされた列を参照する引数は、クラス宣言::"

#: ../../orm/extensions/declarative/basic_use.rst:137
msgid "Defining SQL Expressions"
msgstr "SQL式の定義"

#: ../../orm/extensions/declarative/basic_use.rst:139
msgid ""
"See :ref:`mapper_sql_expressions` for examples on declaratively mapping "
"attributes to SQL expressions."
msgstr "属性を宣言的にSQL式にマッピングする例については、ref： `mapper_sql_expressions`を参照してください。"

