# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:5
msgid "Configuring Relationships"
msgstr "関係の設定"

#: ../../orm/extensions/declarative/relationships.rst:9
msgid ""
"This section describes specifics about how the Declarative system "
"interacts with SQLAlchemy ORM relationship constructs.  For general "
"information about setting up relationships between mappings, see "
":ref:`ormtutorial_toplevel` and :ref:`relationship_patterns`."
msgstr "このセクションでは、宣言システムがSQLAlchemy ORM関係構造とどのように対話するかについて説明します。マッピング間の関係の設定に関する一般的な情報については、：ref： `ormtutorial_toplevel`と：ref：` relationship_patterns`を参照してください。"

#: ../../orm/extensions/declarative/relationships.rst:14
msgid ""
"Relationships to other classes are done in the usual way, with the added "
"feature that the class specified to :func:`~sqlalchemy.orm.relationship` "
"may be a string name.  The \"class registry\" associated with ``Base`` is"
" used at mapper compilation time to resolve the name into the actual "
"class object, which is expected to have been defined once the mapper "
"configuration is used::"
msgstr "他のクラスとの関係は通常の方法で行われ、func： `〜sqlalchemy.orm.relationship`に指定されたクラスは文字列名でもよいという追加機能があります。 `` Base``に関連付けられた\ &quot;class registry \&quot;は、マッパー設定時に定義されると予想される実際のクラスオブジェクトに名前を解決するためにマッパーコンパイル時に使用されます::"

#: ../../orm/extensions/declarative/relationships.rst:35
msgid ""
"Column constructs, since they are just that, are immediately usable, as "
"below where we define a primary join condition on the ``Address`` class "
"using them::"
msgstr "Column構造体は、それだけであるので、すぐに使用できます。以下のように、 `` Address``クラスでPrimary Join条件を定義します::"

#: ../../orm/extensions/declarative/relationships.rst:47
msgid ""
"In addition to the main argument for "
":func:`~sqlalchemy.orm.relationship`, other arguments which depend upon "
"the columns present on an as-yet undefined class may also be specified as"
" strings.  These strings are evaluated as Python expressions.  The full "
"namespace available within this evaluation includes all classes mapped "
"for this declarative base, as well as the contents of the ``sqlalchemy`` "
"package, including expression functions like "
":func:`~sqlalchemy.sql.expression.desc` and "
":attr:`~sqlalchemy.sql.expression.func`::"
msgstr "：func： `〜sqlalchemy.orm.relationship`の主な引数に加えて、まだ未定義のクラスに存在するカラムに依存する他の引数も文字列として指定することができます。これらの文字列はPythonの式として評価されます。この評価の中で利用可能な完全な名前空間には、この宣言的な基底に対してマップされたすべてのクラスと、func： `〜sqlalchemy.sql.expression.desc`と：attrのような式関数を含む` `sqlalchemy``パッケージの内容が含まれます： `〜sqlalchemy.sql.expression.func` ::"

#: ../../orm/extensions/declarative/relationships.rst:62
msgid ""
"For the case where more than one module contains a class of the same "
"name, string class names can also be specified as module-qualified paths "
"within any of these string expressions::"
msgstr "複数のモジュールに同じ名前のクラスが含まれている場合、文字列クラス名は、これらの文字列式のいずれかでモジュール修飾パスとして指定することもできます。"

#: ../../orm/extensions/declarative/relationships.rst:73
msgid ""
"The qualified path can be any partial path that removes ambiguity between"
" the names.  For example, to disambiguate between "
"``myapp.model.address.Address`` and ``myapp.model.lookup.Address``, we "
"can specify ``address.Address`` or ``lookup.Address``::"
msgstr "修飾されたパスは、名前間のあいまいさを取り除く部分パスにすることができます。たとえば、 `` myapp.model.address.Address``と `` myapp.model.lookup.Address``を区別するために、 `` address.Address``または `` lookup.Address`` ::を指定することができます。"

#: ../../orm/extensions/declarative/relationships.rst:85
msgid ""
"module-qualified paths can be used when specifying string arguments with "
"Declarative, in order to specify specific modules."
msgstr "特定のモジュールを指定するために、Declarativeで文字列引数を指定するときは、モジュール修飾パスを使用できます。"

#: ../../orm/extensions/declarative/relationships.rst:89
msgid ""
"Two alternatives also exist to using string-based attributes.  A lambda "
"can also be used, which will be evaluated after all mappers have been "
"configured::"
msgstr "文字列ベースの属性を使用する方法には2つの方法があります。ラムダも使用できます。ラムダはすべてのマッパーが設定された後に評価されます::"

#: ../../orm/extensions/declarative/relationships.rst:99
msgid ""
"Or, the relationship can be added to the class explicitly after the "
"classes are available::"
msgstr "または、クラスが使用可能になった後に明示的に関係をクラスに追加することができます。"

#: ../../orm/extensions/declarative/relationships.rst:110
msgid "Configuring Many-to-Many Relationships"
msgstr "多対多リレーションシップの構成"

#: ../../orm/extensions/declarative/relationships.rst:112
msgid ""
"Many-to-many relationships are also declared in the same way with "
"declarative as with traditional mappings. The ``secondary`` argument to "
":func:`.relationship` is as usual passed a :class:`.Table` object, which "
"is typically declared in the traditional way.  The :class:`.Table` "
"usually shares the :class:`.MetaData` object used by the declarative "
"base::"
msgstr "多対多の関係も、伝統的なマッピングと同じように宣言的に宣言されます。 ：func： `.relationship`の` `secondary``引数は通常通りclass：` .Table`オブジェクトを渡します。これは通常伝統的な方法で宣言されています。 ：class： `.Table`は通常：宣言的な基底で使われる：class：` .MetaData`オブジェクトを共有します::"

#: ../../orm/extensions/declarative/relationships.rst:131
msgid ""
"Like other :func:`~sqlalchemy.orm.relationship` arguments, a string is "
"accepted as well, passing the string name of the table as defined in the "
"``Base.metadata.tables`` collection::"
msgstr "他の：func： `〜sqlalchemy.orm.relationship`引数と同様に、文字列も受け入れられ、` `Base.metadata.tables``コレクションに定義されているようにテーブルの文字列名を渡します::"

#: ../../orm/extensions/declarative/relationships.rst:140
msgid ""
"As with traditional mapping, its generally not a good idea to use a "
":class:`.Table` as the \"secondary\" argument which is also mapped to a "
"class, unless the :func:`.relationship` is declared with "
"``viewonly=True``. Otherwise, the unit-of-work system may attempt "
"duplicate INSERT and DELETE statements against the underlying table."
msgstr "伝統的なマッピングと同様に、：class： `.Table`を\&quot;セカンダリ\ &quot;の引数として使用するのは良い考えではありません。これは：func：` .relationship`が ` `viewonly = True``です。それ以外の場合、作業単位システムは、基になるテーブルに対して重複INSERTおよびDELETEステートメントを試行することがあります。"

