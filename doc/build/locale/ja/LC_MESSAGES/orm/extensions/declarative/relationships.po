# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/extensions/declarative/relationships.rst:5
msgid "Configuring Relationships"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:9
msgid ""
"This section describes specifics about how the Declarative system "
"interacts with SQLAlchemy ORM relationship constructs.  For general "
"information about setting up relationships between mappings, see "
":ref:`ormtutorial_toplevel` and :ref:`relationship_patterns`."
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:14
msgid ""
"Relationships to other classes are done in the usual way, with the added "
"feature that the class specified to :func:`~sqlalchemy.orm.relationship` "
"may be a string name.  The \"class registry\" associated with ``Base`` is"
" used at mapper compilation time to resolve the name into the actual "
"class object, which is expected to have been defined once the mapper "
"configuration is used::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:35
msgid ""
"Column constructs, since they are just that, are immediately usable, as "
"below where we define a primary join condition on the ``Address`` class "
"using them::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:47
msgid ""
"In addition to the main argument for "
":func:`~sqlalchemy.orm.relationship`, other arguments which depend upon "
"the columns present on an as-yet undefined class may also be specified as"
" strings.  These strings are evaluated as Python expressions.  The full "
"namespace available within this evaluation includes all classes mapped "
"for this declarative base, as well as the contents of the ``sqlalchemy`` "
"package, including expression functions like "
":func:`~sqlalchemy.sql.expression.desc` and "
":attr:`~sqlalchemy.sql.expression.func`::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:62
msgid ""
"For the case where more than one module contains a class of the same "
"name, string class names can also be specified as module-qualified paths "
"within any of these string expressions::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:73
msgid ""
"The qualified path can be any partial path that removes ambiguity between"
" the names.  For example, to disambiguate between "
"``myapp.model.address.Address`` and ``myapp.model.lookup.Address``, we "
"can specify ``address.Address`` or ``lookup.Address``::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:85
msgid ""
"module-qualified paths can be used when specifying string arguments with "
"Declarative, in order to specify specific modules."
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:89
msgid ""
"Two alternatives also exist to using string-based attributes.  A lambda "
"can also be used, which will be evaluated after all mappers have been "
"configured::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:99
msgid ""
"Or, the relationship can be added to the class explicitly after the "
"classes are available::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:110
msgid "Configuring Many-to-Many Relationships"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:112
msgid ""
"Many-to-many relationships are also declared in the same way with "
"declarative as with traditional mappings. The ``secondary`` argument to "
":func:`.relationship` is as usual passed a :class:`.Table` object, which "
"is typically declared in the traditional way.  The :class:`.Table` "
"usually shares the :class:`.MetaData` object used by the declarative "
"base::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:131
msgid ""
"Like other :func:`~sqlalchemy.orm.relationship` arguments, a string is "
"accepted as well, passing the string name of the table as defined in the "
"``Base.metadata.tables`` collection::"
msgstr ""

#: ../../orm/extensions/declarative/relationships.rst:140
msgid ""
"As with traditional mapping, its generally not a good idea to use a "
":class:`.Table` as the \"secondary\" argument which is also mapped to a "
"class, unless the :func:`.relationship` is declared with "
"``viewonly=True``. Otherwise, the unit-of-work system may attempt "
"duplicate INSERT and DELETE statements against the underlying table."
msgstr ""

