# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/collections.rst:7
msgid "Collection Configuration and Techniques"
msgstr ""

#: ../../orm/collections.rst:9
msgid ""
"The :func:`.relationship` function defines a linkage between two classes."
" When the linkage defines a one-to-many or many-to-many relationship, "
"it's represented as a Python collection when objects are loaded and "
"manipulated. This section presents additional information about "
"collection configuration and techniques."
msgstr ""

#: ../../orm/collections.rst:19
msgid "Working with Large Collections"
msgstr ""

#: ../../orm/collections.rst:21
msgid ""
"The default behavior of :func:`.relationship` is to fully load the "
"collection of items in, as according to the loading strategy of the "
"relationship. Additionally, the :class:`.Session` by default only knows "
"how to delete objects which are actually present within the session. When"
" a parent instance is marked for deletion and flushed, the "
":class:`.Session` loads its full list of child items in so that they may "
"either be deleted as well, or have their foreign key value set to null; "
"this is to avoid constraint violations. For large collections of child "
"items, there are several strategies to bypass full loading of child items"
" both at load time as well as deletion time."
msgstr ""

#: ../../orm/collections.rst:34
msgid "Dynamic Relationship Loaders"
msgstr ""

#: ../../orm/collections.rst:36
msgid ""
"A key feature to enable management of a large collection is the so-called"
" \"dynamic\" relationship.  This is an optional form of "
":func:`~sqlalchemy.orm.relationship` which returns a "
":class:`~sqlalchemy.orm.query.Query` object in place of a collection when"
" accessed. :func:`~sqlalchemy.orm.query.Query.filter` criterion may be "
"applied as well as limits and offsets, either explicitly or via array "
"slices::"
msgstr ""

#: ../../orm/collections.rst:55
msgid ""
"The dynamic relationship supports limited write operations, via the "
"``append()`` and ``remove()`` methods::"
msgstr ""

#: ../../orm/collections.rst:63
msgid ""
"Since the read side of the dynamic relationship always queries the "
"database, changes to the underlying collection will not be visible until "
"the data has been flushed.  However, as long as \"autoflush\" is enabled "
"on the :class:`.Session` in use, this will occur automatically each time "
"the collection is about to emit a query."
msgstr ""

#: ../../orm/collections.rst:70
msgid ""
"To place a dynamic relationship on a backref, use the "
":func:`~.orm.backref` function in conjunction with ``lazy='dynamic'``::"
msgstr ""

#: ../../orm/collections.rst:80
msgid ""
"Note that eager/lazy loading options cannot be used in conjunction "
"dynamic relationships at this time."
msgstr ""

#: ../../orm/collections.rst:84
msgid ""
"The :func:`~.orm.dynamic_loader` function is essentially the same as "
":func:`~.orm.relationship` with the ``lazy='dynamic'`` argument "
"specified."
msgstr ""

#: ../../orm/collections.rst:89
msgid ""
"The \"dynamic\" loader applies to **collections only**.   It is not valid"
" to use \"dynamic\" loaders with many-to-one, one-to-one, or "
"uselist=False relationships.   Newer versions of SQLAlchemy emit warnings"
" or exceptions in these cases."
msgstr ""

#: ../../orm/collections.rst:97
msgid "Setting Noload, RaiseLoad"
msgstr ""

#: ../../orm/collections.rst:99
msgid ""
"A \"noload\" relationship never loads from the database, even when "
"accessed.   It is configured using ``lazy='noload'``::"
msgstr ""

#: ../../orm/collections.rst:107
msgid ""
"Above, the ``children`` collection is fully writeable, and changes to it "
"will be persisted to the database as well as locally available for "
"reading at the time they are added. However when instances of ``MyClass``"
" are freshly loaded from the database, the ``children`` collection stays "
"empty.   The noload strategy is also available on a query option basis "
"using the :func:`.orm.noload` loader option."
msgstr ""

#: ../../orm/collections.rst:114
msgid ""
"Alternatively, a \"raise\"-loaded relationship will raise an "
":exc:`~sqlalchemy.exc.InvalidRequestError` where the attribute would "
"normally emit a lazy load::"
msgstr ""

#: ../../orm/collections.rst:123
msgid ""
"Above, attribute access on the ``children`` collection will raise an "
"exception if it was not previously eagerloaded.  This includes read "
"access but for collections will also affect write access, as collections "
"can't be mutated without first loading them.  The rationale for this is "
"to ensure that an application is not emitting any unexpected lazy loads "
"within a certain context. Rather than having to read through SQL logs to "
"determine that all necessary attributes were eager loaded, the \"raise\" "
"strategy will cause unloaded attributes to raise immediately if accessed."
"  The raise strategy is also available on a query option basis using the "
":func:`.orm.raiseload` loader option."
msgstr ""

#: ../../orm/collections.rst:134
msgid "added the \"raise\" loader strategy."
msgstr ""

#: ../../orm/collections.rst:138
msgid ":ref:`prevent_lazy_with_raiseload`"
msgstr ""

#: ../../orm/collections.rst:143
msgid "Using Passive Deletes"
msgstr ""

#: ../../orm/collections.rst:145
msgid ""
"Use :paramref:`~.relationship.passive_deletes` to disable child object "
"loading on a DELETE operation, in conjunction with \"ON DELETE "
"(CASCADE|SET NULL)\" on your database to automatically cascade deletes to"
" child objects::"
msgstr ""

#: ../../orm/collections.rst:166
msgid ""
"To use \"ON DELETE CASCADE\", the underlying database engine must support"
" foreign keys."
msgstr ""

#: ../../orm/collections.rst:169
msgid ""
"When using MySQL, an appropriate storage engine must be selected.  See "
":ref:`mysql_storage_engines` for details."
msgstr ""

#: ../../orm/collections.rst:172
msgid ""
"When using SQLite, foreign key support must be enabled explicitly. See "
":ref:`sqlite_foreign_keys` for details."
msgstr ""

#: ../../orm/collections.rst:175
msgid ""
"When :paramref:`~.relationship.passive_deletes` is applied, the "
"``children`` relationship will not be loaded into memory when an instance"
" of ``MyClass`` is marked for deletion. The ``cascade=\"all, delete-"
"orphan\"`` *will* take effect for instances of ``MyOtherClass`` which are"
" currently present in the session; however for instances of "
"``MyOtherClass`` which are not loaded, SQLAlchemy assumes that \"ON "
"DELETE CASCADE\" rules will ensure that those rows are deleted by the "
"database."
msgstr ""

#: ../../orm/collections.rst:185
msgid ""
":paramref:`.orm.mapper.passive_deletes` - similar feature on "
":func:`.mapper`"
msgstr ""

#: ../../orm/collections.rst:191
msgid "Customizing Collection Access"
msgstr ""

#: ../../orm/collections.rst:193
msgid ""
"Mapping a one-to-many or many-to-many relationship results in a "
"collection of values accessible through an attribute on the parent "
"instance. By default, this collection is a ``list``::"
msgstr ""

#: ../../orm/collections.rst:207
msgid ""
"Collections are not limited to lists. Sets, mutable sequences and almost "
"any other Python object that can act as a container can be used in place "
"of the default list, by specifying the "
":paramref:`~.relationship.collection_class` option on "
":func:`~sqlalchemy.orm.relationship`::"
msgstr ""

#: ../../orm/collections.rst:225
msgid "Dictionary Collections"
msgstr ""

#: ../../orm/collections.rst:227
msgid ""
"A little extra detail is needed when using a dictionary as a collection. "
"This because objects are always loaded from the database as lists, and a "
"key-generation strategy must be available to populate the dictionary "
"correctly.  The :func:`.attribute_mapped_collection` function is by far "
"the most common way to achieve a simple dictionary collection.  It "
"produces a dictionary class that will apply a particular attribute of the"
" mapped class as a key.   Below we map an ``Item`` class containing a "
"dictionary of ``Note`` items keyed to the ``Note.keyword`` attribute::"
msgstr ""

#: ../../orm/collections.rst:260
msgid "``Item.notes`` is then a dictionary::"
msgstr ""

#: ../../orm/collections.rst:267
msgid ""
":func:`.attribute_mapped_collection` will ensure that the ``.keyword`` "
"attribute of each ``Note`` complies with the key in the dictionary.   "
"Such as, when assigning to ``Item.notes``, the dictionary key we supply "
"must match that of the actual ``Note`` object::"
msgstr ""

#: ../../orm/collections.rst:278
msgid ""
"The attribute which :func:`.attribute_mapped_collection` uses as a key "
"does not need to be mapped at all!  Using a regular Python ``@property`` "
"allows virtually any detail or combination of details about the object to"
" be used as the key, as below when we establish it as a tuple of "
"``Note.keyword`` and the first ten letters of the ``Note.text`` field::"
msgstr ""

#: ../../orm/collections.rst:307
msgid ""
"Above we added a ``Note.item`` backref.  Assigning to this reverse "
"relationship, the ``Note`` is added to the ``Item.notes`` dictionary and "
"the key is generated for us automatically::"
msgstr ""

#: ../../orm/collections.rst:316
msgid ""
"Other built-in dictionary types include "
":func:`.column_mapped_collection`, which is almost like "
":func:`.attribute_mapped_collection` except given the :class:`.Column` "
"object directly::"
msgstr ""

#: ../../orm/collections.rst:329
msgid ""
"as well as :func:`.mapped_collection` which is passed any callable "
"function. Note that it's usually easier to use "
":func:`.attribute_mapped_collection` along with a ``@property`` as "
"mentioned earlier::"
msgstr ""

#: ../../orm/collections.rst:342
msgid ""
"Dictionary mappings are often combined with the \"Association Proxy\" "
"extension to produce streamlined dictionary views.  See "
":ref:`proxying_dictionaries` and :ref:`composite_association_proxy` for "
"examples."
msgstr ""

#: of sqlalchemy.orm.collections.attribute_mapped_collection:1
msgid "A dictionary-based collection type with attribute-based keying."
msgstr ""

#: of sqlalchemy.orm.collections.attribute_mapped_collection:3
msgid ""
"Returns a :class:`.MappedCollection` factory with a keying based on the "
"'attr_name' attribute of entities in the collection, where ``attr_name`` "
"is the string name of the attribute."
msgstr ""

#: of sqlalchemy.orm.collections.attribute_mapped_collection:7
#: sqlalchemy.orm.collections.column_mapped_collection:7
#: sqlalchemy.orm.collections.mapped_collection:7
msgid ""
"The key value must be immutable for the lifetime of the object.  You can "
"not, for example, map on foreign key values if those key values will "
"change during the session, i.e. from None to a database-assigned integer "
"after a session flush."
msgstr ""

#: of sqlalchemy.orm.collections.column_mapped_collection:1
msgid "A dictionary-based collection type with column-based keying."
msgstr ""

#: of sqlalchemy.orm.collections.column_mapped_collection:3
msgid ""
"Returns a :class:`.MappedCollection` factory with a keying function "
"generated from mapping_spec, which may be a Column or a sequence of "
"Columns."
msgstr ""

#: of sqlalchemy.orm.collections.mapped_collection:1
msgid "A dictionary-based collection type with arbitrary keying."
msgstr ""

#: of sqlalchemy.orm.collections.mapped_collection:3
msgid ""
"Returns a :class:`.MappedCollection` factory with a keying function "
"generated from keyfunc, a callable that takes an entity and returns a key"
" value."
msgstr ""

#: ../../orm/collections.rst:353
msgid "Custom Collection Implementations"
msgstr ""

#: ../../orm/collections.rst:355
msgid ""
"You can use your own types for collections as well.  In simple cases, "
"inherting from ``list`` or ``set``, adding custom behavior, is all that's"
" needed. In other cases, special decorators are needed to tell SQLAlchemy"
" more detail about how the collection operates."
msgstr ""

#: ../../orm/collections.rst:362
msgid ""
"In most cases not at all!   The most common use cases for a \"custom\" "
"collection is one that validates or marshals incoming values into a new "
"form, such as a string that becomes a class instance, or one which goes a"
" step beyond and represents the data internally in some fashion, "
"presenting a \"view\" of that data on the outside of a different form."
msgstr ""

#: ../../orm/collections.rst:368
msgid ""
"For the first use case, the :func:`.orm.validates` decorator is by far "
"the simplest way to intercept incoming values in all cases for the "
"purposes of validation and simple marshaling.  See "
":ref:`simple_validators` for an example of this."
msgstr ""

#: ../../orm/collections.rst:373
msgid ""
"For the second use case, the :ref:`associationproxy_toplevel` extension "
"is a well-tested, widely used system that provides a read/write \"view\" "
"of a collection in terms of some attribute present on the target object. "
"As the target attribute can be a ``@property`` that returns virtually "
"anything, a wide array of \"alternative\" views of a collection can be "
"constructed with just a few functions. This approach leaves the "
"underlying mapped collection unaffected and avoids the need to carefully "
"tailor collection behavior on a method-by-method basis."
msgstr ""

#: ../../orm/collections.rst:382
msgid ""
"Customized collections are useful when the collection needs to have "
"special behaviors upon access or mutation operations that can't otherwise"
" be modeled externally to the collection.   They can of course be "
"combined with the above two approaches."
msgstr ""

#: ../../orm/collections.rst:387
msgid ""
"Collections in SQLAlchemy are transparently *instrumented*. "
"Instrumentation means that normal operations on the collection are "
"tracked and result in changes being written to the database at flush "
"time. Additionally, collection operations can fire *events* which "
"indicate some secondary operation must take place. Examples of a "
"secondary operation include saving the child item in the parent's "
":class:`~sqlalchemy.orm.session.Session` (i.e. the ``save-update`` "
"cascade), as well as synchronizing the state of a bi-directional "
"relationship (i.e. a :func:`.backref`)."
msgstr ""

#: ../../orm/collections.rst:396
msgid ""
"The collections package understands the basic interface of lists, sets "
"and dicts and will automatically apply instrumentation to those built-in "
"types and their subclasses. Object-derived types that implement a basic "
"collection interface are detected and instrumented via duck-typing:"
msgstr ""

#: ../../orm/collections.rst:417
msgid ""
"``append``, ``remove``, and ``extend`` are known list-like methods, and "
"will be instrumented automatically. ``__iter__`` is not a mutator method "
"and won't be instrumented, and ``foo`` won't be either."
msgstr ""

#: ../../orm/collections.rst:421
msgid ""
"Duck-typing (i.e. guesswork) isn't rock-solid, of course, so you can be "
"explicit about the interface you are implementing by providing an "
"``__emulates__`` class attribute::"
msgstr ""

#: ../../orm/collections.rst:437
msgid ""
"This class looks list-like because of ``append``, but ``__emulates__`` "
"forces it to set-like. ``remove`` is known to be part of the set "
"interface and will be instrumented."
msgstr ""

#: ../../orm/collections.rst:441
msgid ""
"But this class won't work quite yet: a little glue is needed to adapt it "
"for use by SQLAlchemy. The ORM needs to know which methods to use to "
"append, remove and iterate over members of the collection. When using a "
"type like ``list`` or ``set``, the appropriate methods are well-known and"
" used automatically when present. This set-like class does not provide "
"the expected ``add`` method, so we must supply an explicit mapping for "
"the ORM via a decorator."
msgstr ""

#: ../../orm/collections.rst:450
msgid "Annotating Custom Collections via Decorators"
msgstr ""

#: ../../orm/collections.rst:452
msgid ""
"Decorators can be used to tag the individual methods the ORM needs to "
"manage collections. Use them when your class doesn't quite meet the "
"regular interface for its container type, or when you otherwise would "
"like to use a different method to get the job done."
msgstr ""

#: ../../orm/collections.rst:477
msgid ""
"And that's all that's needed to complete the example. SQLAlchemy will add"
" instances via the ``append`` method. ``remove`` and ``__iter__`` are the"
" default methods for sets and will be used for removing and iteration. "
"Default methods can be changed as well:"
msgstr ""

#: ../../orm/collections.rst:495
msgid ""
"There is no requirement to be list-, or set-like at all. Collection "
"classes can be any shape, so long as they have the append, remove and "
"iterate interface marked for SQLAlchemy's use. Append and remove methods "
"will be called with a mapped entity as the single argument, and iterator "
"methods are called with no arguments and must return an iterator."
msgstr ""

#: of sqlalchemy.orm.collections.collection:1
msgid "Decorators for entity collection classes."
msgstr ""

#: of sqlalchemy.orm.collections.collection:3
msgid "The decorators fall into two groups: annotations and interception recipes."
msgstr ""

#: of sqlalchemy.orm.collections.collection:5
msgid ""
"The annotating decorators (appender, remover, iterator, linker, "
"converter, internally_instrumented) indicate the method's purpose and "
"take no arguments.  They are not written with parens::"
msgstr ""

#: of sqlalchemy.orm.collections.collection:12
msgid ""
"The recipe decorators all require parens, even those that take no "
"arguments::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.adds:1
msgid "Mark the method as adding an entity to the collection."
msgstr ""

#: of sqlalchemy.orm.collections.collection.adds:3
msgid ""
"Adds \"add to collection\" handling to the method.  The decorator "
"argument indicates which method argument holds the SQLAlchemy-relevant "
"value.  Arguments can be specified positionally (i.e. integer) or by "
"name::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.appender:1
msgid "Tag the method as the collection appender."
msgstr ""

#: of sqlalchemy.orm.collections.collection.appender:3
msgid ""
"The appender method is called with one positional argument: the value to "
"append. The method will be automatically decorated with 'adds(1)' if not "
"already decorated::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.appender:28
msgid ""
"If the value to append is not allowed in the collection, you may raise an"
" exception.  Something to remember is that the appender will be called "
"for each object mapped by a database query.  If the database contains "
"rows that violate your collection semantics, you will need to get "
"creative to fix the problem, as access via the collection will not work."
msgstr ""

#: of sqlalchemy.orm.collections.collection.appender:35
msgid ""
"If the appender method is internally instrumented, you must also receive "
"the keyword argument '_sa_initiator' and ensure its promulgation to "
"collection events."
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:1
msgid "Tag the method as the collection converter."
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:3
msgid "Use the bulk_replace event handler"
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:5
msgid ""
"This optional method will be called when a collection is being replaced "
"entirely, as in::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:10
msgid ""
"The converter method will receive the object being assigned and should "
"return an iterable of values suitable for use by the ``appender`` method."
"  A converter must not assign values or mutate the collection, its sole "
"job is to adapt the value the user provides into an iterable of values "
"for the ORM's use."
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:16
msgid ""
"The default converter implementation will use duck-typing to do the "
"conversion.  A dict-like collection will be convert into an iterable of "
"dictionary values, and other types will simply be iterated::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:23
msgid ""
"If the duck-typing of the object does not match the type of this "
"collection, a TypeError is raised."
msgstr ""

#: of sqlalchemy.orm.collections.collection.converter:26
msgid ""
"Supply an implementation of this method if you want to expand the range "
"of possible types that can be assigned in bulk or perform validation on "
"the values about to be assigned."
msgstr ""

#: of sqlalchemy.orm.collections.collection.internally_instrumented:1
msgid "Tag the method as instrumented."
msgstr ""

#: of sqlalchemy.orm.collections.collection.internally_instrumented:3
msgid ""
"This tag will prevent any decoration from being applied to the method. "
"Use this if you are orchestrating your own calls to "
":func:`.collection_adapter` in one of the basic SQLAlchemy interface "
"methods, or to prevent an automatic ABC method decoration from wrapping "
"your implementation::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.iterator:1
#: sqlalchemy.orm.collections.collection.remover:1
msgid "Tag the method as the collection remover."
msgstr ""

#: of sqlalchemy.orm.collections.collection.iterator:3
msgid ""
"The iterator method is called with no arguments.  It is expected to "
"return an iterator over all collection members::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.link:1
msgid "deprecated; synonym for :meth:`.collection.linker`."
msgstr ""

#: of sqlalchemy.orm.collections.collection.linker:1
msgid "Tag the method as a \"linked to attribute\" event handler."
msgstr ""

#: of sqlalchemy.orm.collections.collection.linker:3
msgid ""
"This optional event handler will be called when the collection class is "
"linked to or unlinked from the InstrumentedAttribute.  It is invoked "
"immediately after the '_sa_adapter' property is set on the instance.  A "
"single argument is passed: the collection adapter that has been linked, "
"or None if unlinking."
msgstr ""

#: of sqlalchemy.orm.collections.collection.linker:9
msgid ""
"- the :meth:`.collection.linker` handler is superseded by the "
":meth:`.AttributeEvents.init_collection` and "
":meth:`.AttributeEvents.dispose_collection` handlers."
msgstr ""

#: of sqlalchemy.orm.collections.collection.remover:3
msgid ""
"The remover method is called with one positional argument: the value to "
"remove. The method will be automatically decorated with "
":meth:`removes_return` if not already decorated::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.remover:15
msgid ""
"If the value to remove is not present in the collection, you may raise an"
" exception or return None to ignore the error."
msgstr ""

#: of sqlalchemy.orm.collections.collection.remover:18
msgid ""
"If the remove method is internally instrumented, you must also receive "
"the keyword argument '_sa_initiator' and ensure its promulgation to "
"collection events."
msgstr ""

#: of sqlalchemy.orm.collections.collection.removes:1
#: sqlalchemy.orm.collections.collection.removes_return:1
msgid "Mark the method as removing an entity in the collection."
msgstr ""

#: of sqlalchemy.orm.collections.collection.removes:3
msgid ""
"Adds \"remove from collection\" handling to the method.  The decorator "
"argument indicates which method argument holds the SQLAlchemy-relevant "
"value to be removed. Arguments can be specified positionally (i.e. "
"integer) or by name::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.removes:11
msgid ""
"For methods where the value to remove is not known at call-time, use "
"collection.removes_return."
msgstr ""

#: of sqlalchemy.orm.collections.collection.removes_return:3
msgid ""
"Adds \"remove from collection\" handling to the method.  The return value"
" of the method, if any, is considered the value to remove.  The method "
"arguments are not inspected::"
msgstr ""

#: of sqlalchemy.orm.collections.collection.removes_return:10
msgid ""
"For methods where the value to remove is known at call-time, use "
"collection.remove."
msgstr ""

#: of sqlalchemy.orm.collections.collection.replaces:1
msgid "Mark the method as replacing an entity in the collection."
msgstr ""

#: of sqlalchemy.orm.collections.collection.replaces:3
msgid ""
"Adds \"add to collection\" and \"remove from collection\" handling to the"
" method.  The decorator argument indicates which method argument holds "
"the SQLAlchemy-relevant value to be added, and return value, if any will "
"be considered the value to remove."
msgstr ""

#: of sqlalchemy.orm.collections.collection.replaces:8
msgid "Arguments can be specified positionally (i.e. integer) or by name::"
msgstr ""

#: ../../orm/collections.rst:507
msgid "Custom Dictionary-Based Collections"
msgstr ""

#: ../../orm/collections.rst:509
msgid ""
"The :class:`.MappedCollection` class can be used as a base class for your"
" custom types or as a mix-in to quickly add ``dict`` collection support "
"to other classes. It uses a keying function to delegate to "
"``__setitem__`` and ``__delitem__``:"
msgstr ""

#: ../../orm/collections.rst:526
msgid ""
"When subclassing :class:`.MappedCollection`, user-defined versions of "
"``__setitem__()`` or ``__delitem__()`` should be decorated with "
":meth:`.collection.internally_instrumented`, **if** they call down to "
"those same methods on :class:`.MappedCollection`.  This because the "
"methods on :class:`.MappedCollection` are already instrumented - calling "
"them from within an already instrumented call can cause events to be "
"fired off repeatedly, or inappropriately, leading to internal state "
"corruption in rare cases::"
msgstr ""

#: ../../orm/collections.rst:554
msgid ""
"The ORM understands the ``dict`` interface just like lists and sets, and "
"will automatically instrument all dict-like methods if you choose to "
"subclass ``dict`` or provide dict-like collection behavior in a duck-"
"typed class. You must decorate appender and remover methods, however- "
"there are no compatible methods in the basic dictionary interface for "
"SQLAlchemy to use by default. Iteration will go through ``itervalues()`` "
"unless otherwise decorated."
msgstr ""

#: ../../orm/collections.rst:563
msgid ""
"Due to a bug in MappedCollection prior to version 0.7.6, this workaround "
"usually needs to be called before a custom subclass of "
":class:`.MappedCollection` which uses "
":meth:`.collection.internally_instrumented` can be used::"
msgstr ""

#: ../../orm/collections.rst:571
msgid ""
"This will ensure that the :class:`.MappedCollection` has been properly "
"initialized with custom ``__setitem__()`` and ``__delitem__()`` methods "
"before used in a custom subclass."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection:1
msgid "A basic dictionary-based collection class."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection:3
msgid ""
"Extends dict with the minimal bag semantics that collection classes "
"require. ``set`` and ``remove`` are implemented in terms of a keying "
"function: any callable that takes an object and returns an object for use"
" as a dictionary key."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection.pop:1
msgid "If key is not found, d is returned if given, otherwise KeyError is raised"
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection.popitem:1
msgid "2-tuple; but raise KeyError if D is empty."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection.remove:1
msgid "Remove an item by value, consulting the keyfunc for the key."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection.set:1
msgid "Add an item by value, consulting the keyfunc for the key."
msgstr ""

#: of sqlalchemy.orm.collections.MappedCollection.update:1
msgid ""
"If E is present and has a .keys() method, then does:  for k in E: D[k] = "
"E[k] If E is present and lacks a .keys() method, then does:  for k, v in "
"E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"
msgstr ""

#: ../../orm/collections.rst:579
msgid "Instrumentation and Custom Types"
msgstr ""

#: ../../orm/collections.rst:581
msgid ""
"Many custom types and existing library classes can be used as a entity "
"collection type as-is without further ado. However, it is important to "
"note that the instrumentation process will modify the type, adding "
"decorators around methods automatically."
msgstr ""

#: ../../orm/collections.rst:586
msgid ""
"The decorations are lightweight and no-op outside of relationships, but "
"they do add unneeded overhead when triggered elsewhere. When using a "
"library class as a collection, it can be good practice to use the "
"\"trivial subclass\" trick to restrict the decorations to just your usage"
" in relationships. For example:"
msgstr ""

#: ../../orm/collections.rst:598
msgid ""
"The ORM uses this approach for built-ins, quietly substituting a trivial "
"subclass when a ``list``, ``set`` or ``dict`` is used directly."
msgstr ""

#: ../../orm/collections.rst:602
msgid "Collection Internals"
msgstr ""

#: ../../orm/collections.rst:604
msgid "Various internal methods."
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace:1
msgid "Load a new collection, firing events based on prior like membership."
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace:3
msgid ""
"Appends instances in ``values`` onto the ``new_adapter``. Events will be "
"fired for any instance not present in the ``existing_adapter``.  Any "
"instances in ``existing_adapter`` not present in ``values`` will have "
"remove events fired upon them."
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace:8
msgid "An iterable of collection member instances"
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace:10
msgid "A :class:`.CollectionAdapter` of instances to be replaced"
msgstr ""

#: of sqlalchemy.orm.collections.bulk_replace:13
msgid "An empty :class:`.CollectionAdapter` to load with ``values``"
msgstr ""

#: of sqlalchemy.orm.collections.collection_adapter:1
msgid "Fetch the :class:`.CollectionAdapter` for a collection."
msgstr ""

#: of sqlalchemy.orm.collections.CollectionAdapter:1
msgid "Bridges between the ORM and arbitrary Python collections."
msgstr ""

#: of sqlalchemy.orm.collections.CollectionAdapter:3
msgid ""
"Proxies base-level collection operations (append, remove, iterate) to the"
" underlying Python collection, and emits add/remove events for entities "
"entering or leaving the collection."
msgstr ""

#: of sqlalchemy.orm.collections.CollectionAdapter:7
msgid ""
"The ORM uses :class:`.CollectionAdapter` exclusively for interaction with"
" entity collections."
msgstr ""

#: of sqlalchemy.orm.collections.InstrumentedDict:1
msgid "An instrumented version of the built-in dict."
msgstr ""

#: of sqlalchemy.orm.collections.InstrumentedList:1
msgid "An instrumented version of the built-in list."
msgstr ""

#: of sqlalchemy.orm.collections.InstrumentedSet:1
msgid "An instrumented version of the built-in set."
msgstr ""

#: of sqlalchemy.orm.collections.prepare_instrumentation:1
msgid "Prepare a callable for future use as a collection class factory."
msgstr ""

#: of sqlalchemy.orm.collections.prepare_instrumentation:3
msgid ""
"Given a collection class factory (either a type or no-arg callable), "
"return another factory that will produce compatible instances when "
"called."
msgstr ""

#: of sqlalchemy.orm.collections.prepare_instrumentation:7
msgid ""
"This function is responsible for converting collection_class=list into "
"the run-time behavior of collection_class=InstrumentedList."
msgstr ""

