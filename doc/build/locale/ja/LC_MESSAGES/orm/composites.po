# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/composites.rst:6
msgid "Composite Column Types"
msgstr "コンポジット列の種類"

#: ../../orm/composites.rst:8
msgid ""
"Sets of columns can be associated with a single user-defined datatype. "
"The ORM provides a single attribute which represents the group of columns"
" using the class you provide."
msgstr "列のセットは、単一のユーザー定義データ型に関連付けることができます。 ORMは、提供するクラスを使用して列のグループを表す単一の属性を提供します。"

#: ../../orm/composites.rst:12
msgid ""
"A simple example represents pairs of columns as a ``Point`` object. "
"``Point`` represents such a pair as ``.x`` and ``.y``::"
msgstr "簡単な例は、列のペアを `` Point``オブジェクトとして表現します。 `` Point``は `` .x``と `` .y``のようなペアを表します::"

#: ../../orm/composites.rst:34
msgid ""
"The requirements for the custom datatype class are that it have a "
"constructor which accepts positional arguments corresponding to its "
"column format, and also provides a method ``__composite_values__()`` "
"which returns the state of the object as a list or tuple, in order of its"
" column-based attributes. It also should supply adequate ``__eq__()`` and"
" ``__ne__()`` methods which test the equality of two instances."
msgstr "カスタムデータ型クラスの要件は、列フォーマットに対応する位置引数を受け入れるコンストラクタを持ち、オブジェクトの状態をリストまたはタプルとして順番に返すメソッド__composite_values __（）を提供することです列ベースの属性のうちの1つです。また、2つのインスタンスの等価性をテストする適切な `` __eq __（） ``と `` __ne __（） ``メソッドを提供する必要があります。"

#: ../../orm/composites.rst:41
msgid ""
"We will create a mapping to a table ``vertices``, which represents two "
"points as ``x1/y1`` and ``x2/y2``. These are created normally as "
":class:`.Column` objects. Then, the :func:`.composite` function is used "
"to assign new attributes that will represent sets of columns via the "
"``Point`` class::"
msgstr "`` x1 / y1``と `` x2 / y2``の2つの点を表現するテーブル `` vertices``へのマッピングを作成します。これらは通常、class： `.Column`オブジェクトとして作成されます。次に、：func： `.composite`関数を使用して、` `Point``クラスを介して列の集合を表す新しい属性を割り当てます::"

#: ../../orm/composites.rst:64
msgid ""
"A classical mapping above would define each :func:`.composite` against "
"the existing table::"
msgstr "上記の古典的なマッピングはそれぞれを定義します：func： `.composite`は既存のテーブルに対して::"

#: ../../orm/composites.rst:72
msgid ""
"We can now persist and use ``Vertex`` instances, as well as query for "
"them, using the ``.start`` and ``.end`` attributes against ad-hoc "
"``Point`` instances:"
msgstr "アドホックな `` Point``インスタンスに対して `` .start``と `` .end``属性を使用して、 `` Vertex``インスタンスを永続化して使用することができます。"

#: of sqlalchemy.orm.composite:1
msgid "Return a composite column-based property for use with a Mapper."
msgstr "Mapperで使用する複合列ベースのプロパティを返します。"

#: of sqlalchemy.orm.composite:3
msgid ""
"See the mapping documentation section :ref:`mapper_composite` for a full "
"usage example."
msgstr "完全な使用例については、マッピングドキュメンテーションのsection：ref： `mapper_composite`を参照してください。"

#: of sqlalchemy.orm.composite:6
msgid ""
"The :class:`.MapperProperty` returned by :func:`.composite` is the "
":class:`.CompositeProperty`."
msgstr "：func： `.composite`によって返される：class：` .MapperProperty`は：class： `.CompositeProperty`です。"

#: of sqlalchemy.orm.composite
msgid "パラメータ"
msgstr "パラメータ"

#: of sqlalchemy.orm.composite:9
msgid "The \"composite type\" class."
msgstr "\ &quot;複合型\&quot;クラス。"

#: of sqlalchemy.orm.composite:12
msgid "List of Column objects to be mapped."
msgstr "マップされる列オブジェクトのリスト。"

#: of sqlalchemy.orm.composite:15
msgid ""
"When ``True``, indicates that the \"previous\" value for a scalar "
"attribute should be loaded when replaced, if not already loaded.  See the"
" same flag on :func:`.column_property`.  .. versionchanged:: 0.7     This"
" flag specifically becomes meaningful     - previously it was a "
"placeholder."
msgstr "`` True``のときは、スカラ属性の\ &quot;previous \&quot;値が置換されていなければ読み込まれなければならないことを示します。同じフラグをfunc： `.column_property`で見てください。 .. versionchanged :: 0.7このフラグは特に意味があります。以前はプレースホルダでした。"

#: of sqlalchemy.orm.composite:16
msgid ""
"When ``True``, indicates that the \"previous\" value for a scalar "
"attribute should be loaded when replaced, if not already loaded.  See the"
" same flag on :func:`.column_property`."
msgstr "`` True``のときは、スカラ属性の\ &quot;previous \&quot;値が置換されていなければ読み込まれなければならないことを示します。同じフラグをfunc： `.column_property`で見てください。"

#: of sqlalchemy.orm.composite:20
msgid ""
"This flag specifically becomes meaningful - previously it was a "
"placeholder."
msgstr "このフラグは特に意味があります。以前はプレースホルダでした。"

#: of sqlalchemy.orm.composite:24
msgid "A group name for this property when marked as deferred."
msgstr "遅延されているとマークされている場合、このプロパティーのグループ名。"

#: of sqlalchemy.orm.composite:27
msgid ""
"When True, the column property is \"deferred\", meaning that it does not "
"load immediately, and is instead loaded when the attribute is first "
"accessed on an instance.  See also :func:`~sqlalchemy.orm.deferred`."
msgstr "Trueの場合、columnプロパティは\ &quot;deferred \&quot;です。つまり、すぐに読み込まれることはなく、インスタンスでその属性が最初にアクセスされたときに読み込まれます。 func： `〜sqlalchemy.orm.deferred`も参照してください。"

#: of sqlalchemy.orm.composite:33
msgid ""
"a class which extends :class:`.CompositeProperty.Comparator` which "
"provides custom SQL clause generation for comparison operations."
msgstr "extends：class： `.CompositeProperty.Comparator`これは比較演算のためのカスタムSQL節生成を提供します。"

#: of sqlalchemy.orm.composite:37
msgid ""
"optional string that will be applied as the doc on the class-bound "
"descriptor."
msgstr "クラスバインド記述子のdocとして適用されるオプションの文字列。"

#: of sqlalchemy.orm.composite:41
msgid ""
"Optional data dictionary which will be populated into the "
":attr:`.MapperProperty.info` attribute of this object.  .. versionadded::"
" 0.8"
msgstr "このオブジェクトの：attr： `.MapperProperty.info`属性に読み込まれるオプションのデータ辞書です。 .. versionadded :: 0.8"

#: of sqlalchemy.orm.composite:41
msgid ""
"Optional data dictionary which will be populated into the "
":attr:`.MapperProperty.info` attribute of this object."
msgstr "このオブジェクトの：attr： `.MapperProperty.info`属性に読み込まれるオプションのデータ辞書です。"

#: of sqlalchemy.orm.composite:46
msgid ""
"an :class:`.AttributeExtension` instance, or list of extensions, which "
"will be prepended to the list of attribute listeners for the resulting "
"descriptor placed on the class.  **Deprecated.**  Please see "
":class:`.AttributeEvents`."
msgstr "：class： `.AttributeExtension`インスタンス、またはクラスに配置された結果の記述子の属性リスナーのリストの前に追加される拡張のリストです。 **推奨されていません。**参照：class： `.AttributeEvents`。"

#: ../../orm/composites.rst:99
msgid "Tracking In-Place Mutations on Composites"
msgstr "コンポジットのインプレース・ミューテックスのトラッキング"

#: ../../orm/composites.rst:101
msgid ""
"In-place changes to an existing composite value are not tracked "
"automatically.  Instead, the composite class needs to provide events to "
"its parent object explicitly.   This task is largely automated via the "
"usage of the :class:`.MutableComposite` mixin, which uses events to "
"associate each user-defined composite object with all parent "
"associations. Please see the example in :ref:`mutable_composites`."
msgstr "既存のコンポジット値のインプレース変更は自動的には追跡されません。代わりに、複合クラスはイベントをその親オブジェクトに明示的に提供する必要があります。このタスクは、：class： `.MutableComposite` mixinの使用によって大部分が自動化されます。mixinは、イベントを使用して各ユーザー定義コンポジットオブジェクトをすべての親の関連付けに関連付けます。 ：ref： `mutable_composites`の例を見てください。"

#: ../../orm/composites.rst:108
msgid ""
"In-place changes to an existing composite value are no longer tracked "
"automatically; the functionality is superseded by the "
":class:`.MutableComposite` class."
msgstr "既存のコンポジット値のインプレース変更は自動的には追跡されません。この機能は：class： `.MutableComposite`クラスに取って代わられます。"

#: ../../orm/composites.rst:116
msgid "Redefining Comparison Operations for Composites"
msgstr "コンポジットの比較操作の再定義"

#: ../../orm/composites.rst:118
msgid ""
"The \"equals\" comparison operation by default produces an AND of all "
"corresponding columns equated to one another. This can be changed using "
"the ``comparator_factory`` argument to :func:`.composite`, where we "
"specify a custom :class:`.CompositeProperty.Comparator` class to define "
"existing or new operations. Below we illustrate the \"greater than\" "
"operator, implementing the same expression that the base \"greater than\""
" does::"
msgstr "\ &quot;equals \&quot;比較演算は、デフォルトでは、対応するすべての列の論理積を生成します。これは：func： `.composite`の` `comparator_factory``引数を使って変更できます。ここでは、custom：class：` .CompositeProperty.Comparator`クラスを指定して、既存の操作や新しい操作を定義します。以下では、\ &quot;より大きい\&quot;演算子を示しており、ベース\ &quot;より大きい\と同じ式を実装しています："

