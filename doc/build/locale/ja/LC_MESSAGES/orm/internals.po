# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/internals.rst:4
msgid "ORM Internals"
msgstr "ORM内部"

#: ../../orm/internals.rst:6
msgid ""
"Key ORM constructs, not otherwise covered in other sections, are listed "
"here."
msgstr "他のセクションで特に扱われていない、主要なORM構造体がここにリストされています。"

#: of sqlalchemy.orm.state.AttributeState:1
msgid ""
"Provide an inspection interface corresponding to a particular attribute "
"on a particular mapped object."
msgstr "特定のマップされたオブジェクトの特定の属性に対応する検査インターフェイスを提供します。"

#: of sqlalchemy.orm.state.AttributeState:4
msgid ""
"The :class:`.AttributeState` object is accessed via the "
":attr:`.InstanceState.attrs` collection of a particular "
":class:`.InstanceState`::"
msgstr "：class： `.AttributeState`オブジェクトは、特定の：attr：` .InstanceState.attrs`コレクションによってアクセスされます：class： `.InstanceState` ::"

#: of sqlalchemy.orm.state.AttributeState.history:1
#: sqlalchemy.orm.state.AttributeState.load_history:1
msgid ""
"Return the current pre-flush change history for this attribute, via the "
":class:`.History` interface."
msgstr "：class： `.History`インタフェースを介して、この属性の現在のプリフラッシュ変更履歴を返します。"

#: of sqlalchemy.orm.state.AttributeState.history:4
msgid ""
"This method will **not** emit loader callables if the value of the "
"attribute is unloaded."
msgstr "このメソッドは、属性の値がアンロードされている場合は** **ローダー呼び出し可能コードを出力しません。"

#: of sqlalchemy.orm.state.AttributeState.history:9
msgid ""
":meth:`.AttributeState.load_history` - retrieve history using loader "
"callables if the value is not locally present."
msgstr "：meth： `.AttributeState.load_history`  - 値がローカルに存在しない場合、loader callablesを使って履歴を取得します。"

#: of sqlalchemy.orm.state.AttributeState.history:12
#: sqlalchemy.orm.state.AttributeState.load_history:11
msgid ":func:`.attributes.get_history` - underlying function"
msgstr "：func： `.attributes.get_history`  - 基礎となる関数"

#: of sqlalchemy.orm.state.AttributeState.load_history:4
msgid ""
"This method **will** emit loader callables if the value of the attribute "
"is unloaded."
msgstr "このメソッド**は、属性の値がアンロードされた場合に**ローダー呼び出し可能コードを出力します。"

#: of sqlalchemy.orm.state.AttributeState.load_history:9
msgid ":attr:`.AttributeState.history`"
msgstr "：attr： `.AttributeState.history`"

#: of sqlalchemy.orm.state.AttributeState.loaded_value:1
msgid "The current value of this attribute as loaded from the database."
msgstr "データベースからロードされたこの属性の現在の値。"

#: of sqlalchemy.orm.state.AttributeState.loaded_value:3
msgid ""
"If the value has not been loaded, or is otherwise not present in the "
"object's dictionary, returns NO_VALUE."
msgstr "値がロードされていないか、オブジェクトのディクショナリに存在しない場合は、NO_VALUEを返します。"

#: of sqlalchemy.orm.state.AttributeState.value:1
msgid "Return the value of this attribute."
msgstr "この属性の値を返します。"

#: of sqlalchemy.orm.state.AttributeState.value:3
msgid ""
"This operation is equivalent to accessing the object's attribute directly"
" or via ``getattr()``, and will fire off any pending loader callables if "
"needed."
msgstr "この操作は、オブジェクトの属性に直接アクセスするか、 `` getattr（） ``を介してアクセスするのと同じです。必要に応じて、保留中のローダー呼び出し可能ファイルを起動します。"

#: of sqlalchemy.orm.util.CascadeOptions:1
msgid "Keeps track of the options sent to relationship().cascade"
msgstr "relation（）に送信されるオプションを追跡します。カスケード"

#: of sqlalchemy.orm.instrumentation.ClassManager:1
msgid "tracks state information at the class level."
msgstr "クラスレベルで状態情報を追跡します。"

#: of sqlalchemy.orm.instrumentation.ClassManager.dispose:1
msgid "Dissasociate this manager from its class."
msgstr "このマネージャーをそのクラスから解散する。"

#: of sqlalchemy.orm.instrumentation.ClassManager.fromkeys:1
msgid "Returns a new dict with keys from iterable and values equal to value."
msgstr "iterableのキーとvalueに等しい値を持つ新しいdictを返します。"

#: of sqlalchemy.orm.instrumentation.ClassManager.has_parent:1
msgid "TODO"
msgstr "すべて"

#: of sqlalchemy.orm.instrumentation.ClassManager.manage:1
msgid "Mark this instance as the manager for its class."
msgstr "このインスタンスをそのクラスのマネージャーとしてマークします。"

#: of sqlalchemy.orm.instrumentation.ClassManager.original_init:1
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr "自己を初期化する。正確な署名については、help（type（self））を参照してください。"

#: of sqlalchemy.orm.instrumentation.ClassManager.pop:1
msgid "If key is not found, d is returned if given, otherwise KeyError is raised"
msgstr "keyが見つからなければ、与えられればdが返され、そうでなければKeyErrorが発生します"

#: of sqlalchemy.orm.instrumentation.ClassManager.popitem:1
msgid "2-tuple; but raise KeyError if D is empty."
msgstr "2タプル; Dが空の場合はKeyErrorを上げます。"

#: of sqlalchemy.orm.instrumentation.ClassManager.state_getter:1
msgid "Return a (instance) -> InstanceState callable."
msgstr "（インスタンス） - &gt; InstanceState呼び出し可能を返します。"

#: of sqlalchemy.orm.instrumentation.ClassManager.state_getter:3
msgid ""
"\"state getter\" callables should raise either KeyError or AttributeError"
" if no InstanceState could be found for the instance."
msgstr "インスタンスのInstanceStateが見つからなかった場合、\ &quot;state getter \&quot; CallableはKeyErrorまたはAttributeErrorのいずれかを発生させる必要があります。"

#: of sqlalchemy.orm.instrumentation.ClassManager.unregister:1
msgid "remove all instrumentation established by this ClassManager."
msgstr "このClassManagerによって確立されたすべてのインストルメンテーションを削除します。"

#: of sqlalchemy.orm.instrumentation.ClassManager.update:1
msgid ""
"If E is present and has a .keys() method, then does:  for k in E: D[k] = "
"E[k] If E is present and lacks a .keys() method, then does:  for k, v in "
"E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"
msgstr "もしEが存在し、そして.keys（）メソッドを持っていれば、E：D [k] = E [k] F [k] = F [k]であるとき、E：D [k] = vのいずれかの場合、"

#: of sqlalchemy.orm.properties.ColumnProperty:1
msgid "Describes an object attribute that corresponds to a table column."
msgstr "テーブルの列に対応するオブジェクト属性を記述します。"

#: of sqlalchemy.orm.properties.ColumnProperty:3
msgid "Public constructor is the :func:`.orm.column_property` function."
msgstr "publicコンストラクタは：func： `.orm.column_property`関数です。"

#: of sqlalchemy.orm.properties.ColumnProperty.Comparator:1
msgid ""
"Produce boolean, comparison, and other operators for "
":class:`.ColumnProperty` attributes."
msgstr "クラス： `.ColumnProperty`属性のブール値、比較値、およびその他の演算子を生成します。"

#: of sqlalchemy.orm.properties.ColumnProperty.Comparator:4
msgid "See the documentation for :class:`.PropComparator` for a brief overview."
msgstr "簡単な概要は、class： `.PropComparator`のドキュメントを参照してください。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:7
#: sqlalchemy.orm.interfaces.PropComparator:72
#: sqlalchemy.orm.properties.ColumnProperty.Comparator:7
#: sqlalchemy.orm.properties.RelationshipProperty:6
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:7
msgid "See also:"
msgstr "参照："

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:9
#: sqlalchemy.orm.properties.ColumnProperty.Comparator:9
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:9
msgid ":class:`.PropComparator`"
msgstr "：クラス： `.PropComparator`"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:11
#: sqlalchemy.orm.interfaces.PropComparator:80
#: sqlalchemy.orm.properties.ColumnProperty.Comparator:11
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:13
msgid ":class:`.ColumnOperators`"
msgstr "：クラス： `.ColumnOperators`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:53
#: sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:13
#: sqlalchemy.orm.interfaces.PropComparator:82
#: sqlalchemy.orm.interfaces.PropComparator.op:53
#: sqlalchemy.orm.properties.ColumnProperty.Comparator:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:53
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:15
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:53
msgid ":ref:`types_operators`"
msgstr "：ref： `types_operators`"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:15
#: sqlalchemy.orm.interfaces.PropComparator:84
#: sqlalchemy.orm.properties.ColumnProperty.Comparator:15
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:17
msgid ":attr:`.TypeEngine.comparator_factory`"
msgstr "：attr： `.TypeEngine.comparator_factory`"

#: of sqlalchemy.orm.interfaces.PropComparator.adapt_to_entity:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.adapt_to_entity:1
msgid ""
"Return a copy of this PropComparator which will use the given "
":class:`.AliasedInsp` to produce corresponding expressions."
msgstr "対応する式を生成するために、与えられた：class： `.AliasedInsp`を使うPropComparatorのコピーを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.adapter:1
#: sqlalchemy.orm.interfaces.PropComparator.adapter:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.adapter:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.adapter:1
msgid ""
"Produce a callable that adapts column expressions to suit an aliased "
"version of this comparator."
msgstr "この比較器のエイリアス化されたバージョンに合わせて列式を適応させる呼び出し可能関数を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.all_:1
#: sqlalchemy.orm.interfaces.PropComparator.all_:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.all_:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_:1
msgid "Produce a :func:`~.expression.all_` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.all_`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.all_:4
#: sqlalchemy.orm.attributes.QueryableAttribute.any_:4
#: sqlalchemy.orm.interfaces.PropComparator.all_:4
#: sqlalchemy.orm.interfaces.PropComparator.any_:4
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.all_:4
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any_:4
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_:4
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_:4
msgid ""
"This operator is only appropriate against a scalar subquery object, or "
"for some backends an column expression that is against the ARRAY type, "
"e.g.::"
msgstr "この演算子は、スカラーサブクエリオブジェクトに対してのみ適切です。または、いくつかのバックエンドでは、ARRAY型の列式、たとえば::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.all_:16
#: sqlalchemy.orm.interfaces.PropComparator.all_:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.all_:16
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_:16
msgid ":func:`~.expression.all_` - standalone version"
msgstr "：func： `〜.expression.all_`  - スタンドアロン版"

#: of sqlalchemy.orm.attributes.QueryableAttribute.all_:18
#: sqlalchemy.orm.interfaces.PropComparator.all_:18
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.all_:18
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.all_:18
msgid ":func:`~.expression.any_` - ANY operator"
msgstr "：func： `〜.expression.any_`  -  ANY演算子"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any:1
#: sqlalchemy.orm.interfaces.PropComparator.any:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any:1
msgid ""
"Return true if this collection contains any member that meets the given "
"criterion."
msgstr "このコレクションに指定された条件を満たすメンバーが含まれている場合はtrueを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any:4
#: sqlalchemy.orm.interfaces.PropComparator.any:4
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any:4
msgid ""
"The usual implementation of ``any()`` is "
":meth:`.RelationshipProperty.Comparator.any`."
msgstr "`` any（） ``の通常の実装は：meth： `.RelationshipProperty.Comparator.any`です。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any
#: sqlalchemy.orm.attributes.QueryableAttribute.contains
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith
#: sqlalchemy.orm.attributes.QueryableAttribute.has
#: sqlalchemy.orm.attributes.QueryableAttribute.ilike
#: sqlalchemy.orm.attributes.QueryableAttribute.in_
#: sqlalchemy.orm.attributes.QueryableAttribute.like
#: sqlalchemy.orm.attributes.QueryableAttribute.op
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith
#: sqlalchemy.orm.interfaces.PropComparator.any
#: sqlalchemy.orm.interfaces.PropComparator.contains
#: sqlalchemy.orm.interfaces.PropComparator.endswith
#: sqlalchemy.orm.interfaces.PropComparator.has
#: sqlalchemy.orm.interfaces.PropComparator.ilike
#: sqlalchemy.orm.interfaces.PropComparator.in_
#: sqlalchemy.orm.interfaces.PropComparator.like
#: sqlalchemy.orm.interfaces.PropComparator.of_type
#: sqlalchemy.orm.interfaces.PropComparator.op
#: sqlalchemy.orm.interfaces.PropComparator.operate
#: sqlalchemy.orm.interfaces.PropComparator.startswith
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.has
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith
msgid "パラメータ"
msgstr "パラメータ"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any:7
#: sqlalchemy.orm.attributes.QueryableAttribute.has:7
#: sqlalchemy.orm.interfaces.PropComparator.any:7
#: sqlalchemy.orm.interfaces.PropComparator.has:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.has:7
msgid ""
"an optional ClauseElement formulated against the member class' table or "
"attributes."
msgstr "オプションのClauseElementは、メンバクラスの表または属性に対して定式化されています。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any:10
#: sqlalchemy.orm.attributes.QueryableAttribute.has:10
#: sqlalchemy.orm.interfaces.PropComparator.any:10
#: sqlalchemy.orm.interfaces.PropComparator.has:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.has:10
msgid ""
"key/value pairs corresponding to member class attribute names which will "
"be compared via equality to the corresponding values."
msgstr "対応する値と等しいかどうかで比較されるメンバークラス属性名に対応するキー/値のペア。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any_:1
#: sqlalchemy.orm.interfaces.PropComparator.any_:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any_:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_:1
msgid "Produce a :func:`~.expression.any_` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.any_`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any_:16
#: sqlalchemy.orm.interfaces.PropComparator.any_:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any_:16
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_:16
msgid ":func:`~.expression.any_` - standalone version"
msgstr "：func： `〜.expression.any_`  - スタンドアロン版"

#: of sqlalchemy.orm.attributes.QueryableAttribute.any_:18
#: sqlalchemy.orm.interfaces.PropComparator.any_:18
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.any_:18
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.any_:18
msgid ":func:`~.expression.all_` - ALL operator"
msgstr "：func： `〜.expression.all_`  - すべての演算子"

#: of sqlalchemy.orm.attributes.QueryableAttribute.asc:1
#: sqlalchemy.orm.interfaces.PropComparator.asc:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.asc:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.asc:1
msgid "Produce a :func:`~.expression.asc` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.asc`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.between:1
#: sqlalchemy.orm.interfaces.PropComparator.between:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.between:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.between:1
msgid ""
"Produce a :func:`~.expression.between` clause against the parent object, "
"given the lower and upper range."
msgstr "下位と上位の範囲を指定して、親オブジェクトに対してa：func： `〜.expression.between`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.bool_op:1
#: sqlalchemy.orm.interfaces.PropComparator.bool_op:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.bool_op:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.bool_op:1
msgid "Return a custom boolean operator."
msgstr "カスタムブール演算子を返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.bool_op:3
#: sqlalchemy.orm.interfaces.PropComparator.bool_op:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.bool_op:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.bool_op:3
msgid ""
"This method is shorthand for calling :meth:`.Operators.op` and passing "
"the :paramref:`.Operators.op.is_comparison` flag with True."
msgstr "このメソッドは、：meth： `.Operators.op`を呼び出し、：paramref：` .Operators.op.is_comparison`フラグをTrueで渡すことを簡略化しています。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.bool_op:12
#: sqlalchemy.orm.interfaces.PropComparator.bool_op:12
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.bool_op:12
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.bool_op:12
msgid ":meth:`.Operators.op`"
msgstr "：meth： `.Operators.op`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.collate:1
#: sqlalchemy.orm.interfaces.PropComparator.collate:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.collate:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.collate:1
msgid ""
"Produce a :func:`~.expression.collate` clause against the parent object, "
"given the collation string."
msgstr "照合文字列を指定して、親オブジェクトに対してa：func： `〜.expression.collat​​e`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.collate:6
#: sqlalchemy.orm.interfaces.PropComparator.collate:6
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.collate:6
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.collate:6
msgid ":func:`~.expression.collate`"
msgstr "：func： `〜.expression.collat​​e`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.concat:1
#: sqlalchemy.orm.interfaces.PropComparator.concat:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.concat:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.concat:1
msgid "Implement the 'concat' operator."
msgstr "&#39;concat&#39;演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.concat:3
#: sqlalchemy.orm.interfaces.PropComparator.concat:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.concat:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.concat:3
msgid ""
"In a column context, produces the clause ``a || b``, or uses the "
"``concat()`` operator on MySQL."
msgstr "列コンテキストでは、 `` a || MySQLで `` concat（） ``演算子を使用します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:1
#: sqlalchemy.orm.interfaces.PropComparator.contains:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:1
msgid "Implement the 'contains' operator."
msgstr "&#39;contains&#39;演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:3
#: sqlalchemy.orm.interfaces.PropComparator.contains:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:3
msgid ""
"Produces a LIKE expression that tests against a match for the middle of a"
" string value::"
msgstr "文字列値の真ん中との一致に対してテストするLIKE式を生成します::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:8
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:8
#: sqlalchemy.orm.attributes.QueryableAttribute.ilike:11
#: sqlalchemy.orm.attributes.QueryableAttribute.like:7
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:8
#: sqlalchemy.orm.interfaces.PropComparator.contains:8
#: sqlalchemy.orm.interfaces.PropComparator.endswith:8
#: sqlalchemy.orm.interfaces.PropComparator.ilike:11
#: sqlalchemy.orm.interfaces.PropComparator.like:7
#: sqlalchemy.orm.interfaces.PropComparator.startswith:8
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:8
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:8
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:11
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:8
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:8
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:11
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:7
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:8
msgid "E.g.::"
msgstr "例えば：："

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:13
#: sqlalchemy.orm.interfaces.PropComparator.contains:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:13
msgid ""
"Since the operator uses ``LIKE``, wildcard characters ``\"%\"`` and "
"``\"_\"`` that are present inside the <other> expression will behave like"
" wildcards as well.   For literal string values, the "
":paramref:`.ColumnOperators.contains.autoescape` flag may be set to "
"``True`` to apply escaping to occurences of these characters within the "
"string value so that they match as themselves and not as wildcard "
"characters.  Alternatively, the "
":paramref:`.ColumnOperators.contains.escape` parameter will establish a "
"given character as an escape character which can be of use when the "
"target expression is not a literal string."
msgstr "演算子は `` LIKE``を使用するので、演算子の中にはワイルドカード文字 `` \ &quot;％\&quot; ``と `` \ &quot;_ \&quot; `` <other>式はワイルドカードのようにも動作します。リテラル文字列値の場合、：paramref： `.ColumnOperators.contains.autoescape`フラグを` `True``に設定すると、文字列値内でこれらの文字がエスケープされ、ワイルドカード文字としてではなく一致するようになります。あるいは、：paramref： `.ColumnOperators.contains.escape`パラメータは、指定された文字をエスケープ文字として確立します。これは、ターゲット式がリテラル文字列でない場合に使用できます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:24
#: sqlalchemy.orm.interfaces.PropComparator.contains:24
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:24
msgid ""
"expression to be compared.   This is usually a plain string value, but "
"can also be an arbitrary SQL expression.  LIKE wildcard characters ``%`` "
"and ``_`` are not escaped by default unless the "
":paramref:`.ColumnOperators.contains.autoescape` flag is set to True."
msgstr "比較される式。これは普通は普通の文字列値ですが、任意のSQL式でもかまいません。 LIKEワイルドカード文字 ``％ ``と `` _``は、：paramref： `.ColumnOperators.contains.autoescape`フラグがTrueに設定されていない限り、デフォルトでエスケープされません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:30
#: sqlalchemy.orm.interfaces.PropComparator.contains:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:30
msgid ""
"boolean; when True, establishes an escape character within the LIKE "
"expression, then applies it to all occurrences of ``\"%\"``, ``\"_\"`` "
"and the escape character itself within the comparison value, which is "
"assumed to be a literal string and not a SQL expression.  An expression "
"such as::    somecolumn.contains(\"foo%bar\", autoescape=True)  Will "
"render as::    somecolumn LIKE '%' || :param || '%' ESCAPE '/'  With the "
"value of :param as ``\"foo/%bar\"``.  .. versionadded:: 1.2  .. "
"versionchanged:: 1.2.0 The   "
":paramref:`.ColumnOperators.contains.autoescape` parameter is    now a "
"simple boolean rather than a character; the escape    character itself is"
" also escaped, and defaults to a forwards    slash, which itself can be "
"customized using the    :paramref:`.ColumnOperators.contains.escape` "
"parameter."
msgstr "ブール値。 Trueの場合、LIKE式内にエスケープ文字を設定し、それを比較値の中の `` \ &quot;％\&quot; ``、 `` \ &quot;_ \&quot; ``とエスケープ文字自体のすべての出現に適用します。 SQL式ではなくリテラル文字列とみなされます。 :: somecolumn.contains（\ &quot;foo％bar \&quot;、autoescape = True）のような式は次のようにレンダリングします:: somecolumn LIKE &#39;％&#39; || ：param || &#39;％&#39; ESCAPE &#39;/&#39;：paramの値を `` \ &quot;foo /％bar \&quot; ``として指定します。 .. versionadded :: 1.2 .. versionchanged :: 1.2.0：paramref： `.ColumnOperators.contains.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.contains.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:30
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:30
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:30
#: sqlalchemy.orm.interfaces.PropComparator.contains:30
#: sqlalchemy.orm.interfaces.PropComparator.endswith:30
#: sqlalchemy.orm.interfaces.PropComparator.startswith:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:30
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:30
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:30
msgid ""
"boolean; when True, establishes an escape character within the LIKE "
"expression, then applies it to all occurrences of ``\"%\"``, ``\"_\"`` "
"and the escape character itself within the comparison value, which is "
"assumed to be a literal string and not a SQL expression."
msgstr "ブール値。 Trueの場合、LIKE式内にエスケープ文字を設定し、それを比較値の中の `` \ &quot;％\&quot; ``、 `` \ &quot;_ \&quot; ``とエスケープ文字自体のすべての出現に適用します。 SQL式ではなくリテラル文字列とみなされます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:36
#: sqlalchemy.orm.attributes.QueryableAttribute.contains:61
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:36
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:61
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:36
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:61
#: sqlalchemy.orm.interfaces.PropComparator.contains:36
#: sqlalchemy.orm.interfaces.PropComparator.contains:61
#: sqlalchemy.orm.interfaces.PropComparator.endswith:36
#: sqlalchemy.orm.interfaces.PropComparator.endswith:61
#: sqlalchemy.orm.interfaces.PropComparator.startswith:36
#: sqlalchemy.orm.interfaces.PropComparator.startswith:61
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:36
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:61
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:36
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:61
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:36
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:61
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:36
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:61
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:36
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:61
msgid "An expression such as::"
msgstr "::のような表現"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:40
#: sqlalchemy.orm.attributes.QueryableAttribute.contains:65
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:40
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:65
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:40
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:65
#: sqlalchemy.orm.interfaces.PropComparator.contains:40
#: sqlalchemy.orm.interfaces.PropComparator.contains:65
#: sqlalchemy.orm.interfaces.PropComparator.endswith:40
#: sqlalchemy.orm.interfaces.PropComparator.endswith:65
#: sqlalchemy.orm.interfaces.PropComparator.startswith:40
#: sqlalchemy.orm.interfaces.PropComparator.startswith:65
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:40
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:65
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:40
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:65
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:40
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:65
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:40
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:65
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:40
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:65
msgid "Will render as::"
msgstr "レンダリングする::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:44
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:44
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:44
#: sqlalchemy.orm.interfaces.PropComparator.contains:44
#: sqlalchemy.orm.interfaces.PropComparator.endswith:44
#: sqlalchemy.orm.interfaces.PropComparator.startswith:44
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:44
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:44
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:44
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:44
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:44
msgid "With the value of :param as ``\"foo/%bar\"``."
msgstr "：paramを `` \ &quot;foo /％bar \&quot; ``として指定します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:48
#: sqlalchemy.orm.interfaces.PropComparator.contains:48
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:48
msgid ""
"The :paramref:`.ColumnOperators.contains.autoescape` parameter is  now a "
"simple boolean rather than a character; the escape  character itself is "
"also escaped, and defaults to a forwards  slash, which itself can be "
"customized using the  :paramref:`.ColumnOperators.contains.escape` "
"parameter."
msgstr "：paramref： `.ColumnOperators.contains.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.contains.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:55
#: sqlalchemy.orm.interfaces.PropComparator.contains:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:55
msgid ""
"a character which when given will render with the ``ESCAPE`` keyword to "
"establish that character as the escape character.  This character can "
"then be placed preceding occurrences of ``%`` and ``_`` to allow them to "
"act as themselves and not wildcard characters.  An expression such as::"
"    somecolumn.contains(\"foo/%bar\", escape=\"^\")  Will render as::    "
"somecolumn LIKE '%' || :param || '%' ESCAPE '^'  The parameter may also "
"be combined with :paramref:`.ColumnOperators.contains.autoescape`::    "
"somecolumn.contains(\"foo%bar^bat\", escape=\"^\", autoescape=True)  "
"Where above, the given literal parameter will be converted to "
"``\"foo^%bar^^bat\"`` before being passed to the database."
msgstr "その文字をエスケープ文字として確立するために `` ESCAPE``キーワードでレンダリングされる文字を返します。この文字を ``％ ``と `` _``の前に置くことで、ワイルドカード文字ではなく自分自身として動作させることができます。 :: somecolumn.contains（\ &quot;foo /％bar \&quot;、エスケープ= \ &quot;^ \&quot;）などの式は、:: somecolumn LIKE &#39;％&#39; ||をレンダリングします。 ：param || &#39;％&#39; ESCAPE &#39;^&#39;パラメタ： `.ColumnOperators.contains.autoescape` :: somecolumn.contains（\&quot; foo％bar ^ bat \ &quot;、エスケープ= \&quot; ^ \ &quot;、autoescape = True）上記の場合、与えられたリテラルパラメータはデータベースに渡される前に `` \ &quot;foo ^％bar ^^ bat \&quot; ``に変換されます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:55
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:55
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:55
#: sqlalchemy.orm.interfaces.PropComparator.contains:55
#: sqlalchemy.orm.interfaces.PropComparator.endswith:55
#: sqlalchemy.orm.interfaces.PropComparator.startswith:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:55
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:55
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:55
msgid ""
"a character which when given will render with the ``ESCAPE`` keyword to "
"establish that character as the escape character.  This character can "
"then be placed preceding occurrences of ``%`` and ``_`` to allow them to "
"act as themselves and not wildcard characters."
msgstr "その文字をエスケープ文字として確立するために `` ESCAPE``キーワードでレンダリングされる文字を返します。この文字を ``％ ``と `` _``の前に置くことで、ワイルドカード文字ではなく自分自身として動作させることができます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:69
#: sqlalchemy.orm.interfaces.PropComparator.contains:69
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:69
msgid ""
"The parameter may also be combined with "
":paramref:`.ColumnOperators.contains.autoescape`::"
msgstr "パラメータは以下のものと組み合わせることもできます：paramref： `.ColumnOperators.contains.autoescape` ::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:74
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:74
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:74
#: sqlalchemy.orm.interfaces.PropComparator.contains:74
#: sqlalchemy.orm.interfaces.PropComparator.endswith:74
#: sqlalchemy.orm.interfaces.PropComparator.startswith:74
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:74
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:74
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:74
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:74
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:74
msgid ""
"Where above, the given literal parameter will be converted to "
"``\"foo^%bar^^bat\"`` before being passed to the database."
msgstr "上記の場合、与えられたリテラルパラメータはデータベースに渡される前に `` \ &quot;foo ^％bar ^^ bat \&quot; ``に変換されます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:79
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:79
#: sqlalchemy.orm.interfaces.PropComparator.contains:79
#: sqlalchemy.orm.interfaces.PropComparator.endswith:79
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:79
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:79
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:79
msgid ":meth:`.ColumnOperators.startswith`"
msgstr "：meth： `.ColumnOperators.startswith`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:81
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:79
#: sqlalchemy.orm.interfaces.PropComparator.contains:81
#: sqlalchemy.orm.interfaces.PropComparator.startswith:79
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:81
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:79
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:79
msgid ":meth:`.ColumnOperators.endswith`"
msgstr "：meth： `.ColumnOperators.endswith`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.contains:83
#: sqlalchemy.orm.attributes.QueryableAttribute.endswith:83
#: sqlalchemy.orm.attributes.QueryableAttribute.ilike:24
#: sqlalchemy.orm.attributes.QueryableAttribute.notlike:10
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:83
#: sqlalchemy.orm.interfaces.PropComparator.contains:83
#: sqlalchemy.orm.interfaces.PropComparator.endswith:83
#: sqlalchemy.orm.interfaces.PropComparator.ilike:24
#: sqlalchemy.orm.interfaces.PropComparator.notlike:10
#: sqlalchemy.orm.interfaces.PropComparator.startswith:83
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.contains:83
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:83
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:24
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notlike:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:83
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:83
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:24
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notlike:10
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:83
msgid ":meth:`.ColumnOperators.like`"
msgstr "：meth： `.ColumnOperators.like`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.desc:1
#: sqlalchemy.orm.interfaces.PropComparator.desc:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.desc:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.desc:1
msgid "Produce a :func:`~.expression.desc` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.desc`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.distinct:1
#: sqlalchemy.orm.interfaces.PropComparator.distinct:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.distinct:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.distinct:1
msgid "Produce a :func:`~.expression.distinct` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.distinct`節を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:1
#: sqlalchemy.orm.interfaces.PropComparator.endswith:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:1
msgid "Implement the 'endswith' operator."
msgstr "&#39;endswith&#39;演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:3
#: sqlalchemy.orm.interfaces.PropComparator.endswith:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:3
msgid ""
"Produces a LIKE expression that tests against a match for the end of a "
"string value::"
msgstr "文字列値の終わりに一致するかどうかをテストするLIKE式を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:13
#: sqlalchemy.orm.interfaces.PropComparator.endswith:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:13
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:13
msgid ""
"Since the operator uses ``LIKE``, wildcard characters ``\"%\"`` and "
"``\"_\"`` that are present inside the <other> expression will behave like"
" wildcards as well.   For literal string values, the "
":paramref:`.ColumnOperators.endswith.autoescape` flag may be set to "
"``True`` to apply escaping to occurences of these characters within the "
"string value so that they match as themselves and not as wildcard "
"characters.  Alternatively, the "
":paramref:`.ColumnOperators.endswith.escape` parameter will establish a "
"given character as an escape character which can be of use when the "
"target expression is not a literal string."
msgstr "演算子は `` LIKE``を使用するので、演算子の中にはワイルドカード文字 `` \ &quot;％\&quot; ``と `` \ &quot;_ \&quot; `` <other>式はワイルドカードのようにも動作します。リテラル文字列値の場合、：paramref： `.ColumnOperators.endswith.autoescape`フラグを` `True``に設定して、文字列値内のこれらの文字のエスケープを適用し、ワイルドカード文字ではなく一致するようにすることができます。代わりに、：paramref： `.ColumnOperators.endswith.escape`パラメータは、ターゲット式がリテラル文字列でない場合に使用できるエスケープ文字として、指定された文字を確立します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:24
#: sqlalchemy.orm.interfaces.PropComparator.endswith:24
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:24
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:24
msgid ""
"expression to be compared.   This is usually a plain string value, but "
"can also be an arbitrary SQL expression.  LIKE wildcard characters ``%`` "
"and ``_`` are not escaped by default unless the "
":paramref:`.ColumnOperators.endswith.autoescape` flag is set to True."
msgstr "比較される式。これは普通は普通の文字列値ですが、任意のSQL式でもかまいません。 LIKEワイルドカード文字 ``％ ``と `` _``は、：paramref： `.ColumnOperators.endswith.autoescape`フラグがTrueに設定されていない限り、デフォルトでエスケープされません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:30
#: sqlalchemy.orm.interfaces.PropComparator.endswith:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:30
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:30
msgid ""
"boolean; when True, establishes an escape character within the LIKE "
"expression, then applies it to all occurrences of ``\"%\"``, ``\"_\"`` "
"and the escape character itself within the comparison value, which is "
"assumed to be a literal string and not a SQL expression.  An expression "
"such as::    somecolumn.endswith(\"foo%bar\", autoescape=True)  Will "
"render as::    somecolumn LIKE '%' || :param ESCAPE '/'  With the value "
"of :param as ``\"foo/%bar\"``.  .. versionadded:: 1.2  .. "
"versionchanged:: 1.2.0 The   "
":paramref:`.ColumnOperators.endswith.autoescape` parameter is    now a "
"simple boolean rather than a character; the escape    character itself is"
" also escaped, and defaults to a forwards    slash, which itself can be "
"customized using the    :paramref:`.ColumnOperators.endswith.escape` "
"parameter."
msgstr "ブール値。 Trueの場合、LIKE式内にエスケープ文字を設定し、それを比較値の中の `` \ &quot;％\&quot; ``、 `` \ &quot;_ \&quot; ``とエスケープ文字自体のすべての出現に適用します。 SQL式ではなくリテラル文字列とみなされます。 :: somecolumn.endswith（\ &quot;foo％bar \&quot;、autoescape = True）のような式は次のようにレンダリングします:: somecolumn LIKE &#39;％&#39; || ：param ESCAPE &#39;/&#39;：paramの値を `` \ &quot;foo /％bar \&quot; ``として指定します。 .. versionadded :: 1.2 .. versionchanged :: 1.2.0：paramref： `.ColumnOperators.endswith.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.endswith.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:48
#: sqlalchemy.orm.interfaces.PropComparator.endswith:48
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:48
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:48
msgid ""
"The :paramref:`.ColumnOperators.endswith.autoescape` parameter is  now a "
"simple boolean rather than a character; the escape  character itself is "
"also escaped, and defaults to a forwards  slash, which itself can be "
"customized using the  :paramref:`.ColumnOperators.endswith.escape` "
"parameter."
msgstr "：paramref： `.ColumnOperators.endswith.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.endswith.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:55
#: sqlalchemy.orm.interfaces.PropComparator.endswith:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:55
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:55
msgid ""
"a character which when given will render with the ``ESCAPE`` keyword to "
"establish that character as the escape character.  This character can "
"then be placed preceding occurrences of ``%`` and ``_`` to allow them to "
"act as themselves and not wildcard characters.  An expression such as::"
"    somecolumn.endswith(\"foo/%bar\", escape=\"^\")  Will render as::    "
"somecolumn LIKE '%' || :param ESCAPE '^'  The parameter may also be "
"combined with :paramref:`.ColumnOperators.endswith.autoescape`::    "
"somecolumn.endswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)  "
"Where above, the given literal parameter will be converted to "
"``\"foo^%bar^^bat\"`` before being passed to the database."
msgstr "その文字をエスケープ文字として確立するために `` ESCAPE``キーワードでレンダリングされる文字を返します。この文字を ``％ ``と `` _``の前に置くことで、ワイルドカード文字ではなく自分自身として動作させることができます。 :: somecolumn.endswith（\ &quot;foo /％bar \&quot;、エスケープ= \ &quot;^ \&quot;）などの式は、:: somecolumn LIKE &#39;％&#39; ||をレンダリングします。 ：paramref： `.ColumnOperators.endswith.autoescape` :: somecolumn.endswith（\&quot; foo％bar ^ bat \ &quot;、エスケープ= \&quot; ^ \ &quot;、autoescape = True）上記の場合、与えられたリテラルパラメータはデータベースに渡される前に `` \ &quot;foo ^％bar ^^ bat \&quot; ``に変換されます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:69
#: sqlalchemy.orm.interfaces.PropComparator.endswith:69
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:69
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:69
msgid ""
"The parameter may also be combined with "
":paramref:`.ColumnOperators.endswith.autoescape`::"
msgstr "パラメタは以下のものと組み合わせることもできます：paramref： `.ColumnOperators.endswith.autoescape` ::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.endswith:81
#: sqlalchemy.orm.attributes.QueryableAttribute.startswith:81
#: sqlalchemy.orm.interfaces.PropComparator.endswith:81
#: sqlalchemy.orm.interfaces.PropComparator.startswith:81
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.endswith:81
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:81
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.endswith:81
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:81
msgid ":meth:`.ColumnOperators.contains`"
msgstr "：meth： `.ColumnOperators.contains`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.has:1
#: sqlalchemy.orm.interfaces.PropComparator.has:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.has:1
msgid ""
"Return true if this element references a member which meets the given "
"criterion."
msgstr "この要素が指定された基準を満たすメンバーを参照する場合はtrueを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.has:4
#: sqlalchemy.orm.interfaces.PropComparator.has:4
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.has:4
msgid ""
"The usual implementation of ``has()`` is "
":meth:`.RelationshipProperty.Comparator.has`."
msgstr "`` has（） ``の通常の実装は：meth： `.RelationshipProperty.Comparator.has`です。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:1
#: sqlalchemy.orm.interfaces.PropComparator.ilike:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:1
msgid "Implement the ``ilike`` operator, e.g. case insensitive LIKE."
msgstr "`` ilike``演算子を実装します。例えば、大文字小文字を区別しないLIKEです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:3
#: sqlalchemy.orm.interfaces.PropComparator.ilike:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:3
msgid "In a column context, produces an expression either of the form::"
msgstr "列コンテキストでは、次の形式の式を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:7
#: sqlalchemy.orm.interfaces.PropComparator.ilike:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:7
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:7
msgid "Or on backends that support the ILIKE operator::"
msgstr "ILIKE演算子をサポートするバックエンドでは::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:16
#: sqlalchemy.orm.attributes.QueryableAttribute.like:12
#: sqlalchemy.orm.interfaces.PropComparator.ilike:16
#: sqlalchemy.orm.interfaces.PropComparator.like:12
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:12
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:16
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:12
msgid "expression to be compared"
msgstr "比較される式"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:17
#: sqlalchemy.orm.interfaces.PropComparator.ilike:17
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:17
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:17
msgid ""
"optional escape character, renders the ``ESCAPE`` keyword, e.g.::    "
"somecolumn.ilike(\"foo/%bar\", escape=\"/\")"
msgstr "オプションのエスケープ文字は、:: somecolumn.ilike（\ &quot;foo /％bar \&quot;、escape = \ &quot;/ \&quot;）などの `` ESCAPE``キーワードをレンダリングします。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.ilike:17
#: sqlalchemy.orm.attributes.QueryableAttribute.like:13
#: sqlalchemy.orm.interfaces.PropComparator.ilike:17
#: sqlalchemy.orm.interfaces.PropComparator.like:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.ilike:17
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:13
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.ilike:17
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:13
msgid "optional escape character, renders the ``ESCAPE`` keyword, e.g.::"
msgstr "オプションのエスケープ文字で、 `` ESCAPE``キーワードをレンダリングします。例えば::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:1
#: sqlalchemy.orm.interfaces.PropComparator.in_:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:1
msgid "Implement the ``in`` operator."
msgstr "`` in``演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:3
#: sqlalchemy.orm.interfaces.PropComparator.in_:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:3
msgid "In a column context, produces the clause ``column IN <other>``."
msgstr "列コンテキストでは、 `` column IN <other> ``。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:5
#: sqlalchemy.orm.interfaces.PropComparator.in_:5
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:5
msgid "The given parameter ``other`` may be:"
msgstr "与えられたパラメータ `` other``は次のようになります："

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:7
#: sqlalchemy.orm.interfaces.PropComparator.in_:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:7
msgid "A list of literal values, e.g.::"
msgstr "リテラル値のリスト（例：::）"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:11
#: sqlalchemy.orm.interfaces.PropComparator.in_:11
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:11
msgid ""
"In this calling form, the list of items is converted to a set of bound "
"parameters the same length as the list given::"
msgstr "この呼び出し形式では、アイテムのリストは、与えられたリストと同じ長さのバインドされたパラメータのセットに変換されます::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:16
#: sqlalchemy.orm.interfaces.PropComparator.in_:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:16
msgid "An empty list, e.g.::"
msgstr "空のリスト、例えば::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:20
#: sqlalchemy.orm.interfaces.PropComparator.in_:20
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:20
msgid ""
"In this calling form, the expression renders a \"false\" expression, "
"e.g.::"
msgstr "この呼び出し形式では、式は\ &quot;false \&quot;式をレンダリングします。たとえば、::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:25
#: sqlalchemy.orm.interfaces.PropComparator.in_:25
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:25
msgid ""
"This \"false\" expression has historically had different behaviors in "
"older SQLAlchemy versions, see "
":paramref:`.create_engine.empty_in_strategy` for behavioral options."
msgstr "この古くからのSQLAlchemyのバージョンでは、この &quot;偽の&quot;表現は異なった振る舞いをしています。paramref： `.create_engine.empty_in_strategy`は動作オプションです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:29
#: sqlalchemy.orm.interfaces.PropComparator.in_:29
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:29
msgid "simplified the behavior of \"empty in\" expressions"
msgstr "\ &quot;空の\&quot;式の動作を単純化"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:32
#: sqlalchemy.orm.interfaces.PropComparator.in_:32
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:32
msgid ""
"A bound parameter, e.g. :func:`.bindparam`, may be used if it includes "
"the :paramref:`.bindparam.expanding` flag::"
msgstr "もし：paramref： `.bindparam.expanding`フラグを含んでいれば、バインドされたパラメータ、例えば：func：` .bindparam`を使うことができます："

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:37
#: sqlalchemy.orm.interfaces.PropComparator.in_:37
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:37
msgid ""
"In this calling form, the expression renders a special non-SQL "
"placeholder expression that looks like::"
msgstr "この呼び出し形式では、次のような特別な非SQLプレースホルダ式がレンダリングされます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:42
#: sqlalchemy.orm.interfaces.PropComparator.in_:42
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:42
msgid ""
"This placeholder expression is intercepted at statement execution time to"
" be converted into the variable number of bound parameter form "
"illustrated earlier.   If the statement were executed as::"
msgstr "このプレースホルダー式は、ステートメントの実行時にインターセプトされ、前述の可変数のバインドされたパラメーター・フォームに変換されます。文が次のように実行された場合："

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:48
#: sqlalchemy.orm.interfaces.PropComparator.in_:48
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:48
msgid "The database would be passed a bound parameter for each value::"
msgstr "データベースには各値のバインドされたパラメータが渡されます::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:52
#: sqlalchemy.orm.interfaces.PropComparator.in_:52
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:52
msgid "added \"expanding\" bound parameters"
msgstr "バインドされたパラメータを &quot;展開する&quot;ことを追加しました"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:54
#: sqlalchemy.orm.interfaces.PropComparator.in_:54
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:54
msgid ""
"If an empty list is passed, a special \"empty list\" expression, which is"
" specific to the database in use, is rendered.  On SQLite this would be::"
msgstr "空のリストが渡されると、使用中のデータベースに固有の特殊な &quot;空のリスト&quot;表現がレンダリングされます。 SQLiteではこれは::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:60
#: sqlalchemy.orm.interfaces.PropComparator.in_:60
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:60
msgid "\"expanding\" bound parameters now support empty lists"
msgstr "\ &quot;expanded \&quot;バインドされたパラメータは空のリストをサポートするようになりました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:63
#: sqlalchemy.orm.interfaces.PropComparator.in_:63
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:63
msgid "a :func:`.select` construct, which is usually a correlated scalar select::"
msgstr "a：func： `.select`構造体。これは通常、相関スカラー選択::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:73
#: sqlalchemy.orm.interfaces.PropComparator.in_:73
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:73
msgid "In this calling form, :meth:`.ColumnOperators.in_` renders as given::"
msgstr "この呼び出し形式では、：meth： `.ColumnOperators.in_`は与えられたとおりにレンダリングします::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.in_:78
#: sqlalchemy.orm.interfaces.PropComparator.in_:78
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.in_:78
msgid ""
"a list of literals, a :func:`.select` construct, or a :func:`.bindparam` "
"construct that includes the :paramref:`.bindparam.expanding` flag set to "
"True."
msgstr "リテラルのリスト、a：func： `.select`構造体、または：paramref：` .bindparam.expanding`フラグがTrueに設定されているa：func： `.bindparam`構造体です。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.is_:1
#: sqlalchemy.orm.interfaces.PropComparator.is_:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.is_:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_:1
msgid "Implement the ``IS`` operator."
msgstr "`` IS``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.is_:3
#: sqlalchemy.orm.interfaces.PropComparator.is_:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.is_:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_:3
msgid ""
"Normally, ``IS`` is generated automatically when comparing to a value of "
"``None``, which resolves to ``NULL``.  However, explicit usage of ``IS`` "
"may be desirable if comparing to boolean values on certain platforms."
msgstr "通常、 `` IS``は `` None``の値と比較すると自動的に生成され、 `` NULL``に解決されます。しかし、特定のプラットフォーム上のブール値と比較すると、明示的に &quot;IS&quot;を使用することが望ましい場合があります。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.is_:10
#: sqlalchemy.orm.interfaces.PropComparator.is_:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.is_:10
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_:10
msgid ":meth:`.ColumnOperators.isnot`"
msgstr "：meth： `.ColumnOperators.isnot`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.is_distinct_from:1
#: sqlalchemy.orm.interfaces.PropComparator.is_distinct_from:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.is_distinct_from:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_distinct_from:1
msgid "Implement the ``IS DISTINCT FROM`` operator."
msgstr "`` IS DISTINCT FROM``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.is_distinct_from:3
#: sqlalchemy.orm.interfaces.PropComparator.is_distinct_from:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.is_distinct_from:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.is_distinct_from:3
msgid ""
"Renders \"a IS DISTINCT FROM b\" on most platforms; on some such as "
"SQLite may render \"a IS NOT b\"."
msgstr "ほとんどのプラットフォームで\ &quot;a DISABLEからFROM \&quot;をレンダリングします。そのようなSQLiteは\ &quot;a IS NOT b \&quot;をレンダリングすることがあります。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.isnot:1
#: sqlalchemy.orm.interfaces.PropComparator.isnot:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot:1
msgid "Implement the ``IS NOT`` operator."
msgstr "`` IS NOT``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.isnot:3
#: sqlalchemy.orm.interfaces.PropComparator.isnot:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot:3
msgid ""
"Normally, ``IS NOT`` is generated automatically when comparing to a value"
" of ``None``, which resolves to ``NULL``.  However, explicit usage of "
"``IS NOT`` may be desirable if comparing to boolean values on certain "
"platforms."
msgstr "通常、 `` NOT &#39;&#39;は `` NULL``に解決する `` None``の値と比較すると自動的に生成されます。しかし、特定のプラットフォーム上のブール値と比較した場合、明示的に &quot;IS NOT&quot;を使用することが望ましいかもしれません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.isnot:10
#: sqlalchemy.orm.interfaces.PropComparator.isnot:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot:10
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot:10
msgid ":meth:`.ColumnOperators.is_`"
msgstr "：meth： `.ColumnOperators.is_`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.isnot_distinct_from:1
#: sqlalchemy.orm.interfaces.PropComparator.isnot_distinct_from:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot_distinct_from:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot_distinct_from:1
msgid "Implement the ``IS NOT DISTINCT FROM`` operator."
msgstr "`` IS NOT DISTINCT FROM``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.isnot_distinct_from:3
#: sqlalchemy.orm.interfaces.PropComparator.isnot_distinct_from:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.isnot_distinct_from:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.isnot_distinct_from:3
msgid ""
"Renders \"a IS NOT DISTINCT FROM b\" on most platforms; on some such as "
"SQLite may render \"a IS b\"."
msgstr "ほとんどのプラットフォームで\ &quot;a is not DISTINCT FROM b \&quot;をレンダリングします。そのようなSQLiteは\ &quot;a IS b \&quot;をレンダリングします。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.like:1
#: sqlalchemy.orm.interfaces.PropComparator.like:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:1
msgid "Implement the ``like`` operator."
msgstr "`` like``演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.like:3
#: sqlalchemy.orm.interfaces.PropComparator.like:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:3
msgid "In a column context, produces the expression::"
msgstr "列コンテキストでは、次の式を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.like:13
#: sqlalchemy.orm.interfaces.PropComparator.like:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:13
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:13
msgid ""
"optional escape character, renders the ``ESCAPE`` keyword, e.g.::    "
"somecolumn.like(\"foo/%bar\", escape=\"/\")"
msgstr "オプションのエスケープ文字は、:: somecolumn.like（\ &quot;foo /％bar \&quot;、escape = \ &quot;/ \&quot;）などの `` ESCAPE``キーワードをレンダリングします。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.like:20
#: sqlalchemy.orm.attributes.QueryableAttribute.notilike:10
#: sqlalchemy.orm.interfaces.PropComparator.like:20
#: sqlalchemy.orm.interfaces.PropComparator.notilike:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.like:20
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notilike:10
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.like:20
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notilike:10
msgid ":meth:`.ColumnOperators.ilike`"
msgstr "：meth： `.ColumnOperators.ilike`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:1
#: sqlalchemy.orm.interfaces.PropComparator.match:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:1
msgid "Implements a database-specific 'match' operator."
msgstr "データベース固有の &#39;match&#39;演算子を実装します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:3
#: sqlalchemy.orm.interfaces.PropComparator.match:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:3
msgid ""
":meth:`~.ColumnOperators.match` attempts to resolve to a MATCH-like "
"function or operator provided by the backend. Examples include:"
msgstr "：meth： `〜.ColumnOperators.match`は、バックエンドによって提供されるMATCHのような関数または演算子への解決を試みます。例としては、"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:7
#: sqlalchemy.orm.interfaces.PropComparator.match:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:7
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:7
msgid "PostgreSQL - renders ``x @@ to_tsquery(y)``"
msgstr "PostgreSQL  -  `` @ @ to_tsquery（y） ``をレンダリングします。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:8
#: sqlalchemy.orm.interfaces.PropComparator.match:8
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:8
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:8
msgid "MySQL - renders ``MATCH (x) AGAINST (y IN BOOLEAN MODE)``"
msgstr "MySQLは `` MATCH（x）を反対にします（ブーリアンモードではy） ``"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:9
#: sqlalchemy.orm.interfaces.PropComparator.match:9
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:9
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:9
msgid "Oracle - renders ``CONTAINS(x, y)``"
msgstr "Oracleは `` CONTAINS（x、y） ``をレンダリングします"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:10
#: sqlalchemy.orm.interfaces.PropComparator.match:10
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:10
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:10
msgid "other backends may provide special implementations."
msgstr "他のバックエンドは特別な実装を提供するかもしれません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.match:11
#: sqlalchemy.orm.interfaces.PropComparator.match:11
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.match:11
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.match:11
msgid ""
"Backends without any special implementation will emit the operator as "
"\"MATCH\".  This is compatible with SQlite, for example."
msgstr "特別な実装をしないバックエンドは、演算子を\ &quot;MATCH \&quot;として出力します。これは、例えば、SQliteと互換性があります。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notilike:1
#: sqlalchemy.orm.interfaces.PropComparator.notilike:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notilike:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notilike:1
msgid "implement the ``NOT ILIKE`` operator."
msgstr "`` NOT ILIKE``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notilike:3
#: sqlalchemy.orm.interfaces.PropComparator.notilike:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notilike:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notilike:3
msgid ""
"This is equivalent to using negation with :meth:`.ColumnOperators.ilike`,"
" i.e. ``~x.ilike(y)``."
msgstr "これは：meth： `.ColumnOperators.ilike`、つまり` `〜x.ilike（y）` `で否定を使うのと同じです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notin_:1
#: sqlalchemy.orm.interfaces.PropComparator.notin_:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_:1
msgid "implement the ``NOT IN`` operator."
msgstr "`` NOT IN``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notin_:3
#: sqlalchemy.orm.interfaces.PropComparator.notin_:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_:3
msgid ""
"This is equivalent to using negation with :meth:`.ColumnOperators.in_`, "
"i.e. ``~x.in_(y)``."
msgstr "これは：meth： `.ColumnOperators.in_`、つまり` `〜x.in_（y）` `で否定を使うのと同じです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notin_:6
#: sqlalchemy.orm.interfaces.PropComparator.notin_:6
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_:6
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_:6
msgid ""
"In the case that ``other`` is an empty sequence, the compiler produces an"
" \"empty not in\" expression.   This defaults to the expression \"1 = 1\""
" to produce true in all cases.  The "
":paramref:`.create_engine.empty_in_strategy` may be used to alter this "
"behavior."
msgstr "`` other``が空のシーケンスである場合、コンパイラは\ &quot;空ではない\&quot;という式を生成します。これは、すべての場合に真を生成するために、デフォルトでは &quot;1 = 1&quot;という表現になります：paramref： `.create_engine.empty_in_strategy`を使ってこの動作を変更することができます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notin_:12
#: sqlalchemy.orm.interfaces.PropComparator.notin_:12
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_:12
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_:12
msgid ""
"The :meth:`.ColumnOperators.in_` and :meth:`.ColumnOperators.notin_` "
"operators now produce a \"static\" expression for an empty IN sequence by"
" default."
msgstr "：meth： `.ColumnOperators.in_`と：meth：` .ColumnOperators.notin_`演算子は、デフォルトで空のINシーケンスのための\ &quot;静的\&quot;式を生成するようになりました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notin_:19
#: sqlalchemy.orm.interfaces.PropComparator.notin_:19
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notin_:19
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notin_:19
msgid ":meth:`.ColumnOperators.in_`"
msgstr "：meth： `.ColumnOperators.in_`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notlike:1
#: sqlalchemy.orm.interfaces.PropComparator.notlike:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notlike:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notlike:1
msgid "implement the ``NOT LIKE`` operator."
msgstr "`` NOT LIKE``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.notlike:3
#: sqlalchemy.orm.interfaces.PropComparator.notlike:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.notlike:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.notlike:3
msgid ""
"This is equivalent to using negation with :meth:`.ColumnOperators.like`, "
"i.e. ``~x.like(y)``."
msgstr "これは：meth： `.ColumnOperators.like`、つまり` `〜x.like（y）` `で否定を使うのと同じです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.nullsfirst:1
#: sqlalchemy.orm.interfaces.PropComparator.nullsfirst:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.nullsfirst:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullsfirst:1
msgid ""
"Produce a :func:`~.expression.nullsfirst` clause against the parent "
"object."
msgstr "親オブジェクトに対してa：func： `〜.expression.nullsfirst`句を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.nullslast:1
#: sqlalchemy.orm.interfaces.PropComparator.nullslast:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.nullslast:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.nullslast:1
msgid "Produce a :func:`~.expression.nullslast` clause against the parent object."
msgstr "親オブジェクトに対してa：func： `〜.expression.nullslast`句を生成します。"

#: of sqlalchemy.orm.interfaces.PropComparator.of_type:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.of_type:1
msgid "Redefine this object in terms of a polymorphic subclass."
msgstr "多相サブクラスの観点からこのオブジェクトを再定義します。"

#: of sqlalchemy.orm.interfaces.PropComparator.of_type:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type:3
msgid ""
"Returns a new PropComparator from which further criterion can be "
"evaluated."
msgstr "さらなる基準を評価できる新しいPropComparatorを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:3
#: sqlalchemy.orm.interfaces.PropComparator.of_type:6
#: sqlalchemy.orm.interfaces.PropComparator.op:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type:6
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:3
msgid "e.g.::"
msgstr "例えば：："

#: of sqlalchemy.orm.interfaces.PropComparator.of_type:11
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type:11
msgid ""
"a class or mapper indicating that criterion will be against this specific"
" subclass."
msgstr "この特定のサブクラスに対して基準が適用されることを示すクラスまたはマッパー。"

#: of sqlalchemy.orm.interfaces.PropComparator.of_type:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.of_type:16
msgid ":ref:`inheritance_of_type`"
msgstr "：ref： `inheritance_of_type`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:1
#: sqlalchemy.orm.interfaces.PropComparator.op:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:1
msgid "produce a generic operator function."
msgstr "ジェネリック演算子関数を生成します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:7
#: sqlalchemy.orm.interfaces.PropComparator.op:7
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:7
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:7
msgid "produces::"
msgstr "生成::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:11
#: sqlalchemy.orm.interfaces.PropComparator.op:11
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:11
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:11
msgid ""
"This function can also be used to make bitwise operators explicit. For "
"example::"
msgstr "この関数は、ビット演算子を明示的にするためにも使用できます。例えば：："

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:16
#: sqlalchemy.orm.interfaces.PropComparator.op:16
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:16
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:16
msgid "is a bitwise AND of the value in ``somecolumn``."
msgstr "`` somecolumn``の値のビット単位のANDです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:18
#: sqlalchemy.orm.interfaces.PropComparator.op:18
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:18
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:18
msgid ""
"a string which will be output as the infix operator between this element "
"and the expression passed to the generated function."
msgstr "この要素と生成された関数に渡される式との間の中置演算子として出力される文字列。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:22
#: sqlalchemy.orm.interfaces.PropComparator.op:22
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:22
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:22
msgid ""
"precedence to apply to the operator, when parenthesizing expressions.  A "
"lower number will cause the expression to be parenthesized when applied "
"against another operator with higher precedence.  The default value of "
"``0`` is lower than all operators except for the comma (``,``) and ``AS``"
" operators. A value of 100 will be higher or equal to all operators, and "
"-100 will be lower than or equal to all operators.  .. versionadded:: 0.8"
" - added the 'precedence' argument."
msgstr "式をカッコで括るとき、演算子に適用する優先順位。数値が小さいほど優先順位の高い別の演算子に対して適用されたときに式がかっこにされます。デフォルト値 `` 0``はカンマ（ ``、 ``）と `` AS``演算子を除くすべての演算子よりも低くなります。 100の値はすべての演算子より高くなるか等しいことになり、-100はすべての演算子以下になります。 .. versionadded :: 0.8  -  &#39;precedence&#39;引数を追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:22
#: sqlalchemy.orm.interfaces.PropComparator.op:22
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:22
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:22
msgid ""
"precedence to apply to the operator, when parenthesizing expressions.  A "
"lower number will cause the expression to be parenthesized when applied "
"against another operator with higher precedence.  The default value of "
"``0`` is lower than all operators except for the comma (``,``) and ``AS``"
" operators. A value of 100 will be higher or equal to all operators, and "
"-100 will be lower than or equal to all operators."
msgstr "式をカッコで括るとき、演算子に適用する優先順位。数値が小さいほど優先順位の高い別の演算子に対して適用されたときに式がかっこにされます。デフォルト値 `` 0``はカンマ（ ``、 ``）と `` AS``演算子を除くすべての演算子よりも低くなります。 100の値はすべての演算子より高くなるか等しいことになり、-100はすべての演算子以下になります。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:30
#: sqlalchemy.orm.interfaces.PropComparator.op:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:30
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:30
msgid "- added the 'precedence' argument."
msgstr "-  &#39;precedence&#39;引数を追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:32
#: sqlalchemy.orm.interfaces.PropComparator.op:32
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:32
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:32
msgid ""
"if True, the operator will be considered as a \"comparison\" operator, "
"that is which evaluates to a boolean true/false value, like ``==``, "
"``>``, etc.  This flag should be set so that ORM relationships can "
"establish that the operator is a comparison operator when used in a "
"custom join condition.  .. versionadded:: 0.9.2 - added the    "
":paramref:`.Operators.op.is_comparison` flag."
msgstr "Trueの場合、演算子は `` == ``、 `` `` ``などのブール値の真偽値を評価する\ &quot;比較演算子&quot;とみなされます。このフラグは、 ORM関係によって、カスタム結合条件で使用される場合、演算子が比較演算子であることが確認されます。 .. versionadded :: 0.9.2  -  paramref： `.Operators.op.is_comparison`フラグを追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:32
#: sqlalchemy.orm.interfaces.PropComparator.op:32
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:32
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:32
msgid ""
"if True, the operator will be considered as a \"comparison\" operator, "
"that is which evaluates to a boolean true/false value, like ``==``, "
"``>``, etc.  This flag should be set so that ORM relationships can "
"establish that the operator is a comparison operator when used in a "
"custom join condition."
msgstr "Trueの場合、演算子は `` == ``、 `` `` ``などのブール値の真偽値を評価する\ &quot;比較演算子&quot;とみなされます。このフラグは、 ORM関係によって、カスタム結合条件で使用される場合、演算子が比較演算子であることが確認されます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:38
#: sqlalchemy.orm.interfaces.PropComparator.op:38
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:38
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:38
msgid "- added the :paramref:`.Operators.op.is_comparison` flag."
msgstr "-  paramref： `.Operators.op.is_comparison`フラグを追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:41
#: sqlalchemy.orm.interfaces.PropComparator.op:41
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:41
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:41
msgid ""
"a :class:`.TypeEngine` class or object that will force the return type of"
" an expression produced by this operator to be of that type.   By "
"default, operators that specify :paramref:`.Operators.op.is_comparison` "
"will resolve to :class:`.Boolean`, and those that do not will be of the "
"same type as the left-hand operand.  .. versionadded:: 1.2.0b3 - added "
"the    :paramref:`.Operators.op.return_type` argument."
msgstr "a：class： `.TypeEngine`クラスまたはこの演算子によって生成された式の戻り値の型を強制的にその型にするオブジェクトです。デフォルトでは：paramref： `.Operators.op.is_comparison`を指定する演算子は：class：` .Boolean`に解決され、左オペランドと同じ型にはなりません。 .. versionadded :: 1.2.0b3  - ：paramref： `.Operators.op.return_type`引数を追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:41
#: sqlalchemy.orm.interfaces.PropComparator.op:41
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:41
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:41
msgid ""
"a :class:`.TypeEngine` class or object that will force the return type of"
" an expression produced by this operator to be of that type.   By "
"default, operators that specify :paramref:`.Operators.op.is_comparison` "
"will resolve to :class:`.Boolean`, and those that do not will be of the "
"same type as the left-hand operand."
msgstr "a：class： `.TypeEngine`クラスまたはこの演算子によって生成された式の戻り値の型を強制的にその型にするオブジェクトです。デフォルトでは：paramref： `.Operators.op.is_comparison`を指定する演算子は：class：` .Boolean`に解決され、左オペランドと同じ型にはなりません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:48
#: sqlalchemy.orm.interfaces.PropComparator.op:48
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:48
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:48
msgid "- added the :paramref:`.Operators.op.return_type` argument."
msgstr "- ：paramref： `.Operators.op.return_type`引数を追加しました。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.op:55
#: sqlalchemy.orm.interfaces.PropComparator.op:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.op:55
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.op:55
msgid ":ref:`relationship_custom_operator`"
msgstr "：ref： `relationship_custom_operator`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:1
#: sqlalchemy.orm.interfaces.PropComparator.startswith:1
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:1
msgid "Implement the ``startswith`` operator."
msgstr "`` startswith``演算子を実装してください。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:3
#: sqlalchemy.orm.interfaces.PropComparator.startswith:3
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:3
msgid ""
"Produces a LIKE expression that tests against a match for the start of a "
"string value::"
msgstr "文字列値の開始の一致をテストするLIKE式を生成します::"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:13
#: sqlalchemy.orm.interfaces.PropComparator.startswith:13
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:13
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:13
msgid ""
"Since the operator uses ``LIKE``, wildcard characters ``\"%\"`` and "
"``\"_\"`` that are present inside the <other> expression will behave like"
" wildcards as well.   For literal string values, the "
":paramref:`.ColumnOperators.startswith.autoescape` flag may be set to "
"``True`` to apply escaping to occurences of these characters within the "
"string value so that they match as themselves and not as wildcard "
"characters.  Alternatively, the "
":paramref:`.ColumnOperators.startswith.escape` parameter will establish a"
" given character as an escape character which can be of use when the "
"target expression is not a literal string."
msgstr "演算子は `` LIKE``を使用するので、演算子の中にはワイルドカード文字 `` \ &quot;％\&quot; ``と `` \ &quot;_ \&quot; `` <other>式はワイルドカードのようにも動作します。リテラル文字列の場合、：paramref： `.ColumnOperators.startswith.autoescape`フラグを` `True``に設定して、文字列値内のこれらの文字のエスケープを適用し、ワイルドカード文字ではなく自分自身として一致させることができます。代わりに、：paramref： `.ColumnOperators.startswith.escape`パラメータは、ターゲット式がリテラル文字列でない場合に使用できるエスケープ文字として、指定された文字を確立します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:24
#: sqlalchemy.orm.interfaces.PropComparator.startswith:24
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:24
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:24
msgid ""
"expression to be compared.   This is usually a plain string value, but "
"can also be an arbitrary SQL expression.  LIKE wildcard characters ``%`` "
"and ``_`` are not escaped by default unless the "
":paramref:`.ColumnOperators.startswith.autoescape` flag is set to True."
msgstr "比較される式。これは普通は普通の文字列値ですが、任意のSQL式でもかまいません。 LIKEワイルドカード文字 ``％ ``と `` _``は、：paramref： `.ColumnOperators.startswith.autoescape`フラグがTrueに設定されていない限り、デフォルトではエスケープされません。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:30
#: sqlalchemy.orm.interfaces.PropComparator.startswith:30
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:30
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:30
msgid ""
"boolean; when True, establishes an escape character within the LIKE "
"expression, then applies it to all occurrences of ``\"%\"``, ``\"_\"`` "
"and the escape character itself within the comparison value, which is "
"assumed to be a literal string and not a SQL expression.  An expression "
"such as::    somecolumn.startswith(\"foo%bar\", autoescape=True)  Will "
"render as::    somecolumn LIKE :param || '%' ESCAPE '/'  With the value "
"of :param as ``\"foo/%bar\"``.  .. versionadded:: 1.2  .. "
"versionchanged:: 1.2.0 The   "
":paramref:`.ColumnOperators.startswith.autoescape` parameter is    now a "
"simple boolean rather than a character; the escape    character itself is"
" also escaped, and defaults to a forwards    slash, which itself can be "
"customized using the    :paramref:`.ColumnOperators.startswith.escape` "
"parameter."
msgstr "ブール値。 Trueの場合、LIKE式内にエスケープ文字を設定し、それを比較値の中の `` \ &quot;％\&quot; ``、 `` \ &quot;_ \&quot; ``とエスケープ文字自体のすべての出現に適用します。 SQL式ではなくリテラル文字列とみなされます。 :: somecolumn.startswith（\ &quot;foo％bar \&quot;、autoescape = True）のような式は、:: somecolumnのようにレンダリングします：param || &#39;％&#39; ESCAPE &#39;/&#39;：paramの値を `` \ &quot;foo /％bar \&quot; ``として指定します。 .. versionadded :: 1.2 .. versionchanged :: 1.2.0：paramref： `.ColumnOperators.startswith.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.startswith.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:48
#: sqlalchemy.orm.interfaces.PropComparator.startswith:48
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:48
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:48
msgid ""
"The :paramref:`.ColumnOperators.startswith.autoescape` parameter is  now "
"a simple boolean rather than a character; the escape  character itself is"
" also escaped, and defaults to a forwards  slash, which itself can be "
"customized using the  :paramref:`.ColumnOperators.startswith.escape` "
"parameter."
msgstr "：paramref： `.ColumnOperators.startswith.autoescape`パラメータは、文字ではなく単純なブール値になりました。エスケープ文字自体もエスケープされ、デフォルトは前方スラッシュになります。それ自体は：paramref： `.ColumnOperators.startswith.escape`パラメータを使用してカスタマイズできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:55
#: sqlalchemy.orm.interfaces.PropComparator.startswith:55
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:55
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:55
msgid ""
"a character which when given will render with the ``ESCAPE`` keyword to "
"establish that character as the escape character.  This character can "
"then be placed preceding occurrences of ``%`` and ``_`` to allow them to "
"act as themselves and not wildcard characters.  An expression such as::"
"    somecolumn.startswith(\"foo/%bar\", escape=\"^\")  Will render as::"
"    somecolumn LIKE :param || '%' ESCAPE '^'  The parameter may also be "
"combined with :paramref:`.ColumnOperators.startswith.autoescape`::    "
"somecolumn.startswith(\"foo%bar^bat\", escape=\"^\", autoescape=True)  "
"Where above, the given literal parameter will be converted to "
"``\"foo^%bar^^bat\"`` before being passed to the database."
msgstr "その文字をエスケープ文字として確立するために `` ESCAPE``キーワードでレンダリングされる文字を返します。この文字を ``％ ``と `` _``の前に置くことで、ワイルドカード文字ではなく自分自身として動作させることができます。 :: somecolumn.startswith（\ &quot;foo /％bar \&quot;、escape = \ &quot;^ \&quot;）のような式は、:: somecolumn LIKE：param ||をレンダリングします。 &#39;％&#39; ESCAPE &#39;^&#39;パラメタ： `.ColumnOperators.startswith.autoescape` :: somecolumn.startswith（\&quot; foo％bar ^ bat \ &quot;、escape = \&quot; ^ \ &quot;、autoescape = True）上記の場合、与えられたリテラルパラメータはデータベースに渡される前に `` \ &quot;foo ^％bar ^^ bat \&quot; ``に変換されます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.startswith:69
#: sqlalchemy.orm.interfaces.PropComparator.startswith:69
#: sqlalchemy.orm.properties.ColumnProperty.Comparator.startswith:69
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.startswith:69
msgid ""
"The parameter may also be combined with "
":paramref:`.ColumnOperators.startswith.autoescape`::"
msgstr "パラメータは以下のものと組み合わせることもできます：paramref： `.ColumnOperators.startswith.autoescape` ::"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator:1
#: sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator:1
#: sqlalchemy.orm.properties.ColumnProperty.cascade_iterator:1
msgid ""
"Iterate through instances related to the given instance for a particular "
"'cascade', starting with this MapperProperty."
msgstr "指定されたインスタンスに関連するインスタンスを、特定の &#39;カスケード&#39;について繰り返し、このMapperPropertyから開始します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator:4
#: sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator:4
#: sqlalchemy.orm.properties.ColumnProperty.cascade_iterator:4
msgid "Return an iterator3-tuples (instance, mapper, state)."
msgstr "iterator3-tuples（インスタンス、マッパー、状態）を返します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator:6
#: sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator:6
#: sqlalchemy.orm.properties.ColumnProperty.cascade_iterator:6
msgid ""
"Note that the 'cascade' collection on this MapperProperty is checked "
"first for the given type before cascade_iterator is called."
msgstr "このMapperPropertyの &#39;cascade&#39;コレクションは、まずcascade_iteratorが呼び出される前に、指定された型のチェックが行われることに注意してください。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.cascade_iterator:9
#: sqlalchemy.orm.interfaces.MapperProperty.cascade_iterator:9
#: sqlalchemy.orm.properties.ColumnProperty.cascade_iterator:9
msgid "This method typically only applies to RelationshipProperty."
msgstr "このメソッドは通常、RelationshipPropertyにのみ適用されます。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.class_attribute:1
#: sqlalchemy.orm.interfaces.MapperProperty.class_attribute:1
#: sqlalchemy.orm.properties.ColumnProperty.class_attribute:1
#: sqlalchemy.orm.properties.RelationshipProperty.class_attribute:1
msgid ""
"Return the class-bound descriptor corresponding to this "
":class:`.MapperProperty`."
msgstr "this：class： `.MapperProperty`に対応するクラスバインド記述子を返します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.class_attribute:4
#: sqlalchemy.orm.interfaces.MapperProperty.class_attribute:4
#: sqlalchemy.orm.properties.ColumnProperty.class_attribute:4
#: sqlalchemy.orm.properties.RelationshipProperty.class_attribute:4
msgid "This is basically a ``getattr()`` call::"
msgstr "これは基本的に `` getattr（） ``コールです::"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.class_attribute:8
#: sqlalchemy.orm.interfaces.MapperProperty.class_attribute:8
#: sqlalchemy.orm.properties.ColumnProperty.class_attribute:8
#: sqlalchemy.orm.properties.RelationshipProperty.class_attribute:8
msgid ""
"I.e. if this :class:`.MapperProperty` were named ``addresses``, and the "
"class to which it is mapped is ``User``, this sequence is possible::"
msgstr "つまり、class： `.MapperProperty`の名前が` `addresses``で、マッピングされるクラスが` `User``の場合、このシーケンスは可能です::"

#: of sqlalchemy.orm.properties.ColumnProperty.expression:1
msgid "Return the primary column or expression for this ColumnProperty."
msgstr "このColumnPropertyの主な列または式を返します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.init:1
#: sqlalchemy.orm.interfaces.MapperProperty.init:1
#: sqlalchemy.orm.properties.ColumnProperty.init:1
#: sqlalchemy.orm.properties.RelationshipProperty.init:1
msgid ""
"Called after all mappers are created to assemble relationships between "
"mappers and perform other post-mapper-creation initialization steps."
msgstr "マッパー間の関係をアセンブルし、その他のマッパー作成後の初期化ステップを実行するために、すべてのマッパーが作成された後に呼び出されます。"

#: of sqlalchemy.orm.interfaces.MapperProperty.set_parent:1
#: sqlalchemy.orm.properties.ColumnProperty.set_parent:1
#: sqlalchemy.orm.properties.RelationshipProperty.set_parent:1
msgid "Set the parent mapper that references this MapperProperty."
msgstr "このMapperPropertyを参照する親マッパーを設定します。"

#: of sqlalchemy.orm.interfaces.MapperProperty.set_parent:3
#: sqlalchemy.orm.properties.ColumnProperty.set_parent:3
#: sqlalchemy.orm.properties.RelationshipProperty.set_parent:3
msgid ""
"This method is overridden by some subclasses to perform extra setup when "
"the mapper is first known."
msgstr "このメソッドは、マッパーが最初に認識されたときに特別なセットアップを実行するために、いくつかのサブクラスによってオーバーライドされます。"

#: of sqlalchemy.orm.properties.ComparableProperty:1
msgid "Instruments a Python property for use in query expressions."
msgstr "クエリ式で使用するPythonプロパティをインストゥルメントします。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty:1
msgid ""
"Defines a \"composite\" mapped attribute, representing a collection of "
"columns as one attribute."
msgstr "1つの属性として列のコレクションを表す\ &quot;複合\&quot;マップされた属性を定義します。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty:4
msgid ""
":class:`.CompositeProperty` is constructed using the :func:`.composite` "
"function."
msgstr "：class： `.CompositeProperty`は：func：` .composite`関数を使って構築されます。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty:9
msgid ":ref:`mapper_composite`"
msgstr "：ref： `mapper_composite`"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:1
msgid ""
"Produce boolean, comparison, and other operators for "
":class:`.CompositeProperty` attributes."
msgstr "：class： `.CompositeProperty`属性に対してブール値、比較値、およびその他の演算子を生成します。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.Comparator:4
msgid ""
"See the example in :ref:`composite_operations` for an overview of usage ,"
" as well as the documentation for :class:`.PropComparator`."
msgstr "使い方の概要は、：ref： `composite_operations`の例と、class：` .PropComparator`のドキュメントを参照してください。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.do_init:1
msgid ""
"Initialization which occurs after the :class:`.CompositeProperty` has "
"been associated with its parent mapper."
msgstr "：class： `.CompositeProperty`が親マッパーに関連付けられた後に発生する初期化。"

#: of sqlalchemy.orm.descriptor_props.CompositeProperty.get_history:1
msgid "Provided for userland code that uses attributes.get_history()."
msgstr "attributes.get_history（）を使用するユーザーランドコードのために用意されています。"

#: of sqlalchemy.orm.attributes.Event:1
msgid "A token propagated throughout the course of a chain of attribute events."
msgstr "属性イベントの連鎖を通じて伝播されるトークン。"

#: of sqlalchemy.orm.attributes.Event:4
msgid ""
"Serves as an indicator of the source of the event and also provides a "
"means of controlling propagation across a chain of attribute operations."
msgstr "イベントの発生源のインジケータとして機能し、一連の属性操作の伝播を制御する手段も提供します。"

#: of sqlalchemy.orm.attributes.Event:8
msgid ""
"The :class:`.Event` object is sent as the ``initiator`` argument when "
"dealing with events such as :meth:`.AttributeEvents.append`, "
":meth:`.AttributeEvents.set`, and :meth:`.AttributeEvents.remove`."
msgstr "：meth： `.AttributeEvents.append`、：meth：` .AttributeEvents.set`、：meth： `などのイベントを扱うときは：class：` .Event`オブジェクトが `` initiator``引数として送られます： .AttributeEvents.remove`。"

#: of sqlalchemy.orm.attributes.Event:13
msgid ""
"The :class:`.Event` object is currently interpreted by the backref event "
"handlers, and is used to control the propagation of operations across two"
" mutually-dependent attributes."
msgstr "：class： `.Event`オブジェクトは現在、backrefイベントハンドラによって解釈され、相互に依存する2つの属性間の操作の伝播を制御するために使用されます。"

#: of sqlalchemy.orm.attributes.Event
msgid "変数"
msgstr "変数"

#: of sqlalchemy.orm.attributes.Event:19
msgid "The :class:`.AttributeImpl` which is the current event initiator."
msgstr "：class： `.AttributeImpl`は、現在のイベントイニシエータです。"

#: of sqlalchemy.orm.attributes.Event:22
msgid ""
"The symbol :attr:`.OP_APPEND`, :attr:`.OP_REMOVE`, :attr:`.OP_REPLACE`, "
"or :attr:`.OP_BULK_REPLACE`, indicating the source operation."
msgstr "：attr： `.OP_APPEND`、：：attr：` .OP_REMOVE`、：：attr： `.OP_REPLACE`、または：attr：` .OP_BULK_REPLACE`、ソース操作を示します。"

#: of sqlalchemy.orm.identity.IdentityMap.check_modified:1
msgid "return True if any InstanceStates present have been marked as 'modified'."
msgstr "いずれかのInstanceStatesが &#39;modified&#39;とマークされている場合はTrueを返します。"

#: of sqlalchemy.orm.base.InspectionAttr:1
msgid ""
"A base class applied to all ORM objects that can be returned by the "
":func:`.inspect` function."
msgstr "：func： `.inspect`関数によって返されるすべてのORMオブジェクトに適用される基本クラス。"

#: of sqlalchemy.orm.base.InspectionAttr:4
msgid ""
"The attributes defined here allow the usage of simple boolean checks to "
"test basic facts about the object returned."
msgstr "ここで定義されている属性は、返されたオブジェクトに関する基本的な事実をテストするための単純なブール検査の使用を可能にします。"

#: of sqlalchemy.orm.base.InspectionAttr:7
msgid ""
"While the boolean checks here are basically the same as using the Python "
"isinstance() function, the flags here can be used without the need to "
"import all of these classes, and also such that the SQLAlchemy class "
"system can change while leaving the flags here intact for forwards-"
"compatibility."
msgstr "ここでのブールチェックはPythonのisinstance（）関数と基本的に同じですが、これらのクラスをすべてインポートする必要はなく、SQLAlchemyクラスシステムを変更することができます転送互換性のために。"

#: of sqlalchemy.orm.base.InspectionAttr.extension_type:1
msgid "The extension type, if any. Defaults to :data:`.interfaces.NOT_EXTENSION`"
msgstr "拡張タイプ（存在する場合）。デフォルトは：data： `.interfaces.NOT_EXTENSION`"

#: of sqlalchemy.orm.base.InspectionAttr.extension_type:8
msgid ":data:`.HYBRID_METHOD`"
msgstr "：データ： `.HYBRID_METHOD`"

#: of sqlalchemy.orm.base.InspectionAttr.extension_type:10
msgid ":data:`.HYBRID_PROPERTY`"
msgstr "：データ： `.HYBRID_PROPERTY`"

#: of sqlalchemy.orm.base.InspectionAttr.extension_type:12
msgid ":data:`.ASSOCIATION_PROXY`"
msgstr "：データ： `.ASSOCIATION_PROXY`"

#: of sqlalchemy.orm.base.InspectionAttr.is_aliased_class:1
msgid "True if this object is an instance of :class:`.AliasedClass`."
msgstr "このオブジェクトが：class： `.AliasedClass`のインスタンスである場合はtrueです。"

#: of sqlalchemy.orm.base.InspectionAttr.is_attribute:1
msgid "True if this object is a Python :term:`descriptor`."
msgstr "このオブジェクトがPython：term： `descriptor`であれば真。"

#: of sqlalchemy.orm.base.InspectionAttr.is_attribute:3
msgid ""
"This can refer to one of many types.   Usually a "
":class:`.QueryableAttribute` which handles attributes events on behalf of"
" a :class:`.MapperProperty`.   But can also be an extension type such as "
":class:`.AssociationProxy` or :class:`.hybrid_property`. The "
":attr:`.InspectionAttr.extension_type` will refer to a constant "
"identifying the specific subtype."
msgstr "これは、多くの種類の1つを参照することができます。通常は：class： `.QueryableAttribute`：class：` .MapperProperty`の代わりに属性イベントを処理します。しかし、class： `.AssociationProxy`や：class：` .hybrid_property`のような拡張型にすることもできます。 ：attr： `.InspectionAttr.extension_type`は、特定のサブタイプを識別する定数を参照します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute:14
#: sqlalchemy.orm.base.InspectionAttr.is_attribute:12
msgid ":attr:`.Mapper.all_orm_descriptors`"
msgstr "：attr： `.Mapper.all_orm_descriptors`"

#: of sqlalchemy.orm.base.InspectionAttr.is_clause_element:1
msgid "True if this object is an instance of :class:`.ClauseElement`."
msgstr "このオブジェクトが：class： `.ClauseElement`のインスタンスである場合はtrueです。"

#: of sqlalchemy.orm.base.InspectionAttr.is_instance:1
msgid "True if this object is an instance of :class:`.InstanceState`."
msgstr "このオブジェクトが：class： `.InstanceState`のインスタンスである場合はtrueです。"

#: of sqlalchemy.orm.base.InspectionAttr.is_mapper:1
msgid "True if this object is an instance of :class:`.Mapper`."
msgstr "このオブジェクトが：class： `.Mapper`のインスタンスである場合はtrueです。"

#: of sqlalchemy.orm.base.InspectionAttr.is_property:1
msgid "True if this object is an instance of :class:`.MapperProperty`."
msgstr "このオブジェクトが：class： `.MapperProperty`のインスタンスである場合はtrueです。"

#: of sqlalchemy.orm.base.InspectionAttr.is_selectable:1
msgid "Return True if this object is an instance of :class:`.Selectable`."
msgstr "このオブジェクトが：class： `.Selectable`のインスタンスであればTrueを返します。"

#: of sqlalchemy.orm.base.InspectionAttrInfo:1
msgid "Adds the ``.info`` attribute to :class:`.InspectionAttr`."
msgstr "`` .info``属性を：class： `.InspectionAttr`に追加します。"

#: of sqlalchemy.orm.base.InspectionAttrInfo:3
msgid ""
"The rationale for :class:`.InspectionAttr` vs. "
":class:`.InspectionAttrInfo` is that the former is compatible as a mixin "
"for classes that specify ``__slots__``; this is essentially an "
"implementation artifact."
msgstr "：class： `.InspectionAttr`と：class：` .InspectionAttrInfo`の論理的根拠は、 `` __slots__``を指定したクラスのためのmixinとして互換性があります。これは本質的に実装アーチファクトです。"

#: ../../orm/internals.rst:61 of sqlalchemy.orm.base.InspectionAttrInfo.info:1
msgid ""
"Info dictionary associated with the object, allowing user-defined data to"
" be associated with this :class:`.InspectionAttr`."
msgstr "オブジェクトに関連付けられた情報ディクショナリで、ユーザ定義のデータをこの：class： `.InspectionAttr`に関連付けることができます。"

#: ../../orm/internals.rst:64 of sqlalchemy.orm.base.InspectionAttrInfo.info:4
msgid ""
"The dictionary is generated when first accessed.  Alternatively, it can "
"be specified as a constructor argument to the :func:`.column_property`, "
":func:`.relationship`, or :func:`.composite` functions."
msgstr "辞書は、最初にアクセスされたときに生成されます。あるいは、：func： `.column_property`、：func：` .relationship`、または：func： `.composite`関数のコンストラクタ引数として指定することもできます。"

#: ../../orm/internals.rst:69 of sqlalchemy.orm.base.InspectionAttrInfo.info:9
msgid "Added support for .info to all :class:`.MapperProperty` subclasses."
msgstr ".infoのサポートをall：class： `.MapperProperty`サブクラスに追加しました。"

#: of sqlalchemy.orm.base.InspectionAttrInfo.info:12
msgid ""
":attr:`.MapperProperty.info` is also available on extension types via the"
" :attr:`.InspectionAttrInfo.info` attribute, so that it can apply to a "
"wider variety of ORM and extension constructs."
msgstr "：attr： `.MapperProperty.info`は：attr：` .InspectionAttrInfo.info`属性を使って拡張タイプでも利用できます。これにより、より多様なORMと拡張構造に適用できます。"

#: ../../orm/internals.rst:78 of sqlalchemy.orm.base.InspectionAttrInfo.info:19
msgid ":attr:`.QueryableAttribute.info`"
msgstr "：attr： `.QueryableAttribute.info`"

#: ../../orm/internals.rst:80 of
#: sqlalchemy.orm.attributes.QueryableAttribute.info:35
#: sqlalchemy.orm.base.InspectionAttrInfo.info:21
msgid ":attr:`.SchemaItem.info`"
msgstr "：のAttr： `.SchemaItem.info`"

#: of sqlalchemy.orm.state.InstanceState:1
msgid "tracks state information at the instance level."
msgstr "インスタンスレベルで状態情報を追跡します。"

#: of sqlalchemy.orm.state.InstanceState:3
msgid ""
"The :class:`.InstanceState` is a key object used by the SQLAlchemy ORM in"
" order to track the state of an object; it is created the moment an "
"object is instantiated, typically as a result of :term:`instrumentation` "
"which SQLAlchemy applies to the ``__init__()`` method of the class."
msgstr "：class： `.InstanceState`は、オブジェクトの状態を追跡するためにSQLAlchemy ORMによって使用されるキーオブジェクトです。 SQLAlchemyがクラスの `` __init __（） ``メソッドに適用するterm： `instrumentation`の結果として、オブジェクトがインスタンス化された瞬間に作成されます。"

#: of sqlalchemy.orm.state.InstanceState:9
msgid ""
":class:`.InstanceState` is also a semi-public object, available for "
"runtime inspection as to the state of a mapped instance, including "
"information such as its current status within a particular "
":class:`.Session` and details about data on individual attributes.  The "
"public API in order to acquire a :class:`.InstanceState` object is to use"
" the :func:`.inspect` system::"
msgstr "：class： `.InstanceState`はセミパブリックオブジェクトでもあり、マップされたインスタンスの状態に関する実行時検査に利用できます。具体的には：class：` .Session`内の現在の状態や、個々の属性。 public：class： `.InstanceState`オブジェクトを取得するためのAPIは、：func：` .inspect`システムを使用することです::"

#: of sqlalchemy.orm.state.InstanceState:22
msgid ":ref:`core_inspection_toplevel`"
msgstr "：ref： `core_inspection_toplevel`"

#: of sqlalchemy.orm.state.InstanceState.attrs:1
msgid ""
"Return a namespace representing each attribute on the mapped object, "
"including its current value and history."
msgstr "現在の値と履歴を含む、マップされたオブジェクトの各属性を表す名前空間を返します。"

#: of sqlalchemy.orm.state.InstanceState.attrs:5
msgid ""
"The returned object is an instance of :class:`.AttributeState`. This "
"object allows inspection of the current data within an attribute as well "
"as attribute history since the last flush."
msgstr "返されるオブジェクトは、class： `.AttributeState`のインスタンスです。このオブジェクトは、最後のフラッシュ以降の属性内の現在のデータおよび属性履歴の検査を可能にします。"

#: of sqlalchemy.orm.state.InstanceState.callables:1
msgid "A namespace where a per-state loader callable can be associated."
msgstr "1つのステート・ローダー呼び出し可能コードを関連付けることができる名前空間。"

#: of sqlalchemy.orm.state.InstanceState.callables:3
msgid ""
"In SQLAlchemy 1.0, this is only used for lazy loaders / deferred loaders "
"that were set up via query option."
msgstr "SQLAlchemy 1.0では、これはクエリオプションを使用して設定された遅延ローダー/遅延ローダーでのみ使用されます。"

#: of sqlalchemy.orm.state.InstanceState.callables:6
msgid ""
"Previously, callables was used also to indicate expired attributes by "
"storing a link to the InstanceState itself in this dictionary. This role "
"is now handled by the expired_attributes set."
msgstr "以前は、callablesは、InstanceState自体へのリンクをこのディクショナリに格納することによって、期限切れの属性を示すためにも使用されていました。このロールは、expired_attributesセットによって処理されるようになりました。"

#: of sqlalchemy.orm.state.InstanceState.deleted:1
msgid "Return true if the object is :term:`deleted`."
msgstr "オブジェクトが：term： `deleted`の場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.deleted:3
msgid ""
"An object that is in the deleted state is guaranteed to not be within the"
" :attr:`.Session.identity_map` of its parent :class:`.Session`; however "
"if the session's transaction is rolled back, the object will be restored "
"to the persistent state and the identity map."
msgstr "削除された状態にあるオブジェクトは、その親の：attr： `.Session.identity_map`内にないことが保証されています：class：` .Session`;ただし、セッションのトランザクションがロールバックされると、オブジェクトは永続状態およびアイデンティティマップに復元されます。"

#: of sqlalchemy.orm.state.InstanceState.deleted:11
msgid ""
"The :attr:`.InstanceState.deleted` attribute refers to a specific state "
"of the object that occurs between the \"persistent\" and \"detached\" "
"states; once the object is :term:`detached`, the "
":attr:`.InstanceState.deleted` attribute **no longer returns True**; in "
"order to detect that a state was deleted, regardless of whether or not "
"the object is associated with a :class:`.Session`, use the "
":attr:`.InstanceState.was_deleted` accessor."
msgstr "：attr： `.InstanceState.deleted`属性は、永続的な状態と分離された状態の間で発生するオブジェクトの特定の状態を指します。オブジェクトが：term： `detached`である場合、：attr：` .InstanceState.deleted`属性**はもはやTrue **を返しません。オブジェクトがa：class： `.Session`に関連付けられているかどうかにかかわらず、状態が削除されたことを検出するには、：attr：` .InstanceState.was_deleted`アクセサを使用します。"

#: of sqlalchemy.orm.state.InstanceState.deleted:23
#: sqlalchemy.orm.state.InstanceState.detached:5
#: sqlalchemy.orm.state.InstanceState.pending:6
#: sqlalchemy.orm.state.InstanceState.persistent:15
#: sqlalchemy.orm.state.InstanceState.transient:5
#: sqlalchemy.orm.state.InstanceState.was_deleted:18
msgid ":ref:`session_object_states`"
msgstr "：ref： `session_object_states`"

#: of sqlalchemy.orm.state.InstanceState.detached:1
msgid "Return true if the object is :term:`detached`."
msgstr "オブジェクトが：term： `detached`の場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.dict:1
msgid "Return the instance dict used by the object."
msgstr "オブジェクトが使用するインスタンスのdictを返します。"

#: of sqlalchemy.orm.state.InstanceState.dict:3
msgid ""
"Under normal circumstances, this is always synonymous with the "
"``__dict__`` attribute of the mapped object, unless an alternative "
"instrumentation system has been configured."
msgstr "通常の状況下では、これは代替の計測システムが構成されていない限り、マップされたオブジェクトの `` __dict__``属性と常に同義です。"

#: of sqlalchemy.orm.state.InstanceState.dict:8
msgid ""
"In the case that the actual object has been garbage collected, this "
"accessor returns a blank dictionary."
msgstr "実際のオブジェクトがガベージコレクションされた場合、このアクセサは空の辞書を返します。"

#: of sqlalchemy.orm.state.InstanceState.expired_attributes:1
msgid ""
"The set of keys which are 'expired' to be loaded by the manager's "
"deferred scalar loader, assuming no pending changes."
msgstr "保留中の変更がないと仮定して、マネージャの遅延スカラーローダによってロードされる「期限切れ」のキーのセット。"

#: of sqlalchemy.orm.state.InstanceState.expired_attributes:5
msgid ""
"see also the ``unmodified`` collection which is intersected against this "
"set when a refresh operation occurs."
msgstr "リフレッシュ操作が発生したときにこのセットと交差する `` unmodified``コレクションも参照してください。"

#: of sqlalchemy.orm.state.InstanceState.has_identity:1
msgid "Return ``True`` if this object has an identity key."
msgstr "このオブジェクトにIDキーがある場合は `` True``を返します。"

#: of sqlalchemy.orm.state.InstanceState.has_identity:3
msgid ""
"This should always have the same value as the expression "
"``state.persistent or state.detached``."
msgstr "これは常に `` state.persistentまたはstate.detached``と同じ値にする必要があります。"

#: of sqlalchemy.orm.state.InstanceState.identity:1
msgid ""
"Return the mapped identity of the mapped object. This is the primary key "
"identity as persisted by the ORM which can always be passed directly to "
":meth:`.Query.get`."
msgstr "マップされたオブジェクトのマップされたアイデンティティを返します。これはORMによって保持される主キーのIDであり、常に：meth： `.Query.get`に直接渡すことができます。"

#: of sqlalchemy.orm.state.InstanceState.identity:6
msgid "Returns ``None`` if the object has no primary key identity."
msgstr "オブジェクトに主キーIDがない場合は `` None``を返します。"

#: of sqlalchemy.orm.state.InstanceState.identity:9
msgid ""
"An object which is :term:`transient` or :term:`pending` does **not** have"
" a mapped identity until it is flushed, even if its attributes include "
"primary key values."
msgstr "term： `transient`または：term：` pending`のオブジェクトは、その属性にプライマリキー値が含まれていても、フラッシュされるまでマップされたアイデンティティを持ちません。"

#: of sqlalchemy.orm.state.InstanceState.identity_key:1
msgid "Return the identity key for the mapped object."
msgstr "マップされたオブジェクトのIDキーを返します。"

#: of sqlalchemy.orm.state.InstanceState.identity_key:3
msgid ""
"This is the key used to locate the object within the "
":attr:`.Session.identity_map` mapping.   It contains the identity as "
"returned by :attr:`.identity` within it."
msgstr "これは：attr： `.Session.identity_map`マッピング内でオブジェクトを見つけるために使用されるキーです。これには：attr： `.identity`が返すIDが含まれています。"

#: of sqlalchemy.orm.state.InstanceState.mapper:1
msgid "Return the :class:`.Mapper` used for this mapepd object."
msgstr "このmapepdオブジェクトに使用される：class： `.Mapper`を返します。"

#: of sqlalchemy.orm.state.InstanceState.object:1
msgid "Return the mapped object represented by this :class:`.InstanceState`."
msgstr "this：class： `.InstanceState`で表されるマップされたオブジェクトを返します。"

#: of sqlalchemy.orm.state.InstanceState.pending:1
msgid "Return true if the object is :term:`pending`."
msgstr "オブジェクトが：term： `pending`の場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.persistent:1
msgid "Return true if the object is :term:`persistent`."
msgstr "オブジェクトが：term： `persistent`の場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.persistent:3
msgid ""
"An object that is in the persistent state is guaranteed to be within the "
":attr:`.Session.identity_map` of its parent :class:`.Session`."
msgstr "永続状態にあるオブジェクトは、親：class： `.Session`の：attr：` .Session.identity_map`内にあることが保証されています。"

#: of sqlalchemy.orm.state.InstanceState.persistent:7
msgid ""
"The :attr:`.InstanceState.persistent` accessor no longer returns True for"
" an object that was \"deleted\" within a flush; use the "
":attr:`.InstanceState.deleted` accessor to detect this state.   This "
"allows the \"persistent\" state to guarantee membership in the identity "
"map."
msgstr "：attr： `.InstanceState.persistent`アクセサは、フラッシュ内で「削除」されたオブジェクトに対してTrueを返さなくなりました。この状態を検出するには、：attr： `.InstanceState.deleted`アクセサを使用してください。これにより、\ &quot;永続\&quot;状態でアイデンティティマップのメンバーシップを保証することができます。"

#: of sqlalchemy.orm.state.InstanceState.session:1
msgid ""
"Return the owning :class:`.Session` for this instance, or ``None`` if "
"none available."
msgstr "このインスタンスの場合は、class： `.Session`を返します。利用できない場合は` `None``を返します。"

#: of sqlalchemy.orm.state.InstanceState.session:4
msgid ""
"Note that the result here can in some cases be *different* from that of "
"``obj in session``; an object that's been deleted will report as not ``in"
" session``, however if the transaction is still in progress, this "
"attribute will still refer to that session. Only when the transaction is "
"completed does the object become fully detached under normal "
"circumstances."
msgstr "ここでの結果は、 `` obj in session``とは異なる場合があることに注意してください。削除されたオブジェクトは `` in session``として報告されませんが、トランザクションがまだ進行中の場合、この属性は引き続きそのセッションを参照します。トランザクションが完了したときにのみ、オブジェクトは通常の状況下で完全に切り離されます。"

#: of sqlalchemy.orm.state.InstanceState.transient:1
msgid "Return true if the object is :term:`transient`."
msgstr "オブジェクトが：term： `transient`の場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.unloaded:1
#: sqlalchemy.orm.state.InstanceState.unloaded_expirable:1
msgid "Return the set of keys which do not have a loaded value."
msgstr "ロードされた値を持たないキーのセットを返します。"

#: of sqlalchemy.orm.state.InstanceState.unloaded:3
#: sqlalchemy.orm.state.InstanceState.unloaded_expirable:3
msgid ""
"This includes expired attributes and any other attribute that was never "
"populated or modified."
msgstr "これには期限切れの属性と、決して入力または変更されなかったその他の属性が含まれます。"

#: of sqlalchemy.orm.state.InstanceState.unmodified:1
msgid "Return the set of keys which have no uncommitted changes"
msgstr "コミットされていない変更を持たないキーのセットを返します。"

#: of sqlalchemy.orm.state.InstanceState.unmodified_intersection:1
msgid "Return self.unmodified.intersection(keys)."
msgstr "self.unmodified.intersection（keys）を返します。"

#: of sqlalchemy.orm.state.InstanceState.was_deleted:1
msgid ""
"Return True if this object is or was previously in the \"deleted\" state "
"and has not been reverted to persistent."
msgstr "このオブジェクトが以前に\ &quot;deleted \&quot;状態にあって、永続化されていない場合はtrueを返します。"

#: of sqlalchemy.orm.state.InstanceState.was_deleted:4
msgid ""
"This flag returns True once the object was deleted in flush. When the "
"object is expunged from the session either explicitly or via transaction "
"commit and enters the \"detached\" state, this flag will continue to "
"report True."
msgstr "このフラグは、オブジェクトが一度削除されるとTrueを返します。オブジェクトが明示的にまたはトランザクションコミットを介してセッションから除外され、\ &quot;detached \&quot;状態になると、このフラグは引き続きTrueを報告します。"

#: of sqlalchemy.orm.state.InstanceState.was_deleted:9
msgid "- added a local method form of :func:`.orm.util.was_deleted`."
msgstr "-  func： `.orm.util.was_deleted`のローカルメソッド形式を追加しました。"

#: of sqlalchemy.orm.state.InstanceState.was_deleted:14
msgid ":attr:`.InstanceState.deleted` - refers to the \"deleted\" state"
msgstr "：attr： `.InstanceState.deleted`  -  \&quot; deleted \ &quot;状態を参照します。"

#: of sqlalchemy.orm.state.InstanceState.was_deleted:16
msgid ":func:`.orm.util.was_deleted` - standalone function"
msgstr "：func： `.orm.util.was_deleted`  - スタンドアロン関数"

#: of sqlalchemy.orm.attributes.InstrumentedAttribute:1
msgid ""
"Class bound instrumented attribute which adds basic :term:`descriptor` "
"methods."
msgstr "basic：term： `descriptor`メソッドを追加するクラスバインドされたinstrumented属性です。"

#: of sqlalchemy.orm.attributes.InstrumentedAttribute:4
msgid "See :class:`.QueryableAttribute` for a description of most features."
msgstr "ほとんどの機能の説明については、class： `.QueryableAttribute`を参照してください。"

#: of sqlalchemy.orm.interfaces.MANYTOONE:1
msgid "Indicates the many-to-one direction for a :func:`.relationship`."
msgstr "a：func： `.relationship`の多対1の方向を示します。"

#: of sqlalchemy.orm.interfaces.MANYTOMANY:3
#: sqlalchemy.orm.interfaces.MANYTOONE:3 sqlalchemy.orm.interfaces.ONETOMANY:3
msgid ""
"This symbol is typically used by the internals but may be exposed within "
"certain API features."
msgstr "このシンボルは通常、内部で使用されますが、特定のAPI機能内で公開される可能性があります。"

#: of sqlalchemy.orm.interfaces.MANYTOMANY:1
msgid "Indicates the many-to-many direction for a :func:`.relationship`."
msgstr "a：func： `.relationship`の多対多の方向を示します。"

#: of sqlalchemy.orm.interfaces.MapperProperty:1
msgid "Represent a particular class attribute mapped by :class:`.Mapper`."
msgstr "クラス： `.Mapper`によってマップされた特定のクラス属性を表します。"

#: of sqlalchemy.orm.interfaces.MapperProperty:3
msgid ""
"The most common occurrences of :class:`.MapperProperty` are the mapped "
":class:`.Column`, which is represented in a mapping as an instance of "
":class:`.ColumnProperty`, and a reference to another class produced by "
":func:`.relationship`, represented in the mapping as an instance of "
":class:`.RelationshipProperty`."
msgstr "：class： `.ColumnProperty`の最も一般的な出現は、：class：` .ColumnProperty`のインスタンスとしてマッピングで表現される、マップされた：class： `.Column`と、によって生成される別のクラスへの参照です： func： `.relationship`は、クラス：` .RelationshipProperty`のインスタンスとしてマッピングで表されます。"

#: ../../orm/internals.rst:72
msgid ""
":attr:`.InspectionAttr.info` moved from :class:`.MapperProperty` so that "
"it can apply to a wider variety of ORM and extension constructs."
msgstr "：attr： `.InspectionAttr.info`は：class：` .MapperProperty`から移動し、より多様なORMと拡張構造に適用できます。"

#: of sqlalchemy.orm.interfaces.MapperProperty.cascade:1
msgid "The set of 'cascade' attribute names."
msgstr "「カスケード」属性名のセット。"

#: of sqlalchemy.orm.interfaces.MapperProperty.cascade:3
msgid "This collection is checked before the 'cascade_iterator' method is called."
msgstr "このコレクションは、 &#39;cascade_iterator&#39;メソッドが呼び出される前にチェックされます。"

#: of sqlalchemy.orm.interfaces.MapperProperty.cascade:5
msgid "The collection typically only applies to a RelationshipProperty."
msgstr "コレクションは通常、RelationshipPropertyにのみ適用されます。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.create_row_processor:1
#: sqlalchemy.orm.interfaces.MapperProperty.create_row_processor:1
msgid ""
"Produce row processing functions and append to the given set of "
"populators lists."
msgstr "行処理関数を生成し、指定されたポピュレータリストのセットに追加します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.do_init:1
#: sqlalchemy.orm.interfaces.MapperProperty.do_init:1
msgid "Perform subclass-specific initialization post-mapper-creation steps."
msgstr "サブクラス固有の初期化ポストマッパー作成ステップを実行します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.do_init:4
#: sqlalchemy.orm.interfaces.MapperProperty.do_init:4
msgid ""
"This is a template method called by the ``MapperProperty`` object's "
"init() method."
msgstr "これは `` MapperProperty``オブジェクトのinit（）メソッドによって呼び出されるテンプレートメソッドです。"

#: of sqlalchemy.orm.interfaces.MapperProperty.instrument_class:1
msgid ""
"Hook called by the Mapper to the property to initiate instrumentation of "
"the class attribute managed by this MapperProperty."
msgstr "このMapperPropertyによって管理されるクラス属性の計測を開始するプロパティにMapperによって呼び出されるフック。"

#: of sqlalchemy.orm.interfaces.MapperProperty.instrument_class:5
msgid ""
"The MapperProperty here will typically call out to the attributes module "
"to set up an InstrumentedAttribute."
msgstr "ここのMapperPropertyは、通常、InstrumentedAttributeを設定するために属性モジュールを呼び出します。"

#: of sqlalchemy.orm.interfaces.MapperProperty.instrument_class:8
msgid ""
"This step is the first of two steps to set up an InstrumentedAttribute, "
"and is called early in the mapper setup process."
msgstr "このステップは、InstrumentedAttributeを設定する2つのステップのうちの最初のステップであり、マッパー設定プロセスの早い段階で呼び出されます。"

#: of sqlalchemy.orm.interfaces.MapperProperty.instrument_class:11
msgid ""
"The second step is typically the init_class_attribute step, called from "
"StrategizedProperty via the post_instrument_class() hook.  This step "
"assigns additional state to the InstrumentedAttribute (specifically the "
"\"impl\") which has been determined after the MapperProperty has "
"determined what kind of persistence management it needs to do (e.g. "
"scalar, object, collection, etc)."
msgstr "2番目のステップは、通常、post_instrument_class（）フック経由でStrategizedPropertyから呼び出されるinit_class_attributeステップです。このステップは、MapperPropertyがどのような持続管理（スカラー、オブジェクト、コレクションなど）を行う必要があるかを決定した後に決定されたInstrumentedAttribute（特に\ &quot;impl \&quot;）に追加の状態を割り当てます。"

#: of sqlalchemy.orm.interfaces.MapperProperty.is_property:1
msgid ""
"Part of the InspectionAttr interface; states this object is a mapper "
"property."
msgstr "InspectionAttrインターフェースの一部。このオブジェクトがマッパープロパティであることを示します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.merge:1
#: sqlalchemy.orm.interfaces.MapperProperty.merge:1
msgid ""
"Merge the attribute represented by this ``MapperProperty`` from source to"
" destination object."
msgstr "この `` MapperProperty``で表される属性をソースオブジェクトからデスティネーションオブジェクトにマージします。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.post_instrument_class:1
#: sqlalchemy.orm.interfaces.MapperProperty.post_instrument_class:1
msgid ""
"Perform instrumentation adjustments that need to occur after init() has "
"completed."
msgstr "init（）が完了した後に実行する必要のある計器調整を実行します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.post_instrument_class:4
#: sqlalchemy.orm.interfaces.MapperProperty.post_instrument_class:4
msgid ""
"The given Mapper is the Mapper invoking the operation, which may not be "
"the same Mapper as self.parent in an inheritance scenario; however, "
"Mapper will always at least be a sub-mapper of self.parent."
msgstr "指定されたMapperは操作を呼び出すMapperであり、継承シナリオではself.parentと同じMapperではない可能性があります。ただし、Mapperは常に少なくともself.parentのサブマッパになります。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.post_instrument_class:9
#: sqlalchemy.orm.interfaces.MapperProperty.post_instrument_class:9
msgid ""
"This method is typically used by StrategizedProperty, which delegates it "
"to LoaderStrategy.init_class_attribute() to perform final setup on the "
"class-bound InstrumentedAttribute."
msgstr "このメソッドは通常、StrategizedPropertyによって使用され、LoaderStrategy.init_class_attribute（）に委譲して、クラスにバインドされたInstrumentedAttributeの最終設定を実行します。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.setup:1
#: sqlalchemy.orm.interfaces.MapperProperty.setup:1
msgid "Called by Query for the purposes of constructing a SQL statement."
msgstr "SQL文を作成するためにQueryによって呼び出されます。"

#: of sqlalchemy.orm.descriptor_props.SynonymProperty.setup:3
#: sqlalchemy.orm.interfaces.MapperProperty.setup:3
msgid ""
"Each MapperProperty associated with the target mapper processes the "
"statement referenced by the query context, adding columns and/or "
"criterion as appropriate."
msgstr "ターゲットマッパーに関連する各MapperPropertyは、クエリコンテキストによって参照されるステートメントを処理し、必要に応じて列および/または基準を追加します。"

#: of sqlalchemy.orm.interfaces.NOT_EXTENSION:1
msgid ""
"Symbol indicating an :class:`InspectionAttr` that's not part of "
"sqlalchemy.ext."
msgstr "sqlalchemy.extの一部ではない：class： `InspectionAttr`を示すシンボル。"

#: of sqlalchemy.orm.interfaces.NOT_EXTENSION:4
msgid "Is assigned to the :attr:`.InspectionAttr.extension_type` attibute."
msgstr "：attr： `.InspectionAttr.extension_type`属性に割り当てられます。"

#: of sqlalchemy.orm.interfaces.ONETOMANY:1
msgid "Indicates the one-to-many direction for a :func:`.relationship`."
msgstr "a：func： `.relationship`の1対多数の方向を示します。"

#: of sqlalchemy.orm.interfaces.PropComparator:1
msgid "Defines SQL operators for :class:`.MapperProperty` objects."
msgstr "：class： `.MapperProperty`オブジェクトのSQL演算子を定義します。"

#: of sqlalchemy.orm.interfaces.PropComparator:3
msgid ""
"SQLAlchemy allows for operators to be redefined at both the Core and ORM "
"level.  :class:`.PropComparator` is the base class of operator "
"redefinition for ORM-level operations, including those of "
":class:`.ColumnProperty`, :class:`.RelationshipProperty`, and "
":class:`.CompositeProperty`."
msgstr "SQLAlchemyでは、演算子をコアレベルとORMレベルの両方で再定義することができます。 ：class： `.PropComparator`は、class：` .ColumnProperty`、：class： `.RelationshipProperty`、：class：` .CompositeProperty`を含む、ORMレベルの演算子の再定義の基本クラスです。"

#: of sqlalchemy.orm.interfaces.PropComparator:9
msgid ""
"With the advent of Hybrid properties introduced in SQLAlchemy 0.7, as "
"well as Core-level operator redefinition in SQLAlchemy 0.8, the use case "
"for user-defined :class:`.PropComparator` instances is extremely rare.  "
"See :ref:`hybrids_toplevel` as well as :ref:`types_operators`."
msgstr "SQLAlchemy 0.7で導入されたハイブリッドプロパティの登場とSQLAlchemy 0.8でのコアレベル演算子の再定義により、user-defined：class： `.PropComparator`インスタンスの使用例は非常にまれです。 See：ref： `hybrids_toplevel`と：ref：` types_operators`を参照してください。"

#: of sqlalchemy.orm.interfaces.PropComparator:15
msgid ""
"User-defined subclasses of :class:`.PropComparator` may be created. The "
"built-in Python comparison and math operator methods, such as "
":meth:`.operators.ColumnOperators.__eq__`, "
":meth:`.operators.ColumnOperators.__lt__`, and "
":meth:`.operators.ColumnOperators.__add__`, can be overridden to provide "
"new operator behavior. The custom :class:`.PropComparator` is passed to "
"the :class:`.MapperProperty` instance via the ``comparator_factory`` "
"argument. In each case, the appropriate subclass of "
":class:`.PropComparator` should be used::"
msgstr "：class： `.PropComparator`のユーザ定義のサブクラスを作成することができます。 ：meth： `.operators.ColumnOperators .__ eq__`、：meth：` .operators.ColumnOperators .__ lt__`、：meth： `.operators.ColumnOperators .__ add__`のような組み込みのPython比較演算子演算子メソッドは、新しいオペレータの動作を提供するためにオーバーライドすることができます。カスタム：クラス： `.PropComparator`は、` `compare_factory``引数を介して：class：` .MapperProperty`インスタンスに渡されます。いずれの場合も：class： `.PropComparator`の適切なサブクラスを使用する必要があります::"

#: of sqlalchemy.orm.interfaces.PropComparator:67
msgid ""
"Note that for column-level operator redefinition, it's usually simpler to"
" define the operators at the Core level, using the "
":attr:`.TypeEngine.comparator_factory` attribute.  See "
":ref:`types_operators` for more detail."
msgstr "列レベルの演算子の再定義では、：attr： `.TypeEngine.comparator_factory`属性を使用して、コアレベルで演算子を定義する方が簡単です。詳細はref： `types_operators`を参照してください。"

#: of sqlalchemy.orm.interfaces.PropComparator:74
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator:11
msgid ":class:`.ColumnProperty.Comparator`"
msgstr "：クラス： `.ColumnProperty.Comparator`"

#: of sqlalchemy.orm.interfaces.PropComparator:76
msgid ":class:`.RelationshipProperty.Comparator`"
msgstr "：クラス： `.RelationshipProperty.Comparator`"

#: of sqlalchemy.orm.interfaces.PropComparator:78
msgid ":class:`.CompositeProperty.Comparator`"
msgstr "：クラス： `.CompositeProperty.Comparator`"

#: of sqlalchemy.orm.interfaces.PropComparator.operate:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:1
msgid "Operate on an argument."
msgstr "引数に基づいて操作します。"

#: of sqlalchemy.orm.interfaces.PropComparator.operate:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:3
msgid ""
"This is the lowest level of operation, raises "
":class:`NotImplementedError` by default."
msgstr "これは最低レベルの操作です：class：デフォルトでは `NotImplementedError`です。"

#: of sqlalchemy.orm.interfaces.PropComparator.operate:6
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:6
msgid ""
"Overriding this on a subclass can allow common behavior to be applied to "
"all operations. For example, overriding :class:`.ColumnOperators` to "
"apply ``func.lower()`` to the left and right side::"
msgstr "これをサブクラスでオーバーライドすると、すべての操作に共通の動作を適用できます。たとえば、：class： `.ColumnOperators`をオーバーライドして、` `func.lower（）` `を左右に適用します："

#: of sqlalchemy.orm.interfaces.PropComparator.operate:16
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:16
msgid "Operator callable."
msgstr "オペレータ呼び出し可能。"

#: of sqlalchemy.orm.interfaces.PropComparator.operate:17
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:17
msgid ""
"the 'other' side of the operation. Will be a single scalar for most "
"operations."
msgstr "操作の「その他」側ほとんどの操作で単一のスカラーになります。"

#: of sqlalchemy.orm.interfaces.PropComparator.operate:19
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.operate:19
msgid ""
"modifiers.  These may be passed by special operators such as "
":meth:`ColumnOperators.contains`."
msgstr "修飾語。これらは、次のような特別な演算子によって渡されます：meth： `ColumnOperators.contains`。"

#: of sqlalchemy.orm.interfaces.PropComparator.reverse_operate:1
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.reverse_operate:1
msgid "Reverse operate on an argument."
msgstr "引数に対して逆演算を行います。"

#: of sqlalchemy.orm.interfaces.PropComparator.reverse_operate:3
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.reverse_operate:3
msgid "Usage is the same as :meth:`operate`."
msgstr "使い方は：meth： `operate`と同じです。"

#: of sqlalchemy.orm.properties.RelationshipProperty:1
msgid ""
"Describes an object property that holds a single item or list of items "
"that correspond to a related database table."
msgstr "関連するデータベーステーブルに対応する単一の項目または項目のリストを保持するオブジェクトプロパティを記述します。"

#: of sqlalchemy.orm.properties.RelationshipProperty:4
msgid "Public constructor is the :func:`.orm.relationship` function."
msgstr "publicコンストラクタは：func： `.orm.relationship`関数です。"

#: of sqlalchemy.orm.properties.RelationshipProperty:8
msgid ":ref:`relationship_config_toplevel`"
msgstr "：ref： `relationship_config_toplevel`"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator:1
msgid ""
"Produce boolean, comparison, and other operators for "
":class:`.RelationshipProperty` attributes."
msgstr "クラス： `.RelationshipProperty`属性のブール値、比較値、およびその他の演算子を生成します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator:4
msgid ""
"See the documentation for :class:`.PropComparator` for a brief overview "
"of ORM level operator definition."
msgstr "ORMレベルのオペレータ定義の概要については、class： `.PropComparator`のドキュメントを参照してください。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:1
msgid ""
"Produce an expression that tests a collection against particular "
"criterion, using EXISTS."
msgstr "EXISTSを使用して特定の基準に対してコレクションをテストする式を生成します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:4
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.has:4
msgid "An expression like::"
msgstr "::のような表現"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:11
#: sqlalchemy.orm.properties.RelationshipProperty.Comparator.has:11
msgid "Will produce a query like::"
msgstr "::のようなクエリを生成します"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:17
msgid ""
"Because :meth:`~.RelationshipProperty.Comparator.any` uses a correlated "
"subquery, its performance is not nearly as good when compared against "
"large target tables as that of using a join."
msgstr "：meth： `〜。RelationhipProperty.Comparator.any`は、相関サブクエリを使用するため、ジョインを使用する場合と比べて、大きなターゲット表と比較したときのパフォーマンスはそれほど良好ではありません。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:22
msgid ""
":meth:`~.RelationshipProperty.Comparator.any` is particularly useful for "
"testing for empty collections::"
msgstr "：meth： `〜.RelationshipProperty.Comparator.any`は空のコレクションをテストするのに特に便利です::"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:29
msgid "will produce::"
msgstr "生産する::"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.any:35
msgid ""
":meth:`~.RelationshipProperty.Comparator.any` is only valid for "
"collections, i.e. a :func:`.relationship` that has ``uselist=True``.  For"
" scalar references, use :meth:`~.RelationshipProperty.Comparator.has`."
msgstr "：meth： `〜。RelationhipProperty.Comparator.any`はコレクションに対してのみ有効です。つまり、` `uselist = True``を持つ：func：` .relationship`です。スカラー参照の場合は、：meth： `〜。RelationhipProperty.Comparator.has`を使用します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:1
msgid ""
"Return a simple expression that tests a collection for containment of a "
"particular item."
msgstr "特定のアイテムの包含についてコレクションをテストする簡単な式を返します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:4
msgid ""
":meth:`~.RelationshipProperty.Comparator.contains` is only valid for a "
"collection, i.e. a :func:`~.orm.relationship` that implements one-to-many"
" or many-to-many with ``uselist=True``."
msgstr "：meth： `〜。RelationhipProperty.Comparator.contains`はコレクションに対してのみ有効です。つまり、` `uselist = True &#39;&#39;で1対多数または多対多を実装するa：func：`〜.orm.relationship` ``。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:9
msgid "When used in a simple one-to-many context, an expression like::"
msgstr "単純な一対多のコンテキストで使用する場合、::"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:14
msgid "Produces a clause like::"
msgstr "::のような節を生成する"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:18
msgid ""
"Where ``<some id>`` is the value of the foreign key attribute on "
"``other`` which refers to the primary key of its parent object. From this"
" it follows that :meth:`~.RelationshipProperty.Comparator.contains` is "
"very useful when used with simple one-to-many operations."
msgstr "`` <some id> ``は親オブジェクトの主キーを参照する `` other``の外部キー属性の値です。これにより、以下のようになります。meth： `〜。RelationhipProperty.Comparator.contains`は、単純な1対多の操作で使用すると非常に便利です。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:25
msgid ""
"For many-to-many operations, the behavior of "
":meth:`~.RelationshipProperty.Comparator.contains` has more caveats. The "
"association table will be rendered in the statement, producing an "
"\"implicit\" join, that is, includes multiple tables in the FROM clause "
"which are equated in the WHERE clause::"
msgstr "多対多の操作の場合、：meth： `〜。RelationhipProperty.Comparator.contains`の動作にはさらに注意が必要です。関連テーブルはステートメント内でレンダリングされ、\ &quot;暗黙的な\&quot;結合を生成します。つまり、WHERE句と同じFROM句に複数のテーブルが含まれます。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:34
msgid "Produces a query like::"
msgstr "::のようなクエリを生成する"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.contains:41
msgid ""
"Where ``<some id>`` would be the primary key of ``other``. From the "
"above, it is clear that "
":meth:`~.RelationshipProperty.Comparator.contains` will **not** work with"
" many-to-many collections when used in queries that move beyond simple "
"AND conjunctions, such as multiple "
":meth:`~.RelationshipProperty.Comparator.contains` expressions joined by "
"OR. In such cases subqueries or explicit \"outer joins\" will need to be "
"used instead. See :meth:`~.RelationshipProperty.Comparator.any` for a "
"less-performant alternative using EXISTS, or refer to "
":meth:`.Query.outerjoin` as well as :ref:`ormtutorial_joins` for more "
"details on constructing outer joins."
msgstr "`` <some id> 「他者」の主キーとなるだろう。上記から、：meth： `〜。RelationhipProperty.Comparator.contains`は、複数の：methのような単純なAND結合を超えたクエリで使用された場合、多対多のコレクションでは機能しません** ： `〜.RelationshipProperty.Comparator.contains`式がORで結合されています。このような場合、サブクエリまたは明示的な &quot;外部結合&quot;を代わりに使用する必要があります。以下を参照してください：meth： `〜.RelationshipProperty.Comparator.any`は、EXISTSを使用してパフォーマンスの低い代替案を参照するか、または：meth：` .Query.outerjoin`だけでなく、：outer： 。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.has:1
msgid ""
"Produce an expression that tests a scalar reference against particular "
"criterion, using EXISTS."
msgstr "EXISTSを使用して、特定の基準に対するスカラー参照をテストする式を生成します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.has:17
msgid ""
"Because :meth:`~.RelationshipProperty.Comparator.has` uses a correlated "
"subquery, its performance is not nearly as good when compared against "
"large target tables as that of using a join."
msgstr "：meth： `〜.RelationshipProperty.Comparator.has`は、相関サブクエリを使用するため、ジョインを使用する場合と同じように、大きなターゲット表と比較したときのパフォーマンスはそれほど良好ではありません。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.has:22
msgid ""
":meth:`~.RelationshipProperty.Comparator.has` is only valid for scalar "
"references, i.e. a :func:`.relationship` that has ``uselist=False``.  For"
" collection references, use "
":meth:`~.RelationshipProperty.Comparator.any`."
msgstr "：meth： `〜.RelationshipProperty.Comparator.has`は、スカラー参照、すなわち` `uselist = False``を持つa：func：` .relationship`に対してのみ有効です。コレクションのリファレンスは、：meth： `〜。RelationhipProperty.Comparator.any`を使用してください。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.in_:1
msgid ""
"Produce an IN clause - this is not implemented for "
":func:`~.orm.relationship`-based attributes at this time."
msgstr "IN節を生成する - これは現時点では：func： `〜.orm.relationship`ベースの属性に対して実装されていません。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.mapper:1
msgid ""
"The target :class:`.Mapper` referred to by this "
":class:`.RelationshipProperty.Comparator`."
msgstr "target：class： `.Mapper`はこれによって参照されます：class：` .RelationshipProperty.Comparator`。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.mapper:4
msgid "This is the \"target\" or \"remote\" side of the :func:`.relationship`."
msgstr "これは、：func： `.relationship`の\&quot; target \ &quot;または\&quot; remote \ &quot;側です。"

#: of sqlalchemy.orm.properties.RelationshipProperty.Comparator.of_type:3
msgid "See :meth:`.PropComparator.of_type` for an example."
msgstr "例については：meth： `.PropComparator.of_type`を参照してください。"

#: of sqlalchemy.orm.properties.RelationshipProperty.cascade:1
msgid ""
"Return the current cascade setting for this "
":class:`.RelationshipProperty`."
msgstr "このための現在のカスケード設定を返します：class： `.RelationshipProperty`。"

#: of sqlalchemy.orm.properties.RelationshipProperty.mapper:1
msgid ""
"Return the targeted :class:`.Mapper` for this "
":class:`.RelationshipProperty`."
msgstr "this：class： `.RelationshipProperty`のために、target：class：` .Mapper`を返します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.mapper:4
msgid "This is a lazy-initializing static attribute."
msgstr "これは遅延初期化静的属性です。"

#: of sqlalchemy.orm.properties.RelationshipProperty.table:1
msgid ""
"Return the selectable linked to this :class:`.RelationshipProperty` "
"object's target :class:`.Mapper`."
msgstr "この選択可能なクラスを：class： `.RelationshipProperty`オブジェクトのtarget：class：` .Mapper`にリンクして返します。"

#: of sqlalchemy.orm.properties.RelationshipProperty.table:5
msgid "Use .target"
msgstr ".targetを使用する"

#: of sqlalchemy.orm.attributes.QueryableAttribute:1
msgid ""
"Base class for :term:`descriptor` objects that intercept attribute events"
" on behalf of a :class:`.MapperProperty` object.  The actual "
":class:`.MapperProperty` is accessible via the "
":attr:`.QueryableAttribute.property` attribute."
msgstr "：class： `.MapperProperty`オブジェクトに代わって属性イベントをインターセプトするterm：` descriptor`オブジェクトの基本クラスです。実際の：class： `.MapperProperty`は、：attr：` .QueryableAttribute.property`属性でアクセスできます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute:10
msgid ":class:`.InstrumentedAttribute`"
msgstr "：クラス： `.InstrumentedAttribute`"

#: of sqlalchemy.orm.attributes.QueryableAttribute:12
msgid ":class:`.MapperProperty`"
msgstr "：クラス： `.MapperProperty`"

#: of sqlalchemy.orm.attributes.QueryableAttribute:16
msgid ":attr:`.Mapper.attrs`"
msgstr "：attr： `.Mapper.attrs`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:1
msgid "Return the 'info' dictionary for the underlying SQL element."
msgstr "基になるSQL要素の &#39;info&#39;ディクショナリを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:3
msgid "The behavior here is as follows:"
msgstr "ここでの動作は次のとおりです。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:5
msgid ""
"If the attribute is a column-mapped property, i.e. "
":class:`.ColumnProperty`, which is mapped directly to a schema-level "
":class:`.Column` object, this attribute will return the "
":attr:`.SchemaItem.info` dictionary associated with the core-level "
":class:`.Column` object."
msgstr "属性がカラムマップされたプロパティである場合、つまり：class： `.ColumnProperty`は、スキーマレベル：class：` .Column`オブジェクトに直接マップされます。この属性は：attr： `.SchemaItem.info `ディクショナリはcore-level：class：` .Column`オブジェクトに関連付けられています。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:11
msgid ""
"If the attribute is a :class:`.ColumnProperty` but is mapped to any other"
" kind of SQL expression other than a :class:`.Column`, the attribute will"
" refer to the :attr:`.MapperProperty.info` dictionary associated directly"
" with the :class:`.ColumnProperty`, assuming the SQL expression itself "
"does not have its own ``.info`` attribute (which should be the case, "
"unless a user-defined SQL construct has defined one)."
msgstr "属性が：class： `.ColumnProperty`であるが、a：class：` .Column`以外の他の種類のSQL式にマップされている場合、属性は：attr： `.MapperProperty.info`ディクショナリを参照します：class： `.ColumnProperty`で直接SQL式自体に` `.info``属性がないと仮定します（ユーザ定義のSQL構文で定義されていない限り）。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:19
msgid ""
"If the attribute refers to any other kind of :class:`.MapperProperty`, "
"including :class:`.RelationshipProperty`, the attribute will refer to the"
" :attr:`.MapperProperty.info` dictionary associated with that "
":class:`.MapperProperty`."
msgstr "属性が：class： `.MelpperProperty`の他の種類を参照する場合、：class：` .RelationshipProperty`を含む属性は：class： `に関連付けられた：attr：` .MapperProperty.info`ディクショナリを参照します。 MapperProperty`である。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:24
msgid ""
"To access the :attr:`.MapperProperty.info` dictionary of the "
":class:`.MapperProperty` unconditionally, including for a "
":class:`.ColumnProperty` that's associated directly with a "
":class:`.schema.Column`, the attribute can be referred to using "
":attr:`.QueryableAttribute.property` attribute, as "
"``MyClass.someattribute.property.info``."
msgstr "：class： `.MapperProperty`の：attr：` .MapperProperty.info`ディクショナリに無条件でアクセスするには、：class： `.ColumnProperty`を直接：class：` .schema.Column`に関連付けます。属性は：attr： `.QueryableAttribute.property`属性を` `MyClass.someattribute.property.info``として参照することができます。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.info:37
msgid ":attr:`.MapperProperty.info`"
msgstr "：attr： `.MapperProperty.info`"

#: of sqlalchemy.orm.attributes.QueryableAttribute.parent:1
msgid "Return an inspection instance representing the parent."
msgstr "親を表す検査インスタンスを返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.parent:3
msgid ""
"This will be either an instance of :class:`.Mapper` or "
":class:`.AliasedInsp`, depending upon the nature of the parent entity "
"which this attribute is associated with."
msgstr "これは、この属性が関連付けられている親エンティティの性質に応じて、class： `.Mapper`または：class：` .AliasedInsp`のインスタンスになります。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.property:1
msgid ""
"Return the :class:`.MapperProperty` associated with this "
":class:`.QueryableAttribute`."
msgstr "this：class： `.QueryableAttribute`に関連付けられた：class：` .MapperProperty`を返します。"

#: of sqlalchemy.orm.attributes.QueryableAttribute.property:5
msgid ""
"Return values here will commonly be instances of :class:`.ColumnProperty`"
" or :class:`.RelationshipProperty`."
msgstr "ここでの戻り値は、通常、class： `.ColumnProperty`または：class：` .RelationshipProperty`のインスタンスになります。"

#: of sqlalchemy.orm.session.UOWTransaction.filter_states_for_dep:1
msgid ""
"Filter the given list of InstanceStates to those relevant to the given "
"DependencyProcessor."
msgstr "InstanceStatesの指定されたリストを、指定されたDependencyProcessorに関連するものにフィルターします。"

#: of sqlalchemy.orm.session.UOWTransaction.finalize_flush_changes:1
msgid "mark processed objects as clean / deleted after a successful flush()."
msgstr "処理されたオブジェクトは、flush（）が成功した後にclean / deletedとしてマークします。"

#: of sqlalchemy.orm.session.UOWTransaction.finalize_flush_changes:4
msgid ""
"this method is called within the flush() method after the execute() "
"method has succeeded and the transaction has been committed."
msgstr "このメソッドは、execute（）メソッドが成功してトランザクションがコミットされた後に、flush（）メソッド内で呼び出されます。"

#: of sqlalchemy.orm.session.UOWTransaction.get_attribute_history:1
msgid "facade to attributes.get_state_history(), including caching of results."
msgstr "結果のキャッシュを含む、attributes.get_state_history（）のファサード"

#: of sqlalchemy.orm.session.UOWTransaction.is_deleted:1
msgid ""
"return true if the given state is marked as deleted within this "
"uowtransaction."
msgstr "指定された状態がこのUOWトランザクション内で削除済みとしてマークされている場合はtrueを返します。"

#: of sqlalchemy.orm.session.UOWTransaction.remove_state_actions:1
msgid "remove pending actions for a state from the uowtransaction."
msgstr "uowtransactionから状態の保留中のアクションを削除します。"

#: of sqlalchemy.orm.session.UOWTransaction.was_already_deleted:1
msgid "return true if the given state is expired and was deleted previously."
msgstr "指定された状態が期限切れで、以前に削除された場合はtrueを返します。"

