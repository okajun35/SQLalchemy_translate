# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/mapping_styles.rst:3
msgid "Types of Mappings"
msgstr "マッピングのタイプ"

#: ../../orm/mapping_styles.rst:5
msgid ""
"Modern SQLAlchemy features two distinct styles of mapper configuration. "
"The \"Classical\" style is SQLAlchemy's original mapping API, whereas "
"\"Declarative\" is the richer and more succinct system that builds on top"
" of \"Classical\".   Both styles may be used interchangeably, as the end "
"result of each is exactly the same - a user-defined class mapped by the "
":func:`.mapper` function onto a selectable unit, typically a "
":class:`.Table`."
msgstr "最新のSQLAlchemyには、2つの異なるスタイルのマッパー設定があります。 \ &quot;Classical \&quot;スタイルはSQLAlchemyのオリジナルマッピングAPIですが、 &quot;Declarative&quot;は\ &quot;Classical \&quot;の上に構築されたより豊かでより簡潔なシステムです。両方のスタイルは、それぞれの最終結果がまったく同じで、互換性をもって使用することができます。すなわち、：func： `.mapper`関数によって選択可能な単位、通常はclass：` .Table`にマッピングされたユーザ定義クラスです。"

#: ../../orm/mapping_styles.rst:13
msgid "Declarative Mapping"
msgstr "宣言的マッピング"

#: ../../orm/mapping_styles.rst:15
msgid ""
"The *Declarative Mapping* is the typical way that mappings are "
"constructed in modern SQLAlchemy. Making use of the "
":ref:`declarative_toplevel` system, the components of the user-defined "
"class as well as the :class:`.Table` metadata to which the class is "
"mapped are defined at once::"
msgstr "*宣言型マッピング*は、現代のSQLAlchemyでマッピングが構築される典型的な方法です。 ：ref： `declarative_toplevel`システムを利用すると、ユーザ定義クラスのコンポーネントと、クラスがマップされる：class：` .Table`メタデータが同時に定義されます："

#: ../../orm/mapping_styles.rst:35
msgid ""
"Above, a basic single-table mapping with four columns.   Additional "
"attributes, such as relationships to other mapped classes, are also "
"declared inline within the class definition::"
msgstr "上記の4つの列を持つ基本的な単一表のマッピング。他のマップされたクラスとの関係など、追加の属性もクラス定義内でインラインで宣言されます::"

#: ../../orm/mapping_styles.rst:56
msgid ""
"The declarative mapping system is introduced in the "
":ref:`ormtutorial_toplevel`.  For additional details on how this system "
"works, see :ref:`declarative_toplevel`."
msgstr "宣言型マッピングシステムは、：ref： `ormtutorial_toplevel`に導入されています。このシステムの動作の詳細については、：ref： `declarative_toplevel`を参照してください。"

#: ../../orm/mapping_styles.rst:63
msgid "Classical Mappings"
msgstr "古典的なマッピング"

#: ../../orm/mapping_styles.rst:65
msgid ""
"A *Classical Mapping* refers to the configuration of a mapped class using"
" the :func:`.mapper` function, without using the Declarative system.  "
"This is SQLAlchemy's original class mapping API, and is still the base "
"mapping system provided by the ORM."
msgstr "* Classical Mapping *は、宣言システムを使用せずに、：func： `.mapper`関数を使ってマップされたクラスの設定を参照します。これはSQLAlchemyの元のクラスマッピングAPIであり、依然としてORMによって提供されるベースマッピングシステムです。"

#: ../../orm/mapping_styles.rst:70
msgid ""
"In \"classical\" form, the table metadata is created separately with the "
":class:`.Table` construct, then associated with the ``User`` class via "
"the :func:`.mapper` function::"
msgstr "\ &quot;古典的な\&quot;形式では、テーブルメタデータは：class： `.Table`構造体で別々に作成され、次に：func：` .mapper`関数を介して `` User``クラスに関連付けられます::"

#: ../../orm/mapping_styles.rst:94
msgid ""
"Information about mapped attributes, such as relationships to other "
"classes, are provided via the ``properties`` dictionary.  The example "
"below illustrates a second :class:`.Table` object, mapped to a class "
"called ``Address``, then linked to ``User`` via :func:`.relationship`::"
msgstr "他のクラスとの関係など、マップされた属性に関する情報は、 `` properties``ディクショナリを介して提供されます。次の例は、 `` Address``というクラスにマップされ、 `` User``にリンクされた：class： `.Table`オブジェクトを示しています：func：` .relationship` ::"

#: ../../orm/mapping_styles.rst:110
msgid ""
"When using classical mappings, classes must be provided directly without "
"the benefit of the \"string lookup\" system provided by Declarative.  SQL"
" expressions are typically specified in terms of the :class:`.Table` "
"objects, i.e. ``address.c.id`` above for the ``Address`` relationship, "
"and not ``Address.id``, as ``Address`` may not yet be linked to table "
"metadata, nor can we specify a string here."
msgstr "古典的なマッピングを使用するときは、Declarativeが提供する\ &quot;string lookup \&quot;システムの利益を得ずに直接クラスを提供しなければなりません。 SQL式は通常：class： `.Table`オブジェクト、すなわち` `Address``ではなく` `Address``関係のための上記の` `address.c.id``オブジェクトの観点から指定されます。 `Address``はまだテーブルメタデータにリンクされていないかもしれませんし、ここで文字列を指定することもできません。"

#: ../../orm/mapping_styles.rst:116
msgid ""
"Some examples in the documentation still use the classical approach, but "
"note that the classical as well as Declarative approaches are **fully "
"interchangeable**.  Both systems ultimately create the same "
"configuration, consisting of a :class:`.Table`, user-defined class, "
"linked together with a :func:`.mapper`.  When we talk about \"the "
"behavior of :func:`.mapper`\", this includes when using the Declarative "
"system as well - it's still used, just behind the scenes."
msgstr "ドキュメントのいくつかの例では古典的アプローチを使用していますが、古典的アプローチと宣言的アプローチは**完全に互換性があります**。どちらのシステムも最終的に同じ設定を作成します：class： `.Table`、ユーザ定義のクラス、：func：` .mapper`でリンクされています。 ：func： `.mapper` \&quot;の振る舞いについて話すとき、Declarativeシステムを使うときもこれが含まれます - それはまだ舞台裏で使われています。"

#: ../../orm/mapping_styles.rst:124
msgid "Runtime Introspection of Mappings, Objects"
msgstr "マッピング、オブジェクトの実行時イントロスペクション"

#: ../../orm/mapping_styles.rst:126
msgid ""
"The :class:`.Mapper` object is available from any mapped class, "
"regardless of method, using the :ref:`core_inspection_toplevel` system.  "
"Using the :func:`.inspect` function, one can acquire the :class:`.Mapper`"
" from a mapped class::"
msgstr "：class： `.Mapper`オブジェクトは、メソッドに関係なく、：ref：` core_inspection_toplevel`システムを使って、マップされたクラスから利用できます。 ：func： `.inspect`関数を使うと、マップされたクラスから：class：` .Mapper`を取得することができます::"

#: ../../orm/mapping_styles.rst:134
msgid "Detailed information is available including :attr:`.Mapper.columns`::"
msgstr "attr： `.Mapper.columns` ::詳細情報が利用可能です。"

#: ../../orm/mapping_styles.rst:139
msgid ""
"This is a namespace that can be viewed in a list format or via individual"
" names::"
msgstr "これは、リスト形式または個々の名前で表示できる名前空間です。"

#: ../../orm/mapping_styles.rst:147
msgid ""
"Other namespaces include :attr:`.Mapper.all_orm_descriptors`, which "
"includes all mapped attributes as well as hybrids, association proxies::"
msgstr "他の名前空間には、attr： `.Mapper.all_orm_descriptors`があります。これには、すべてのマップされた属性とハイブリッド、アソシエーションプロキシ::"

#: ../../orm/mapping_styles.rst:155
msgid "As well as :attr:`.Mapper.column_attrs`::"
msgstr "同様に：attr： `.Mapper.column_attrs` ::"

#: ../../orm/mapping_styles.rst:166
msgid ":ref:`core_inspection_toplevel`"
msgstr "：ref： `core_inspection_toplevel`"

#: ../../orm/mapping_styles.rst:168
msgid ":class:`.Mapper`"
msgstr "：クラス： `.Mapper`"

#: ../../orm/mapping_styles.rst:170
msgid ":class:`.InstanceState`"
msgstr "：クラス： `.InstanceState`"

