# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/constructors.rst:6
msgid "Constructors and Object Initialization"
msgstr ""

#: ../../orm/constructors.rst:8
msgid ""
"Mapping imposes no restrictions or requirements on the constructor "
"(``__init__``) method for the class. You are free to require any "
"arguments for the function that you wish, assign attributes to the "
"instance that are unknown to the ORM, and generally do anything else you "
"would normally do when writing a constructor for a Python class."
msgstr ""

#: ../../orm/constructors.rst:14
msgid ""
"The SQLAlchemy ORM does not call ``__init__`` when recreating objects "
"from database rows. The ORM's process is somewhat akin to the Python "
"standard library's ``pickle`` module, invoking the low level ``__new__`` "
"method and then quietly restoring attributes directly on the instance "
"rather than calling ``__init__``."
msgstr ""

#: ../../orm/constructors.rst:20
msgid ""
"If you need to do some setup on database-loaded instances before they're "
"ready to use, there is an event hook known as "
":meth:`.InstanceEvents.load` which can achieve this; it is also available"
" via a class-specific decorator called :func:`.orm.reconstructor`.   When"
" using :func:`.orm.reconstructor`, the mapper will invoke the decorated "
"method with no arguments every time it loads or reconstructs an instance "
"of the class. This is useful for recreating transient properties that are"
" normally assigned in ``__init__``::"
msgstr ""

#: ../../orm/constructors.rst:42
msgid ""
"Above, when ``obj = MyMappedClass()`` is executed, the ``__init__`` "
"constructor is invoked normally and the ``data`` argument is required.  "
"When instances are loaded during a :class:`~sqlalchemy.orm.query.Query` "
"operation as in ``query(MyMappedClass).one()``, ``init_on_load`` is "
"called."
msgstr ""

#: ../../orm/constructors.rst:47
msgid ""
"Any method may be tagged as the :func:`.orm.reconstructor`, even the "
"``__init__`` method itself.    It is invoked after all immediate column-"
"level attributes are loaded as well as after eagerly-loaded scalar "
"relationships.  Eagerly loaded collections may be only partially "
"populated or not populated at all, depending on the kind of eager loading"
" used."
msgstr ""

#: ../../orm/constructors.rst:53
msgid ""
"ORM state changes made to objects at this stage will not be recorded for "
"the next flush operation, so the activity within a reconstructor should "
"be conservative."
msgstr ""

#: ../../orm/constructors.rst:57
msgid ""
":func:`.orm.reconstructor` is a shortcut into a larger system of "
"\"instance level\" events, which can be subscribed to using the event API"
" - see :class:`.InstanceEvents` for the full API description of these "
"events."
msgstr ""

#: of sqlalchemy.orm.reconstructor:1
msgid "Decorate a method as the 'reconstructor' hook."
msgstr ""

#: of sqlalchemy.orm.reconstructor:3
msgid ""
"Designates a method as the \"reconstructor\", an ``__init__``-like method"
" that will be called by the ORM after the instance has been loaded from "
"the database or otherwise reconstituted."
msgstr ""

#: of sqlalchemy.orm.reconstructor:7
msgid ""
"The reconstructor will be invoked with no arguments.  Scalar (non-"
"collection) database-mapped attributes of the instance will be available "
"for use within the function.  Eagerly-loaded collections are generally "
"not yet available and will usually only contain the first element.  ORM "
"state changes made to objects at this stage will not be recorded for the "
"next flush() operation, so the activity within a reconstructor should be "
"conservative."
msgstr ""

#: of sqlalchemy.orm.reconstructor:17
msgid ":ref:`mapping_constructors`"
msgstr ""

#: of sqlalchemy.orm.reconstructor:19
msgid ":meth:`.InstanceEvents.load`"
msgstr ""

