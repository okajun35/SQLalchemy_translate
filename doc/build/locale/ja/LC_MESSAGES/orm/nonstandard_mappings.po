# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/nonstandard_mappings.rst:3
msgid "Non-Traditional Mappings"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:8
msgid "Mapping a Class against Multiple Tables"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:10
msgid ""
"Mappers can be constructed against arbitrary relational units (called "
"*selectables*) in addition to plain tables. For example, the "
":func:`~.expression.join` function creates a selectable unit comprised of"
" multiple tables, complete with its own composite primary key, which can "
"be mapped in the same way as a :class:`.Table`::"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:49
msgid ""
"In the example above, the join expresses columns for both the ``user`` "
"and the ``address`` table.  The ``user.id`` and ``address.user_id`` "
"columns are equated by foreign key, so in the mapping they are defined as"
" one attribute, ``AddressUser.id``, using :func:`.column_property` to "
"indicate a specialized column mapping.   Based on this part of the "
"configuration, the mapping will copy new primary key values from "
"``user.id`` into the ``address.user_id`` column when a flush occurs."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:58
msgid ""
"Additionally, the ``address.id`` column is mapped explicitly to an "
"attribute named ``address_id``.   This is to **disambiguate** the mapping"
" of the ``address.id`` column from the same-named ``AddressUser.id`` "
"attribute, which here has been assigned to refer to the ``user`` table "
"combined with the ``address.user_id`` foreign key."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:64
msgid ""
"The natural primary key of the above mapping is the composite of "
"``(user.id, address.id)``, as these are the primary key columns of the "
"``user`` and ``address`` table combined together.  The identity of an "
"``AddressUser`` object will be in terms of these two values, and is "
"represented from an ``AddressUser`` object as ``(AddressUser.id, "
"AddressUser.address_id)``."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:73
msgid "Mapping a Class against Arbitrary Selects"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:75
msgid ""
"Similar to mapping against a join, a plain :func:`~.expression.select` "
"object can be used with a mapper as well.  The example fragment below "
"illustrates mapping a class called ``Customer`` to a "
":func:`~.expression.select` which includes a join to a subquery::"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:97
msgid ""
"Above, the full row represented by ``customer_select`` will be all the "
"columns of the ``customers`` table, in addition to those columns exposed "
"by the ``subq`` subquery, which are ``order_count``, ``highest_order``, "
"and ``customer_id``.  Mapping the ``Customer`` class to this selectable "
"then creates a class which will contain those attributes."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:104
msgid ""
"When the ORM persists new instances of ``Customer``, only the "
"``customers`` table will actually receive an INSERT.  This is because the"
" primary key of the ``orders`` table is not represented in the mapping;  "
"the ORM will only emit an INSERT into a table for which it has mapped the"
" primary key."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:112
msgid ""
"The practice of mapping to arbitrary SELECT statements, especially "
"complex ones as above, is almost never needed; it necessarily tends to "
"produce complex queries which are often less efficient than that which "
"would be produced by direct query construction.   The practice is to some"
" degree based on the very early history of SQLAlchemy where the "
":func:`.mapper` construct was meant to represent the primary querying "
"interface; in modern usage, the :class:`.Query` object can be used to "
"construct virtually any SELECT statement, including complex composites, "
"and should be favored over the \"map-to-selectable\" approach."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:124
msgid "Multiple Mappers for One Class"
msgstr ""

#: ../../orm/nonstandard_mappings.rst:126
msgid ""
"In modern SQLAlchemy, a particular class is mapped by only one so-called "
"**primary** mapper at a time.   This mapper is involved in three main "
"areas of functionality: querying, persistence, and instrumentation of the"
" mapped class.   The rationale of the primary mapper relates to the fact "
"that the :func:`.mapper` modifies the class itself, not only persisting "
"it towards a particular :class:`.Table`, but also :term:`instrumenting` "
"attributes upon the class which are structured specifically according to "
"the table metadata.   It's not possible for more than one mapper to be "
"associated with a class in equal measure, since only one mapper can "
"actually instrument the class."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:137
msgid ""
"However, there is a class of mapper known as the **non primary** mapper "
"which allows additional mappers to be associated with a class, but with a"
" limited scope of use.   This scope typically applies to being able to "
"load rows from an alternate table or selectable unit, but still producing"
" classes which are ultimately persisted using the primary mapping.    The"
" non-primary mapper is created using the classical style of mapping "
"against a class that is already mapped with a primary mapper, and "
"involves the use of the :paramref:`~sqlalchemy.orm.mapper.non_primary` "
"flag."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:147
msgid ""
"The non primary mapper is of very limited use in modern SQLAlchemy, as "
"the task of being able to load classes from subqueries or other compound "
"statements can be now accomplished using the :class:`.Query` object "
"directly."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:151
msgid ""
"There is really only one use case for the non-primary mapper, which is "
"that we wish to build a :func:`.relationship` to such a mapper; this is "
"useful in the rare and advanced case that our relationship is attempting "
"to join two classes together using many tables and/or joins in between.  "
"An example of this pattern is at :ref:`relationship_non_primary_mapper`."
msgstr ""

#: ../../orm/nonstandard_mappings.rst:157
msgid ""
"As far as the use case of a class that can actually be fully persisted to"
" different tables under different scenarios, very early versions of "
"SQLAlchemy offered a feature for this adapted from Hibernate, known as "
"the \"entity name\" feature.  However, this use case became infeasable "
"within SQLAlchemy once the mapped class itself became the source of SQL "
"expression construction; that is, the class' attributes themselves link "
"directly to mapped table columns.   The feature was removed and replaced "
"with a simple recipe-oriented approach to accomplishing this task without"
" any ambiguity of instrumentation - to create new subclasses, each mapped"
" individually.  This pattern is now available as a recipe at `Entity Name"
" <http://www.sqlalchemy.org/trac/wiki/UsageRecipes/EntityName>`_."
msgstr ""

