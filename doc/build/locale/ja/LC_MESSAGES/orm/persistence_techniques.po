# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/persistence_techniques.rst:3
msgid "Additional Persistence Techniques"
msgstr ""

#: ../../orm/persistence_techniques.rst:8
msgid "Embedding SQL Insert/Update Expressions into a Flush"
msgstr ""

#: ../../orm/persistence_techniques.rst:10
msgid ""
"This feature allows the value of a database column to be set to a SQL "
"expression instead of a literal value. It's especially useful for atomic "
"updates, calling stored procedures, etc. All you do is assign an "
"expression to an attribute::"
msgstr ""

#: ../../orm/persistence_techniques.rst:27
msgid ""
"This technique works both for INSERT and UPDATE statements. After the "
"flush/commit operation, the ``value`` attribute on ``someobject`` above "
"is expired, so that when next accessed the newly generated value will be "
"loaded from the database."
msgstr ""

#: ../../orm/persistence_techniques.rst:35
msgid "Using SQL Expressions with Sessions"
msgstr ""

#: ../../orm/persistence_techniques.rst:37
msgid ""
"SQL expressions and strings can be executed via the "
":class:`~sqlalchemy.orm.session.Session` within its transactional "
"context. This is most easily accomplished using the "
":meth:`~.Session.execute` method, which returns a "
":class:`~sqlalchemy.engine.ResultProxy` in the same manner as an "
":class:`~sqlalchemy.engine.Engine` or "
":class:`~sqlalchemy.engine.Connection`::"
msgstr ""

#: ../../orm/persistence_techniques.rst:54
msgid ""
"The current :class:`~sqlalchemy.engine.Connection` held by the "
":class:`~sqlalchemy.orm.session.Session` is accessible using the "
":meth:`~.Session.connection` method::"
msgstr ""

#: ../../orm/persistence_techniques.rst:60
msgid ""
"The examples above deal with a :class:`~sqlalchemy.orm.session.Session` "
"that's bound to a single :class:`~sqlalchemy.engine.Engine` or "
":class:`~sqlalchemy.engine.Connection`. To execute statements using a "
":class:`~sqlalchemy.orm.session.Session` which is bound either to "
"multiple engines, or none at all (i.e. relies upon bound metadata), both "
":meth:`~.Session.execute` and :meth:`~.Session.connection` accept a "
"``mapper`` keyword argument, which is passed a mapped class or "
":class:`~sqlalchemy.orm.mapper.Mapper` instance, which is used to locate "
"the proper context for the desired engine::"
msgstr ""

#: ../../orm/persistence_techniques.rst:84
msgid "Forcing NULL on a column with a default"
msgstr ""

#: ../../orm/persistence_techniques.rst:86
msgid ""
"The ORM considers any attribute that was never set on an object as a "
"\"default\" case; the attribute will be omitted from the INSERT "
"statement::"
msgstr ""

#: ../../orm/persistence_techniques.rst:99
msgid ""
"Omitting a column from the INSERT means that the column will have the "
"NULL value set, *unless* the column has a default set up, in which case "
"the default value will be persisted.   This holds true both from a pure "
"SQL perspective with server-side defaults, as well as the behavior of "
"SQLAlchemy's insert behavior with both client-side and server-side "
"defaults::"
msgstr ""

#: ../../orm/persistence_techniques.rst:116
msgid ""
"However, in the ORM, even if one assigns the Python value ``None`` "
"explicitly to the object, this is treated the **same** as though the "
"value were never assigned::"
msgstr ""

#: ../../orm/persistence_techniques.rst:131
msgid ""
"The above operation will persist into the ``data`` column the server "
"default value of ``\"default\"`` and not SQL NULL, even though ``None`` "
"was passed; this is a long-standing behavior of the ORM that many "
"applications hold as an assumption."
msgstr ""

#: ../../orm/persistence_techniques.rst:136
msgid ""
"So what if we want to actually put NULL into this column, even though the"
" column has a default value?  There are two approaches.  One is that on a"
" per-instance level, we assign the attribute using the "
":obj:`~.expression.null` SQL construct::"
msgstr ""

#: ../../orm/persistence_techniques.rst:150
msgid ""
"The :obj:`~.expression.null` SQL construct always translates into the SQL"
" NULL value being directly present in the target INSERT statement."
msgstr ""

#: ../../orm/persistence_techniques.rst:153
msgid ""
"If we'd like to be able to use the Python value ``None`` and have this "
"also be persisted as NULL despite the presence of column defaults, we can"
" configure this for the ORM using a Core-level modifier "
":meth:`.TypeEngine.evaluates_none`, which indicates a type where the ORM "
"should treat the value ``None`` the same as any other value and pass it "
"through, rather than omitting it as a \"missing\" value::"
msgstr ""

#: ../../orm/persistence_techniques.rst:176
msgid ""
"The :meth:`.TypeEngine.evaluates_none` modifier is primarily intended to "
"signal a type where the Python value \"None\" is significant, the primary"
" example being a JSON type which may want to persist the JSON ``null`` "
"value rather than SQL NULL.  We are slightly repurposing it here in order"
" to signal to the ORM that we'd like ``None`` to be passed into the type "
"whenever present, even though no special type-level behaviors are "
"assigned to it."
msgstr ""

#: ../../orm/persistence_techniques.rst:183
msgid ""
"added the :meth:`.TypeEngine.evaluates_none` method in order to indicate "
"that a \"None\" value should be treated as significant."
msgstr ""

#: ../../orm/persistence_techniques.rst:189
msgid "Fetching Server-Generated Defaults"
msgstr ""

#: ../../orm/persistence_techniques.rst:191
msgid ""
"As introduced in the sections :ref:`server_defaults` and "
":ref:`triggered_columns`, the Core supports the notion of database "
"columns for which the database itself generates a value upon INSERT and "
"in less common cases upon UPDATE statements.  The ORM features support "
"for such columns regarding being able to fetch these newly generated "
"values upon flush.   This behavior is required in the case of primary key"
" columns that are generated by the server, since the ORM has to know the "
"primary key of an object once it is persisted."
msgstr ""

#: ../../orm/persistence_techniques.rst:199
msgid ""
"In the vast majority of cases, primary key columns that have their value "
"generated automatically by the database are  simple integer columns, "
"which are implemented by the database as either a so-called "
"\"autoincrement\" column, or from a sequence associated with the column."
"   Every database dialect within SQLAlchemy Core supports a method of "
"retrieving these primary key values which is often native to the Python "
"DBAPI, and in general this process is automatic, with the exception of a "
"database like Oracle that requires us to specify a :class:`.Sequence` "
"explicitly.   There is more documentation regarding this at "
":paramref:`.Column.autoincrement`."
msgstr ""

#: ../../orm/persistence_techniques.rst:209
msgid ""
"For server-generating columns that are not primary key columns or that "
"are not simple autoincrementing integer columns, the ORM requires that "
"these columns are marked with an appropriate server_default directive "
"that allows the ORM to retrieve this value.   Not all methods are "
"supported on all backends, however, so care must be taken to use the "
"appropriate method. The two questions to be answered are, 1. is this "
"column part of the primary key or not, and 2. does the database support "
"RETURNING or an equivalent, such as \"OUTPUT inserted\"; these are SQL "
"phrases which return a server-generated value at the same time as the "
"INSERT or UPDATE statement is invoked. Databases that support RETURNING "
"or equivalent include PostgreSQL, Oracle, and SQL Server.  Databases that"
" do not include SQLite and MySQL."
msgstr ""

#: ../../orm/persistence_techniques.rst:222
msgid "Case 1: non primary key, RETURNING or equivalent is supported"
msgstr ""

#: ../../orm/persistence_techniques.rst:224
msgid ""
"In this case, columns should be marked as :class:`.FetchedValue` or with "
"an explicit :paramref:`.Column.server_default`.   The "
":paramref:`.orm.mapper.eager_defaults` flag may be used to indicate that "
"these columns should be fetched immediately upon INSERT and sometimes "
"UPDATE::"
msgstr ""

#: ../../orm/persistence_techniques.rst:242
msgid ""
"Above, an INSERT statement that does not specify explicit values for "
"\"timestamp\" or \"special_identifier\" from the client side will include"
" the \"timestamp\" and \"special_identifier\" columns within the "
"RETURNING clause so they are available immediately. On the PostgreSQL "
"database, an INSERT for the above table will look like:"
msgstr ""

#: ../../orm/persistence_techniques.rst:253
msgid ""
"Case 2: non primary key, RETURNING or equivalent is not supported or not "
"needed"
msgstr ""

#: ../../orm/persistence_techniques.rst:255
msgid ""
"This case is the same as case 1 above, except we don't specify "
":paramref:`.orm.mapper.eager_defaults`::"
msgstr ""

#: ../../orm/persistence_techniques.rst:268
msgid ""
"After a record with the above mapping is INSERTed, the \"timestamp\" and "
"\"special_identifier\" columns will remain empty, and will be fetched via"
" a second SELECT statement when they are first accessed after the flush, "
"e.g. they are marked as \"expired\"."
msgstr ""

#: ../../orm/persistence_techniques.rst:273
msgid ""
"If the :paramref:`.orm.mapper.eager_defaults` is still used, and the "
"backend database does not support RETURNING or an equivalent, the ORM "
"will emit this SELECT statement immediately following the INSERT "
"statement.   This is often undesirable as it adds additional SELECT "
"statements to the flush process that may not be needed.  Using the above "
"mapping with the :paramref:`.orm.mapper.eager_defaults` flag set to True "
"against MySQL results in SQL like this upon flush (minus the comment, "
"which is for clarification only):"
msgstr ""

#: ../../orm/persistence_techniques.rst:290
msgid "Case 3: primary key, RETURNING or equivalent is supported"
msgstr ""

#: ../../orm/persistence_techniques.rst:292
msgid ""
"A primary key column with a server-generated value must be fetched "
"immediately upon INSERT; the ORM can only access rows for which it has a "
"primary key value, so if the primary key is generated by the server, the "
"ORM needs a way for the database to give us that new value immediately "
"upon INSERT."
msgstr ""

#: ../../orm/persistence_techniques.rst:297
msgid ""
"As mentioned above, for integer \"autoincrement\" columns as well as "
"PostgreSQL SERIAL, these types are handled automatically by the Core; "
"databases include functions for fetching the \"last inserted id\" where "
"RETURNING is not supported, and where RETURNING is supported SQLAlchemy "
"will use that."
msgstr ""

#: ../../orm/persistence_techniques.rst:302
msgid ""
"However, for non-integer values, as well as for integer values that must "
"be explicitly linked to a sequence or other triggered routine,  the "
"server default generation must be marked in the table metadata."
msgstr ""

#: ../../orm/persistence_techniques.rst:306
msgid ""
"For an explicit sequence as we use with Oracle, this just means we are "
"using the :class:`.Sequence` construct::"
msgstr ""

#: ../../orm/persistence_techniques.rst:315
msgid "The INSERT for a model as above on Oracle looks like:"
msgstr ""

#: ../../orm/persistence_techniques.rst:321
msgid ""
"Where above, SQLAlchemy renders ``my_sequence.nextval`` for the primary "
"key column and also uses RETURNING to get the new value back immediately."
msgstr ""

#: ../../orm/persistence_techniques.rst:324
msgid ""
"For datatypes that generate values automatically, or columns that are "
"populated by a trigger, we use :class:`.FetchedValue`.  Below is a model "
"that uses a SQL Server TIMESTAMP column as the primary key, which "
"generates values automatically::"
msgstr ""

#: ../../orm/persistence_techniques.rst:333
msgid "An INSERT for the above table on SQL Server looks like:"
msgstr ""

#: ../../orm/persistence_techniques.rst:340
msgid "Case 4: primary key, RETURNING or equivalent is not supported"
msgstr ""

#: ../../orm/persistence_techniques.rst:342
msgid ""
"In this area we are generating rows for a database such as SQLite or "
"MySQL where some means of generating a default is occurring on the "
"server, but is outside of the database's usual autoincrement routine. In "
"this case, we have to make sure SQLAlchemy can \"pre-execute\" the "
"default, which means it has to be an explicit SQL expression."
msgstr ""

#: ../../orm/persistence_techniques.rst:348
msgid ""
"This section will will illustrate multiple recipes involving datetime "
"values for MySQL and SQLite, since the datetime datatypes on these two  "
"backends have additional idiosyncratic requirements that are useful to "
"illustrate.  Keep in mind however that SQLite and MySQL require an "
"explicit \"pre-executed\" default generator for *any* auto-generated "
"datatype used as the primary key other than the usual single-column "
"autoincrementing integer value."
msgstr ""

#: ../../orm/persistence_techniques.rst:357
msgid "MySQL with DateTime primary key"
msgstr ""

#: ../../orm/persistence_techniques.rst:359
msgid ""
"Using the example of a :class:`.DateTime` column for MySQL, we add an "
"explicit pre-execute-supported default using the \"NOW()\" SQL function::"
msgstr ""

#: ../../orm/persistence_techniques.rst:367
msgid ""
"Where above, we select the \"NOW()\" function to deliver a datetime value"
" to the column.  The SQL generated by the above is:"
msgstr ""

#: ../../orm/persistence_techniques.rst:377
msgid "MySQL with TIMESTAMP primary key"
msgstr ""

#: ../../orm/persistence_techniques.rst:379
msgid ""
"When using the :class:`.TIMESTAMP` datatype with MySQL, MySQL ordinarily "
"associates a server-side default with this datatype automatically.  "
"However when we use one as a primary key, the Core cannot retrieve the "
"newly generated value unless we execute the function ourselves.  As "
":class:`.TIMESTAMP` on MySQL actually stores a binary value, we need to "
"add an additional \"CAST\" to our usage of \"NOW()\" so that we retrieve "
"a binary value that can be persisted into the column::"
msgstr ""

#: ../../orm/persistence_techniques.rst:397
msgid ""
"Above, in addition to selecting the \"NOW()\" function, we additionally "
"make use of the :class:`.Binary` datatype in conjunction with "
":func:`.cast` so that the returned value is binary.  SQL rendered from "
"the above within an INSERT looks like:"
msgstr ""

#: ../../orm/persistence_techniques.rst:409
msgid "SQLite with DateTime primary key"
msgstr ""

#: ../../orm/persistence_techniques.rst:411
msgid ""
"For SQLite, new timestamps can be generated using the SQL function "
"``datetime('now', 'localtime')`` (or specify ``'utc'`` for UTC), however "
"making things more complicated is that this returns a string value, which"
" is then incompatible with SQLAlchemy's :class:`.DateTime` datatype (even"
" though the datatype converts the information back into a string for the "
"SQLite backend, it must be passed through as a Python datetime). We "
"therefore must also specify that we'd like to coerce the return value to "
":class:`.DateTime` when it is returned from the function, which we "
"achieve by passing this as the ``type_`` parameter::"
msgstr ""

#: ../../orm/persistence_techniques.rst:429
msgid "The above mapping upon INSERT will look like:"
msgstr ""

#: ../../orm/persistence_techniques.rst:441
msgid ":ref:`metadata_defaults_toplevel`"
msgstr ""

#: ../../orm/persistence_techniques.rst:447
msgid "Partitioning Strategies"
msgstr ""

#: ../../orm/persistence_techniques.rst:450
msgid "Simple Vertical Partitioning"
msgstr ""

#: ../../orm/persistence_techniques.rst:452
msgid ""
"Vertical partitioning places different kinds of objects, or different "
"tables, across multiple databases::"
msgstr ""

#: ../../orm/persistence_techniques.rst:465
msgid ""
"Above, operations against either class will make usage of the "
":class:`.Engine` linked to that class.   Upon a flush operation, similar "
"rules take place to ensure each class is written to the right database."
msgstr ""

#: ../../orm/persistence_techniques.rst:469
msgid ""
"The transactions among the multiple databases can optionally be "
"coordinated via two phase commit, if the underlying backend supports it."
"  See :ref:`session_twophase` for an example."
msgstr ""

#: ../../orm/persistence_techniques.rst:474
msgid "Custom Vertical Partitioning"
msgstr ""

#: ../../orm/persistence_techniques.rst:476
msgid ""
"More comprehensive rule-based class-level partitioning can be built by "
"overriding the :meth:`.Session.get_bind` method.   Below we illustrate a "
"custom :class:`.Session` which delivers the following rules:"
msgstr ""

#: ../../orm/persistence_techniques.rst:480
msgid "Flush operations are delivered to the engine named ``master``."
msgstr ""

#: ../../orm/persistence_techniques.rst:482
msgid ""
"Operations on objects that subclass ``MyOtherClass`` all occur on the "
"``other`` engine."
msgstr ""

#: ../../orm/persistence_techniques.rst:485
msgid ""
"Read operations for all other classes occur on a random choice of the "
"``slave1`` or ``slave2`` database."
msgstr ""

#: ../../orm/persistence_techniques.rst:511
msgid ""
"The above :class:`.Session` class is plugged in using the ``class_`` "
"argument to :class:`.sessionmaker`::"
msgstr ""

#: ../../orm/persistence_techniques.rst:516
msgid ""
"This approach can be combined with multiple :class:`.MetaData` objects, "
"using an approach such as that of using the declarative ``__abstract__`` "
"keyword, described at :ref:`declarative_abstract`."
msgstr ""

#: ../../orm/persistence_techniques.rst:521
msgid "Horizontal Partitioning"
msgstr ""

#: ../../orm/persistence_techniques.rst:523
msgid ""
"Horizontal partitioning partitions the rows of a single table (or a set "
"of tables) across multiple databases."
msgstr ""

#: ../../orm/persistence_techniques.rst:526
msgid "See the \"sharding\" example: :ref:`examples_sharding`."
msgstr ""

#: ../../orm/persistence_techniques.rst:531
msgid "Bulk Operations"
msgstr ""

#: ../../orm/persistence_techniques.rst:533
msgid ""
"Bulk Operations mode is a new series of operations made available on the "
":class:`.Session` object for the purpose of invoking INSERT and UPDATE "
"statements with greatly reduced Python overhead, at the expense of much "
"less functionality, automation, and error checking. As of SQLAlchemy 1.0,"
" these features should be considered as \"beta\", and additionally are "
"intended for advanced users."
msgstr ""

#: ../../orm/persistence_techniques.rst:542
msgid ""
"Bulk operations on the :class:`.Session` include "
":meth:`.Session.bulk_save_objects`, "
":meth:`.Session.bulk_insert_mappings`, and "
":meth:`.Session.bulk_update_mappings`. The purpose of these methods is to"
" directly expose internal elements of the unit of work system, such that "
"facilities for emitting INSERT and UPDATE statements given dictionaries "
"or object states can be utilized alone, bypassing the normal unit of work"
" mechanics of state, relationship and attribute management.   The "
"advantages to this approach is strictly one of reduced Python overhead:"
msgstr ""

#: ../../orm/persistence_techniques.rst:550
msgid ""
"The flush() process, including the survey of all objects, their state, "
"their cascade status, the status of all objects associated with them via "
":func:`.relationship`, and the topological sort of all operations to be "
"performed is completely bypassed.  This reduces a great amount of Python "
"overhead."
msgstr ""

#: ../../orm/persistence_techniques.rst:556
msgid ""
"The objects as given have no defined relationship to the target "
":class:`.Session`, even when the operation is complete, meaning there's "
"no overhead in attaching them or managing their state in terms of the "
"identity map or session."
msgstr ""

#: ../../orm/persistence_techniques.rst:561
msgid ""
"The :meth:`.Session.bulk_insert_mappings` and "
":meth:`.Session.bulk_update_mappings` methods accept lists of plain "
"Python dictionaries, not objects; this further reduces a large amount of "
"overhead associated with instantiating mapped objects and assigning state"
" to them, which normally is also subject to expensive tracking of history"
" on a per-attribute basis."
msgstr ""

#: ../../orm/persistence_techniques.rst:567
msgid ""
"The set of objects passed to all bulk methods are processed in the order "
"they are received.   In the case of :meth:`.Session.bulk_save_objects`, "
"when objects of different types are passed, the INSERT and UPDATE "
"statements are necessarily broken up into per-type groups.  In order to "
"reduce the number of batch INSERT or UPDATE statements passed to the "
"DBAPI, ensure that the incoming list of objects are grouped by type."
msgstr ""

#: ../../orm/persistence_techniques.rst:575
msgid ""
"The process of fetching primary keys after an INSERT also is disabled by "
"default.   When performed correctly, INSERT statements can now more "
"readily be batched by the unit of work process into ``executemany()`` "
"blocks, which perform vastly better than individual statement "
"invocations."
msgstr ""

#: ../../orm/persistence_techniques.rst:580
msgid ""
"UPDATE statements can similarly be tailored such that all attributes are "
"subject to the SET clase unconditionally, again making it much more "
"likely that ``executemany()`` blocks can be used."
msgstr ""

#: ../../orm/persistence_techniques.rst:584
msgid ""
"The performance behavior of the bulk routines should be studied using the"
" :ref:`examples_performance` example suite.  This is a series of example "
"scripts which illustrate Python call-counts across a variety of "
"scenarios, including bulk insert and update scenarios."
msgstr ""

#: ../../orm/persistence_techniques.rst:591
msgid ""
":ref:`examples_performance` - includes detailed examples of bulk "
"operations contrasted against traditional Core and ORM methods, including"
" performance metrics."
msgstr ""

#: ../../orm/persistence_techniques.rst:596
msgid "Usage"
msgstr ""

#: ../../orm/persistence_techniques.rst:598
msgid ""
"The methods each work in the context of the :class:`.Session` object's "
"transaction, like any other::"
msgstr ""

#: ../../orm/persistence_techniques.rst:609
msgid ""
"For :meth:`.Session.bulk_insert_mappings`, and "
":meth:`.Session.bulk_update_mappings`, dictionaries are passed::"
msgstr ""

#: ../../orm/persistence_techniques.rst:618
msgid ":meth:`.Session.bulk_save_objects`"
msgstr ""

#: ../../orm/persistence_techniques.rst:620
msgid ":meth:`.Session.bulk_insert_mappings`"
msgstr ""

#: ../../orm/persistence_techniques.rst:622
msgid ":meth:`.Session.bulk_update_mappings`"
msgstr ""

#: ../../orm/persistence_techniques.rst:626
msgid "Comparison to Core Insert / Update Constructs"
msgstr ""

#: ../../orm/persistence_techniques.rst:628
msgid ""
"The bulk methods offer performance that under particular circumstances "
"can be close to that of using the core :class:`.Insert` and "
":class:`.Update` constructs in an \"executemany\" context (for a "
"description of \"executemany\", see :ref:`execute_multiple` in the Core "
"tutorial). In order to achieve this, the "
":paramref:`.Session.bulk_insert_mappings.return_defaults` flag should be "
"disabled so that rows can be batched together.   The example suite in "
":ref:`examples_performance` should be carefully studied in order to gain "
"familiarity with how fast bulk performance can be achieved."
msgstr ""

#: ../../orm/persistence_techniques.rst:639
msgid "ORM Compatibility"
msgstr ""

#: ../../orm/persistence_techniques.rst:641
msgid ""
"The bulk insert / update methods lose a significant amount of "
"functionality versus traditional ORM use.   The following is a listing of"
" features that are **not available** when using these methods:"
msgstr ""

#: ../../orm/persistence_techniques.rst:645
msgid "persistence along :func:`.relationship` linkages"
msgstr ""

#: ../../orm/persistence_techniques.rst:647
msgid ""
"sorting of rows within order of dependency; rows are inserted or updated "
"directly in the order in which they are passed to the methods"
msgstr ""

#: ../../orm/persistence_techniques.rst:650
msgid ""
"Session-management on the given objects, including attachment to the "
"session, identity map management."
msgstr ""

#: ../../orm/persistence_techniques.rst:653
msgid "Functionality related to primary key mutation, ON UPDATE cascade"
msgstr ""

#: ../../orm/persistence_techniques.rst:655
msgid ""
"SQL expression inserts / updates (e.g. "
":ref:`flush_embedded_sql_expressions`)"
msgstr ""

#: ../../orm/persistence_techniques.rst:657
msgid ""
"ORM events such as :meth:`.MapperEvents.before_insert`, etc.  The bulk "
"session methods have no event support."
msgstr ""

#: ../../orm/persistence_techniques.rst:660
msgid "Features that **are available** include:"
msgstr ""

#: ../../orm/persistence_techniques.rst:662
msgid "INSERTs and UPDATEs of mapped objects"
msgstr ""

#: ../../orm/persistence_techniques.rst:664
msgid "Version identifier support"
msgstr ""

#: ../../orm/persistence_techniques.rst:666
msgid ""
"Multi-table mappings, such as joined-inheritance - however, an object to "
"be inserted across multiple tables either needs to have primary key "
"identifiers fully populated ahead of time, else the "
":paramref:`.Session.bulk_save_objects.return_defaults` flag must be used,"
" which will greatly reduce the performance benefits"
msgstr ""

