# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../orm/deprecated.rst:6
msgid "Deprecated ORM Event Interfaces"
msgstr "非推奨のORMイベントインターフェイス"

#: ../../orm/deprecated.rst:10
msgid ""
"This section describes the class-based ORM event interface which first "
"existed in SQLAlchemy 0.1, which progressed with more kinds of events up "
"until SQLAlchemy 0.5.  The non-ORM analogue is described at "
":ref:`dep_interfaces_core_toplevel`."
msgstr "このセクションでは、SQLAlchemy 0.1にはじめて登場したクラスベースのORMイベントインターフェイスについて説明します。これは、SQLAlchemy 0.5までさらに多くの種類のイベントが進行しました。非ORMアナログは：ref： `dep_interfaces_core_toplevel`に記述されています。"

#: ../../orm/deprecated.rst:14
msgid ""
"As of SQLAlchemy 0.7, the new event system described in "
":ref:`event_toplevel` replaces the extension/proxy/listener system, "
"providing a consistent interface to all events without the need for "
"subclassing."
msgstr "SQLAlchemy 0.7以降、：ref： `event_toplevel`に記述された新しいイベントシステムは、拡張/プロキシ/リスナーシステムを置き換え、サブクラス化を必要とせずにすべてのイベントに対して一貫したインターフェースを提供します。"

#: ../../orm/deprecated.rst:20
msgid "Mapper Events"
msgstr "マッパーイベント"

#: of sqlalchemy.orm.interfaces.MapperExtension:1
msgid "Base implementation for :class:`.Mapper` event hooks."
msgstr "class： `.Mapper`イベントフックの基本実装です。"

#: of sqlalchemy.orm.interfaces.MapperExtension:5
msgid ""
":class:`.MapperExtension` is deprecated.   Please refer to "
":func:`.event.listen` as well as :class:`.MapperEvents`."
msgstr "：class： `.MapperExtension`は推奨されていません。 func： `.event.listen`と：class：` .MapperEvents`を参照してください。"

#: of sqlalchemy.orm.interfaces.MapperExtension:9
msgid ""
"New extension classes subclass :class:`.MapperExtension` and are "
"specified using the ``extension`` mapper() argument, which is a single "
":class:`.MapperExtension` or a list of such::"
msgstr "新しい拡張クラスsubclass：class： `.MapperExtension`そして` `extension`` mapper（）引数を使用して指定されます。この引数はclass：` .MapperExtension`またはそのようなリストです："

#: of sqlalchemy.orm.interfaces.MapperExtension:21
msgid ""
"A single mapper can maintain a chain of ``MapperExtension`` objects. When"
" a particular mapping event occurs, the corresponding method on each "
"``MapperExtension`` is invoked serially, and each method has the ability "
"to halt the chain from proceeding further::"
msgstr "単一のマッパーは、 `` MapperExtension``オブジェクトの連鎖を維持することができます。特定のマッピングイベントが発生すると、各「MapperExtension」に対応するメソッドが順次呼び出され、各メソッドはチェーンをさらに進めるのを止めることができます::"

#: of sqlalchemy.orm.interfaces.MapperExtension:29
msgid ""
"Each ``MapperExtension`` method returns the symbol EXT_CONTINUE by "
"default.   This symbol generally means \"move to the next "
"``MapperExtension`` for processing\".  For methods that return objects "
"like translated rows or new object instances, EXT_CONTINUE means the "
"result of the method should be ignored.   In some cases it's required for"
" a default mapper activity to be performed, such as adding a new instance"
" to a result list."
msgstr "それぞれの `` MapperExtension``メソッドは、デフォルトでシンボルEXT_CONTINUEを返します。このシンボルは一般に、\ &quot;を処理するために次の` `MapperExtension``に移動することを意味します。変換された行や新しいオブジェクトインスタンスのようなオブジェクトを返すメソッドの場合、EXT_CONTINUEはメソッドの結果を無視することを意味します。場合によっては、結果リストに新しいインスタンスを追加するなど、デフォルトのマッパーアクティビティーを実行する必要があります。"

#: of sqlalchemy.orm.interfaces.MapperExtension:38
msgid ""
"The symbol EXT_STOP has significance within a chain of "
"``MapperExtension`` objects that the chain will be stopped when this "
"symbol is returned.  Like EXT_CONTINUE, it also has additional "
"significance in some cases that a default mapper activity will not be "
"performed."
msgstr "シンボルEXT_STOPは、 `` MapperExtension``オブジェクトのチェーン内で、このシンボルが返されたときにチェーンが停止する意味を持ちます。 EXT_CONTINUEと同様に、デフォルトのマッパーアクティビティーが実行されない場合もあります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.after_delete:1
msgid "Receive an object instance after that instance is deleted."
msgstr "インスタンスが削除された後にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.after_delete:3
#: sqlalchemy.orm.interfaces.MapperExtension.after_insert:3
#: sqlalchemy.orm.interfaces.MapperExtension.after_update:3
#: sqlalchemy.orm.interfaces.MapperExtension.before_delete:8
#: sqlalchemy.orm.interfaces.MapperExtension.before_insert:14
#: sqlalchemy.orm.interfaces.MapperExtension.before_update:25
#: sqlalchemy.orm.interfaces.MapperExtension.init_failed:8
#: sqlalchemy.orm.interfaces.MapperExtension.init_instance:7
#: sqlalchemy.orm.interfaces.MapperExtension.instrument_class:4
#: sqlalchemy.orm.interfaces.MapperExtension.reconstruct_instance:14
msgid ""
"The return value is only significant within the ``MapperExtension`` "
"chain; the parent mapper's behavior isn't modified by this method."
msgstr "戻り値は `` MapperExtension``チェーン内でのみ重要です。親マッパーの動作はこのメソッドによって変更されません。"

#: of sqlalchemy.orm.interfaces.MapperExtension.after_insert:1
msgid "Receive an object instance after that instance is inserted."
msgstr "インスタンスが挿入された後にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.after_update:1
msgid "Receive an object instance after that instance is updated."
msgstr "インスタンスが更新された後にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_delete:1
msgid "Receive an object instance before that instance is deleted."
msgstr "インスタンスが削除される前にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_delete:3
msgid ""
"Note that *no* changes to the overall flush plan can be made here; and "
"manipulation of the ``Session`` will not have the desired effect. To "
"manipulate the ``Session`` within an extension, use ``SessionExtension``."
msgstr "ここでは、全体的なフラッシュプランの変更はできません。 `` Session``の操作には望みの効果はありません。拡張子の中で `` Session``を操作するには、 `` SessionExtension``を使います。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_insert:1
msgid ""
"Receive an object instance before that instance is inserted into its "
"table."
msgstr "インスタンスがそのテーブルに挿入される前にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_insert:4
msgid ""
"This is a good place to set up primary key values and such that aren't "
"handled otherwise."
msgstr "これはプライマリキーの値を設定するのに適しており、それ以外の場合は処理されません。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_insert:7
msgid ""
"Column-based attributes can be modified within this method which will "
"result in the new value being inserted.  However *no* changes to the "
"overall flush plan can be made, and manipulation of the ``Session`` will "
"not have the desired effect. To manipulate the ``Session`` within an "
"extension, use ``SessionExtension``."
msgstr "このメソッド内で列ベースの属性を変更すると、新しい値が挿入されます。しかし、全体的なフラッシュプランの変更はできません。また、 `` Session``の操作は望みの効果を持たないでしょう。拡張子の中で `` Session``を操作するには、 `` SessionExtension``を使います。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_update:1
msgid "Receive an object instance before that instance is updated."
msgstr "インスタンスが更新される前にオブジェクトインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_update:3
msgid ""
"Note that this method is called for all instances that are marked as "
"\"dirty\", even those which have no net changes to their column-based "
"attributes. An object is marked as dirty when any of its column-based "
"attributes have a \"set attribute\" operation called or when any of its "
"collections are modified. If, at update time, no column-based attributes "
"have any net changes, no UPDATE statement will be issued. This means that"
" an instance being sent to before_update is *not* a guarantee that an "
"UPDATE statement will be issued (although you can affect the outcome "
"here)."
msgstr "このメソッドは、列ベースの属性に正味の変更を加えていない場合でも、\ &quot;ダーティ\&quot;とマークされているすべてのインスタンスに対して呼び出されることに注意してください。列ベースの属性のいずれかが呼び出されたときに、またはそのコレクションのいずれかが変更されたときに、オブジェクトはダーティとしてマークされます。更新時に列ベースの属性に正味の変更がない場合、UPDATEステートメントは発行されません。つまり、before_updateに送信されるインスタンスは、UPDATE文が発行される保証ではありません（ただし、ここでの結果に影響を与える可能性があります）。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_update:13
msgid ""
"To detect if the column-based attributes on the object have net changes, "
"and will therefore generate an UPDATE statement, use "
"``object_session(instance).is_modified(instance, "
"include_collections=False)``."
msgstr "オブジェクトの列ベースの属性に正味の変更があるかどうかを検出し、UPDATE文を生成するかどうかを検出するには、 `` object_session（instance）.is_modified（instance、include_collections = False） ``を使用します。"

#: of sqlalchemy.orm.interfaces.MapperExtension.before_update:18
msgid ""
"Column-based attributes can be modified within this method which will "
"result in the new value being updated.  However *no* changes to the "
"overall flush plan can be made, and manipulation of the ``Session`` will "
"not have the desired effect. To manipulate the ``Session`` within an "
"extension, use ``SessionExtension``."
msgstr "このメソッド内で列ベースの属性を変更すると、新しい値が更新されます。しかし、全体的なフラッシュプランの変更はできません。また、 `` Session``の操作は望みの効果を持たないでしょう。拡張子の中で `` Session``を操作するには、 `` SessionExtension``を使います。"

#: of sqlalchemy.orm.interfaces.MapperExtension.init_failed:1
msgid ""
"Receive an instance when its constructor has been called, and raised an "
"exception."
msgstr "コンストラクタが呼び出されたときにインスタンスを受け取り、例外を送出します。"

#: of sqlalchemy.orm.interfaces.MapperExtension.init_failed:4
#: sqlalchemy.orm.interfaces.MapperExtension.init_instance:3
msgid ""
"This method is only called during a userland construction of an object.  "
"It is not called when an object is loaded from the database."
msgstr "このメソッドは、オブジェクトのユーザランド構築時にのみ呼び出されます。オブジェクトがデータベースからロードされたときには呼び出されません。"

#: of sqlalchemy.orm.interfaces.MapperExtension.init_instance:1
msgid "Receive an instance when its constructor is called."
msgstr "コンストラクタが呼び出されたときにインスタンスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.instrument_class:1
msgid ""
"Receive a class when the mapper is first constructed, and has applied "
"instrumentation to the mapped class."
msgstr "マッパーが最初に構築され、マッピングされたクラスに計測を適用したときにクラスを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.reconstruct_instance:1
msgid ""
"Receive an object instance after it has been created via ``__new__``, and"
" after initial attribute population has occurred."
msgstr "オブジェクトインスタンスが `` __new__``を介して生成され、初期属性の集合が発生した後にそれを受け取ります。"

#: of sqlalchemy.orm.interfaces.MapperExtension.reconstruct_instance:5
msgid ""
"This typically occurs when the instance is created based on incoming "
"result rows, and is only called once for that instance's lifetime."
msgstr "これは、通常、受信結果の行に基づいてインスタンスが作成され、そのインスタンスの存続時間に対して一度だけ呼び出される場合に発生します。"

#: of sqlalchemy.orm.interfaces.MapperExtension.reconstruct_instance:9
msgid ""
"Note that during a result-row load, this method is called upon the first "
"row received for this instance.  Note that some attributes and "
"collections may or may not be loaded or even initialized, depending on "
"what's present in the result rows."
msgstr "結果行のロード中、このメソッドはこのインスタンスに対して最初に受信された行で呼び出されることに注意してください。結果行にあるものに応じて、属性やコレクションの一部がロードされたり、初期化されたりされたりすることがあります。"

#: ../../orm/deprecated.rst:26
msgid "Session Events"
msgstr "セッションイベント"

#: of sqlalchemy.orm.interfaces.SessionExtension:1
msgid "Base implementation for :class:`.Session` event hooks."
msgstr "class： `.Session`イベントフックの基本実装です。"

#: of sqlalchemy.orm.interfaces.SessionExtension:5
msgid ""
":class:`.SessionExtension` is deprecated.   Please refer to "
":func:`.event.listen` as well as :class:`.SessionEvents`."
msgstr "：class： `.SessionExtension`は非推奨です。 func： `.event.listen`と：class：` .SessionEvents`を参照してください。"

#: of sqlalchemy.orm.interfaces.SessionExtension:9
msgid ""
"Subclasses may be installed into a :class:`.Session` (or "
":class:`.sessionmaker`) using the ``extension`` keyword argument::"
msgstr "サブクラスは `` extension``キーワード引数を使って：class： `.Session`（または：class：` .sessionmaker`）にインストールすることができます::"

#: of sqlalchemy.orm.interfaces.SessionExtension:21
msgid ""
"The same :class:`.SessionExtension` instance can be used with any number "
"of sessions."
msgstr "同じ：class： `.SessionExtension`インスタンスは任意の数のセッションで使用できます。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_attach:1
msgid "Execute after an instance is attached to a session."
msgstr "インスタンスがセッションにアタッチされた後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_attach:3
msgid "This is called after an add, delete or merge."
msgstr "これは、追加、削除、またはマージの後に呼び出されます。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_begin:1
msgid "Execute after a transaction is begun on a connection"
msgstr "接続時にトランザクションが開始された後に実行する"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_begin:3
msgid ""
"`transaction` is the SessionTransaction. This method is called after an "
"engine level transaction is begun on a connection."
msgstr "`transaction`はSessionTransactionです。このメソッドは、接続時にエンジンレベルのトランザクションが開始された後に呼び出されます。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_delete:1
msgid "Execute after a bulk delete operation to the session."
msgstr "セッションに対する一括削除操作の後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_delete:3
msgid "This is called after a session.query(...).delete()"
msgstr "これはsession.query（...）の後に呼び出されます。delete（）"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_delete:5
msgid ""
"`query` is the query object that this delete operation was called on. "
"`query_context` was the query context object. `result` is the result "
"object returned from the bulk operation."
msgstr "`query`は、この削除オペレーションが呼び出されたクエリオブジェクトです。 `query_context`はクエリコンテキストオブジェクトでした。 `result`は、バルク操作から返された結果オブジェクトです。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_update:1
msgid "Execute after a bulk update operation to the session."
msgstr "セッションに対する一括更新操作の後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_update:3
msgid "This is called after a session.query(...).update()"
msgstr "これはsession.query（...）の後に呼び出されます。update（）"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_bulk_update:5
msgid ""
"`query` is the query object that this update operation was called on. "
"`query_context` was the query context object. `result` is the result "
"object returned from the bulk operation."
msgstr "`query`は、この更新オペレーションが呼び出されたクエリオブジェクトです。 `query_context`はクエリコンテキストオブジェクトでした。 `result`は、バルク操作から返された結果オブジェクトです。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_commit:1
msgid "Execute after a commit has occurred."
msgstr "コミットが発生した後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_commit:3
#: sqlalchemy.orm.interfaces.SessionExtension.after_rollback:3
#: sqlalchemy.orm.interfaces.SessionExtension.before_commit:3
msgid ""
"Note that this may not be per-flush if a longer running transaction is "
"ongoing."
msgstr "これは、より長い実行中のトランザクションが進行中であれば、1フラッシュではないことに注意してください。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_flush:1
msgid "Execute after flush has completed, but before commit has been called."
msgstr "flushが完了した後、commitが呼び出される前に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_flush:4
msgid ""
"Note that the session's state is still in pre-flush, i.e. 'new', 'dirty',"
" and 'deleted' lists still show pre-flush state as well as the history "
"settings on instance attributes."
msgstr "セッションの状態はまだpre-flushであることに注意してください。つまり、 &#39;new&#39;、 &#39;dirty&#39;、 &#39;deleted&#39;リストはプリフラッシュ状態とインスタンス属性の履歴設定を表示します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_flush_postexec:1
msgid "Execute after flush has completed, and after the post-exec state occurs."
msgstr "フラッシュが完了した後、および実行後状態が発生した後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_flush_postexec:4
msgid ""
"This will be when the 'new', 'dirty', and 'deleted' lists are in their "
"final state.  An actual commit() may or may not have occurred, depending "
"on whether or not the flush started its own transaction or participated "
"in a larger transaction."
msgstr "これは、「新規」、「ダーティ」、および「削除済み」リストが最終状態にあるときです。フラッシュが自身のトランザクションを開始したかどうか、またはより大きなトランザクションに参加したかどうかによって、実際のcommit（）が発生しているかどうかは不明です。"

#: of sqlalchemy.orm.interfaces.SessionExtension.after_rollback:1
msgid "Execute after a rollback has occurred."
msgstr "ロールバックが発生した後に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.before_commit:1
msgid "Execute right before commit is called."
msgstr "コミットが呼び出される直前に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.before_flush:1
msgid "Execute before flush process has started."
msgstr "フラッシュ処理が開始される前に実行します。"

#: of sqlalchemy.orm.interfaces.SessionExtension.before_flush:3
msgid ""
"`instances` is an optional list of objects which were passed to the "
"``flush()`` method."
msgstr "`instances`は、` `flush（）` `メソッドに渡されたオブジェクトのオプションリストです。"

#: ../../orm/deprecated.rst:32
msgid "Attribute Events"
msgstr "属性イベント"

#: of sqlalchemy.orm.interfaces.AttributeExtension:1
msgid ""
"Base implementation for :class:`.AttributeImpl` event hooks, events that "
"fire upon attribute mutations in user code."
msgstr "：class： `.AttributeImpl`イベントフック、ユーザコードの属性の突然変異を引き起こすイベント。"

#: of sqlalchemy.orm.interfaces.AttributeExtension:6
msgid ""
":class:`.AttributeExtension` is deprecated.   Please refer to "
":func:`.event.listen` as well as :class:`.AttributeEvents`."
msgstr "：class： `.AttributeExtension`は推奨されていません。 func： `.event.listen`と：class：` .AttributeEvents`を参照してください。"

#: of sqlalchemy.orm.interfaces.AttributeExtension:10
msgid ""
":class:`.AttributeExtension` is used to listen for set, remove, and "
"append events on individual mapped attributes. It is established on an "
"individual mapped attribute using the `extension` argument, available on "
":func:`.column_property`, :func:`.relationship`, and others::"
msgstr "：class： `.AttributeExtension`は個々のマップされた属性のset、remove、appendイベントをリスンするために使われます。 func： `.column_property`、：func：` .relationship`などで利用できる `extension`引数を使用して、個々のマップされた属性に設定されます。"

#: of sqlalchemy.orm.interfaces.AttributeExtension:34
msgid ""
"Note that the :class:`.AttributeExtension` methods "
":meth:`~.AttributeExtension.append` and :meth:`~.AttributeExtension.set` "
"need to return the ``value`` parameter. The returned value is used as the"
" effective value, and allows the extension to change what is ultimately "
"persisted."
msgstr "class： `.AttributeExtension`メソッド：meth：`〜.AttributeExtension.append`と：meth： `〜.AttributeExtension.set`は、` `value``パラメータを返す必要があることに注意してください。戻り値は実効値として使用され、最終的に永続化されるものを拡張が変更できるようにします。"

#: of sqlalchemy.orm.interfaces.AttributeExtension:41
msgid ""
"AttributeExtension is assembled within the descriptors associated with a "
"mapped class."
msgstr "AttributeExtensionは、マップされたクラスに関連付けられた記述子内でアセンブルされます。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.active_history:1
msgid ""
"indicates that the set() method would like to receive the 'old' value, "
"even if it means firing lazy callables."
msgstr "は、たとえそれが遅延呼び出し可能呼び出しを意味するとしても、set（）メソッドが &#39;old&#39;値を受け取ることを希望していることを示します。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.active_history:4
msgid ""
"Note that ``active_history`` can also be set directly via "
":func:`.column_property` and :func:`.relationship`."
msgstr "`` active_history``は：func： `.column_property`と：func：` .relationship`を介して直接設定することもできます。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.append:1
msgid "Receive a collection append event."
msgstr "コレクションの追加イベントを受け取ります。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.append:3
msgid "The returned value will be used as the actual value to be appended."
msgstr "返された値は、追加される実際の値として使用されます。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.remove:1
msgid "Receive a remove event."
msgstr "removeイベントを受け取ります。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.remove:3
msgid "No return value is defined."
msgstr "戻り値は定義されていません。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.set:1
msgid "Receive a set event."
msgstr "設定されたイベントを受信します。"

#: of sqlalchemy.orm.interfaces.AttributeExtension.set:3
msgid "The returned value will be used as the actual value to be set."
msgstr "返される値は、実際に設定される値として使用されます。"

