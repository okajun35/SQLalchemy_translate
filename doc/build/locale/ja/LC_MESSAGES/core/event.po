# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../core/event.rst:4
msgid "Events"
msgstr "イベント"

#: ../../core/event.rst:6
msgid ""
"SQLAlchemy includes an event API which publishes a wide variety of hooks "
"into the internals of both SQLAlchemy Core and ORM."
msgstr "SQLAlchemyには、さまざまなフックをSQLAlchemy CoreとORMの内部に公開するイベントAPIが含まれています。"

#: ../../core/event.rst:9
msgid ""
"The system supersedes the previous system of \"extension\", \"proxy\", "
"and \"listener\" classes."
msgstr "システムは以前の\ &quot;extension \&quot;、\ &quot;proxy \&quot;、\ &quot;listener \&quot;クラスのシステムに取って代わるものです。"

#: ../../core/event.rst:14
msgid "Event Registration"
msgstr "イベント登録"

#: ../../core/event.rst:16
msgid ""
"Subscribing to an event occurs through a single API point, the "
":func:`.listen` function, or alternatively the :func:`.listens_for` "
"decorator.   These functions accept a target, a string identifier which "
"identifies the event to be intercepted, and a user-defined listening "
"function.  Additional positional and keyword arguments to these two "
"functions may be supported by specific types of events, which may specify"
" alternate interfaces for the given event function, or provide "
"instructions regarding secondary event targets based on the given target."
msgstr "イベントの購読は、単一のAPIポイント、：func： `.listen`関数、あるいは：func：` .listens_for`デコレータを介して行われます。これらの関数は、ターゲット、インターセプトするイベントを識別する文字列識別子、およびユーザー定義のリスニング関数を受け入れます。これらの2つの機能に対する追加の位置およびキーワード引数は、特定のタイプのイベントによってサポートされてもよく、所与のイベント機能のための代替インターフェースを指定してもよく、または与えられたターゲットに基づいて2次イベントターゲットに関する指示を提供してもよい。"

#: ../../core/event.rst:24
msgid ""
"The name of an event and the argument signature of a corresponding "
"listener function is derived from a class bound specification method, "
"which exists bound to a marker class that's described in the "
"documentation. For example, the documentation for "
":meth:`.PoolEvents.connect` indicates that the event name is "
"``\"connect\"`` and that a user-defined listener function should receive "
"two positional arguments::"
msgstr "イベントの名前と対応するリスナー関数の引数シグネチャは、ドキュメントに記述されているマーカークラスにバインドされているクラスバインド仕様メソッドから派生しています。たとえば、：meth： `.PoolEvents.connect`のドキュメントは、イベント名が` `\&quot; connect \ &quot;` `であり、ユーザ定義のリスナー関数が2つの位置引数を受け取るべきであることを示しています::"

#: ../../core/event.rst:37
msgid "To listen with the :func:`.listens_for` decorator looks like::"
msgstr "：func： `.listens_for`デコレータを聞くには::"

#: ../../core/event.rst:47
msgid "Named Argument Styles"
msgstr "名前付き引数のスタイル"

#: ../../core/event.rst:49
msgid ""
"There are some varieties of argument styles which can be accepted by "
"listener functions.  Taking the example of :meth:`.PoolEvents.connect`, "
"this function is documented as receiving ``dbapi_connection`` and "
"``connection_record`` arguments. We can opt to receive these arguments by"
" name, by establishing a listener function that accepts ``**keyword`` "
"arguments, by passing ``named=True`` to either :func:`.listen` or "
":func:`.listens_for`::"
msgstr "リスナー関数が受け付けることができるいくつかの引数スタイルがあります。 ：meth： `.PoolEvents.connect`の例を見ると、この関数は` `dbapi_connection``と` `connection_record``引数を受け取ったものとして文書化されています。 func： `.listen`または：func：`のどちらかに `` named = True``を渡すことで、 `` ** keyword``引数を受け入れるリスナー関数を確立することで、これらの引数を名前で受け取ることができます。 listens_for ::"

#: ../../core/event.rst:63
msgid ""
"When using named argument passing, the names listed in the function "
"argument specification will be used as keys in the dictionary."
msgstr "名前付き引数渡しを使用する場合、関数引数指定にリストされている名前が辞書のキーとして使用されます。"

#: ../../core/event.rst:66
msgid ""
"Named style passes all arguments by name regardless of the function "
"signature, so specific arguments may be listed as well, in any order, as "
"long as the names match up::"
msgstr "名前付きスタイルは、関数のシグネチャに関係なく、すべての引数を名前で渡すので、名前が一致する限り、特定の引数も任意の順序でリストされます。"

#: ../../core/event.rst:78
msgid ""
"Above, the presence of ``**kw`` tells :func:`.listens_for` that arguments"
" should be passed to the function by name, rather than positionally."
msgstr "上では、 `` ** kw``の存在は：func： `.listens_for`に、引数は位置ではなく名前で関数に渡されるべきだと伝えます。"

#: ../../core/event.rst:81
msgid "Added optional ``named`` argument dispatch to event calling."
msgstr "イベント呼び出しにオプションの `` named``引数ディスパッチを追加しました。"

#: ../../core/event.rst:85
msgid "Targets"
msgstr "ターゲット"

#: ../../core/event.rst:87
msgid ""
"The :func:`.listen` function is very flexible regarding targets.  It "
"generally accepts classes, instances of those classes, and related "
"classes or objects from which the appropriate target can be derived. For "
"example, the above mentioned ``\"connect\"`` event accepts "
":class:`.Engine` classes and objects as well as :class:`.Pool` classes "
"and objects::"
msgstr "：func： `.listen`関数は、ターゲットに関して非常に柔軟です。一般に、クラス、クラスのインスタンス、および関連するクラスまたはオブジェクトを受け入れ、適切なターゲットを導出できます。例えば、前述の `` \ &quot;connect \&quot; `イベントは：class：` .Engine`クラスとオブジェクトと同様に：class： `.Pool`クラスとオブジェクトを受け取ります："

#: ../../core/event.rst:120
msgid "Modifiers"
msgstr "修飾子"

#: ../../core/event.rst:122
msgid ""
"Some listeners allow modifiers to be passed to :func:`.listen`.  These "
"modifiers sometimes provide alternate calling signatures for listeners.  "
"Such as with ORM events, some event listeners can have a return value "
"which modifies the subsequent handling.   By default, no listener ever "
"requires a return value, but by passing ``retval=True`` this value can be"
" supported::"
msgstr "一部のリスナーでは、修飾子を：func： `.listen`に渡すことができます。これらの修飾子は、リスナーに対して代替の呼び出しシグネチャを提供することがあります。 ORMイベントのように、イベントリスナーの中には後続の処理を変更する戻り値を持つものがあります。デフォルトではリスナーは戻り値を必要としませんが、 `` retval = True``を渡すことでこの値をサポートすることができます::"

#: ../../core/event.rst:139
msgid "Event Reference"
msgstr "イベントリファレンス"

#: ../../core/event.rst:141
msgid ""
"Both SQLAlchemy Core and SQLAlchemy ORM feature a wide variety of event "
"hooks:"
msgstr "SQLAlchemy CoreとSQLAlchemy ORMの両方には、さまざまなイベントフックがあります。"

#: ../../core/event.rst:143
msgid ""
"**Core Events** - these are described in :ref:`core_event_toplevel` and "
"include event hooks specific to connection pool lifecycle, SQL statement "
"execution, transaction lifecycle, and schema creation and teardown."
msgstr "**コアイベント**  - これらはref： `core_event_toplevel`に記述されており、接続プールのライフサイクル、SQL文の実行、トランザクションのライフサイクル、スキーマの作成と解放に固有のイベントフックが含まれています。"

#: ../../core/event.rst:148
msgid ""
"**ORM Events** - these are described in :ref:`orm_event_toplevel`, and "
"include event hooks specific to class and attribute instrumentation, "
"object initialization hooks, attribute on-change hooks, session state, "
"flush, and commit hooks, mapper initialization, object/result population,"
" and per-instance persistence hooks."
msgstr "** ORMイベント**  -  ref： `orm_event_toplevel`に記述されています。クラスと属性の計装、オブジェクト初期化フック、属性変更時フック、セッション状態、フラッシュ、コミットフック、マッパー初期化、オブジェクト/結果の集団、およびインスタンスごとの永続化フックが含まれます。"

#: ../../core/event.rst:156
msgid "API Reference"
msgstr "APIリファレンス"

#: of sqlalchemy.event.listen:1
msgid "Register a listener function for the given target."
msgstr "指定されたターゲットのリスナー関数を登録します。"

#: of sqlalchemy.event.listen:3 sqlalchemy.event.listens_for:3
#: sqlalchemy.event.remove:8
msgid "e.g.::"
msgstr "例えば：："

#: of sqlalchemy.event.listen:19 sqlalchemy.event.listens_for:15
msgid ""
"A given function can also be invoked for only the first invocation of the"
" event using the ``once`` argument::"
msgstr "与えられた関数は、 `` once``引数を使ってイベントの最初の呼び出しに対してのみ起動することもできます::"

#: of sqlalchemy.event.listen:27 sqlalchemy.event.listens_for:23
msgid ""
"Added ``once=True`` to :func:`.event.listen` and "
":func:`.event.listens_for`."
msgstr "：func： `.event.listen`と：func：` .event.listens_for`に `` once = True``を追加しました。"

#: of sqlalchemy.event.listen:32
msgid ""
"The :func:`.listen` function cannot be called at the same time that the "
"target event is being run.   This has implications for thread safety, and"
" also means an event cannot be added from inside the listener function "
"for itself.  The list of events to be run are present inside of a mutable"
" collection that can't be changed during iteration."
msgstr "：func： `.listen`関数は、ターゲットイベントが実行されているのと同時に呼び出すことはできません。これはスレッドの安全性に影響を及ぼし、イベント自体をリスナー関数の内部から追加することもできないことを意味します。実行されるイベントのリストは、反復中に変更できない変更可能なコレクションの内部に存在します。"

#: of sqlalchemy.event.listen:39 sqlalchemy.event.remove:33
msgid ""
"Event registration and removal is not intended to be a \"high velocity\" "
"operation; it is a configurational operation.  For systems that need to "
"quickly associate and deassociate with events at high scale, use a "
"mutable structure that is handled from inside of a single listener."
msgstr "イベントの登録と削除は、「高速」操作ではありません。これは構成操作です。高速にイベントに関連付ける、または関連付けを解除する必要があるシステムでは、単一のリスナーの内部から処理される変更可能な構造を使用します。"

#: of sqlalchemy.event.listen:45 sqlalchemy.event.remove:39
msgid ""
"- a ``collections.deque()`` object is now used as the container for the "
"list of events, which explicitly disallows collection mutation while the "
"collection is being iterated."
msgstr "-  `` collections.deque（） ``オブジェクトが、イベントのリストのコンテナとして使用されるようになりました。イベントのリストは、コレクションが反復されている間、明示的にコレクションの突然変異を禁止します。"

#: of sqlalchemy.event.listen:52
msgid ":func:`.listens_for`"
msgstr "：func： `.listens_for`"

#: of sqlalchemy.event.listen:54
msgid ":func:`.remove`"
msgstr "：func： `.remove`"

#: of sqlalchemy.event.listens_for:1
msgid "Decorate a function as a listener for the given target + identifier."
msgstr "指定されたターゲット+識別子のリスナーとして関数を装飾します。"

#: of sqlalchemy.event.listens_for:28
msgid ":func:`.listen` - general description of event listening"
msgstr "：func： `.listen`  - イベントリスニングの一般的な説明"

#: of sqlalchemy.event.remove:1
msgid "Remove an event listener."
msgstr "イベントリスナーを削除します。"

#: of sqlalchemy.event.remove:3
msgid ""
"The arguments here should match exactly those which were sent to "
":func:`.listen`; all the event registration which proceeded as a result "
"of this call will be reverted by calling :func:`.remove` with the same "
"arguments."
msgstr "ここでの引数は、func： `.listen`;に送信されたものと正確に一致する必要があります。この呼び出しの結果として進行したすべてのイベント登録は、同じ引数で：func： `.remove`を呼び出すことによって元に戻ります。"

#: of sqlalchemy.event.remove:18
msgid ""
"Above, the listener function associated with ``SomeMappedClass`` was also"
" propagated to subclasses of ``SomeMappedClass``; the :func:`.remove` "
"function will revert all of these operations."
msgstr "上記では、 `` SomeMappedClass``に関連付けられたリスナー関数も `` SomeMappedClass``のサブクラスに伝播されました。 ：func： `.remove`関数はこれらすべての操作を元に戻します。"

#: of sqlalchemy.event.remove:26
msgid ""
"The :func:`.remove` function cannot be called at the same time that the "
"target event is being run.   This has implications for thread safety, and"
" also means an event cannot be removed from inside the listener function "
"for itself.  The list of events to be run are present inside of a mutable"
" collection that can't be changed during iteration."
msgstr "：func： `.remove`関数は、ターゲットイベントが実行されているのと同時に呼び出すことはできません。これはスレッドの安全性に影響を及ぼし、イベント自体をリスナー関数の内部から削除することもできないことを意味します。実行されるイベントのリストは、反復中に変更できない変更可能なコレクションの内部に存在します。"

#: of sqlalchemy.event.remove:46
msgid ":func:`.listen`"
msgstr "：func： `.listen`"

#: of sqlalchemy.event.contains:1
msgid "Return True if the given target/ident/fn is set up to listen."
msgstr "指定されたtarget / ident / fnがlistenするように設定されている場合、Trueを返します。"

