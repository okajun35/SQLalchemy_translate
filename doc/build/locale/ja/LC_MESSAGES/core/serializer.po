# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../core/serializer.rst:2
msgid "Expression Serializer Extension"
msgstr "式シリアライザ拡張"

#: of sqlalchemy.ext.serializer:1
msgid ""
"Serializer/Deserializer objects for usage with SQLAlchemy query "
"structures, allowing \"contextual\" deserialization."
msgstr "SQLAlchemyクエリ構造で使用するためのシリアライザ/デシリアライザオブジェクトで、 &quot;コンテキスト上の&quot;デシリアライズが可能です。"

#: of sqlalchemy.ext.serializer:4
msgid ""
"Any SQLAlchemy query structure, either based on sqlalchemy.sql.* or "
"sqlalchemy.orm.* can be used.  The mappers, Tables, Columns, Session etc."
" which are referenced by the structure are not persisted in serialized "
"form, but are instead re-associated with the query structure when it is "
"deserialized."
msgstr "sqlalchemy.sql。*またはsqlalchemy.orm。*に基づくSQLAlchemyクエリ構造を使用できます。構造体によって参照されるマッパー、テーブル、列、セッションなどは、シリアル化された形式では永続化されませんが、逆シリアル化されたときにクエリ構造体に再関連付けされます。"

#: of sqlalchemy.ext.serializer:10
msgid "Usage is nearly the same as that of the standard Python pickle module::"
msgstr "使用法は、標準的なPython pickleモジュールの使用法とほぼ同じです::"

#: of sqlalchemy.ext.serializer:29
msgid ""
"Similar restrictions as when using raw pickle apply; mapped classes must "
"be themselves be pickleable, meaning they are importable from a module-"
"level namespace."
msgstr "生のpickleを適用する場合と同様の制限が適用されます。マップされたクラス自体がpickleableでなければなりません。つまり、モジュールレベルの名前空間からインポート可能です。"

#: of sqlalchemy.ext.serializer:33
msgid ""
"The serializer module is only appropriate for query structures.  It is "
"not needed for:"
msgstr "シリアライザモジュールは、クエリ構造にのみ適しています。それは必要ではありません："

#: of sqlalchemy.ext.serializer:36
msgid ""
"instances of user-defined classes.   These contain no references to "
"engines, sessions or expression constructs in the typical case and can be"
" serialized directly."
msgstr "ユーザー定義クラスのインスタンスこれらは、典型的なケースでは、エンジン、セッション、または表現構成への参照を含まず、直接シリアル化することができます。"

#: of sqlalchemy.ext.serializer:40
msgid ""
"Table metadata that is to be loaded entirely from the serialized "
"structure (i.e. is not already declared in the application).   Regular "
"pickle.loads()/dumps() can be used to fully dump any ``MetaData`` object,"
" typically one which was reflected from an existing database at some "
"previous point in time.  The serializer module is specifically for the "
"opposite case, where the Table metadata is already present in memory."
msgstr "シリアライズされた構造体から完全にロードされる（つまり、アプリケーションでまだ宣言されていない）テーブルメタデータ。通常のpickle.loads（）/ dumps（）は、以前のある時点で既存のデータベースから反映された &quot;MetaData&quot;オブジェクトを完全にダンプするために使用できます。シリアライザモジュールは、逆の場合に特に適しています。ここでは、テーブルのメタデータがすでにメモリに存在しています。"

