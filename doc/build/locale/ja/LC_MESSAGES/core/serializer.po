# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/serializer.rst:2
msgid "Expression Serializer Extension"
msgstr ""

#: of sqlalchemy.ext.serializer:1
msgid ""
"Serializer/Deserializer objects for usage with SQLAlchemy query "
"structures, allowing \"contextual\" deserialization."
msgstr ""

#: of sqlalchemy.ext.serializer:4
msgid ""
"Any SQLAlchemy query structure, either based on sqlalchemy.sql.* or "
"sqlalchemy.orm.* can be used.  The mappers, Tables, Columns, Session etc."
" which are referenced by the structure are not persisted in serialized "
"form, but are instead re-associated with the query structure when it is "
"deserialized."
msgstr ""

#: of sqlalchemy.ext.serializer:10
msgid "Usage is nearly the same as that of the standard Python pickle module::"
msgstr ""

#: of sqlalchemy.ext.serializer:29
msgid ""
"Similar restrictions as when using raw pickle apply; mapped classes must "
"be themselves be pickleable, meaning they are importable from a module-"
"level namespace."
msgstr ""

#: of sqlalchemy.ext.serializer:33
msgid ""
"The serializer module is only appropriate for query structures.  It is "
"not needed for:"
msgstr ""

#: of sqlalchemy.ext.serializer:36
msgid ""
"instances of user-defined classes.   These contain no references to "
"engines, sessions or expression constructs in the typical case and can be"
" serialized directly."
msgstr ""

#: of sqlalchemy.ext.serializer:40
msgid ""
"Table metadata that is to be loaded entirely from the serialized "
"structure (i.e. is not already declared in the application).   Regular "
"pickle.loads()/dumps() can be used to fully dump any ``MetaData`` object,"
" typically one which was reflected from an existing database at some "
"previous point in time.  The serializer module is specifically for the "
"opposite case, where the Table metadata is already present in memory."
msgstr ""

