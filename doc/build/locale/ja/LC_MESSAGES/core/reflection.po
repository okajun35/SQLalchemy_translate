# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../core/reflection.rst:8
msgid "Reflecting Database Objects"
msgstr "データベースオブジェクトの反映"

#: ../../core/reflection.rst:10
msgid ""
"A :class:`~sqlalchemy.schema.Table` object can be instructed to load "
"information about itself from the corresponding database schema object "
"already existing within the database. This process is called "
"*reflection*. In the most simple case you need only specify the table "
"name, a :class:`~sqlalchemy.schema.MetaData` object, and the "
"``autoload=True`` flag. If the :class:`~sqlalchemy.schema.MetaData` is "
"not persistently bound, also add the ``autoload_with`` argument::"
msgstr "A：class： `〜sqlalchemy.schema.Table`オブジェクトは、データベース内に既に存在する対応するデータベーススキーマオブジェクトから自身に関する情報を読み込むように指示することができます。このプロセスは* reflection *と呼ばれます。最も単純なケースでは、テーブル名、class： `〜sqlalchemy.schema.MetaData`オブジェクト、および` `autoload = True``フラグを指定するだけです。 ：class： `〜sqlalchemy.schema.MetaData`が永続的にバインドされていない場合は、` `autoload_with``引数を追加してください::"

#: ../../core/reflection.rst:22
msgid ""
"The above operation will use the given engine to query the database for "
"information about the ``messages`` table, and will then generate "
":class:`~sqlalchemy.schema.Column`, "
":class:`~sqlalchemy.schema.ForeignKey`, and other objects corresponding "
"to this information as though the :class:`~sqlalchemy.schema.Table` "
"object were hand-constructed in Python."
msgstr "上記の操作では、指定されたエンジンを使用してデータベースに &quot;messages&quot;テーブルに関する情報を問い合わせ、クラス： `〜sqlalchemy.schema.Column`、：class：`〜sqlalchemy.schema.ForeignKey`を生成します。 、および：class： `〜sqlalchemy.schema.Table`オブジェクトがPythonで手作業で構築されているかのように、この情報に対応する他のオブジェクトがあります。"

#: ../../core/reflection.rst:28
msgid ""
"When tables are reflected, if a given table references another one via "
"foreign key, a second :class:`~sqlalchemy.schema.Table` object is created"
" within the :class:`~sqlalchemy.schema.MetaData` object representing the "
"connection. Below, assume the table ``shopping_cart_items`` references a "
"table named ``shopping_carts``. Reflecting the ``shopping_cart_items`` "
"table has the effect such that the ``shopping_carts`` table will also be "
"loaded::"
msgstr "テーブルが反映されている場合、あるテーブルが外部キーを介して別のテーブルを参照する場合、2番目の：class： `〜sqlalchemy.schema.Table`オブジェクトは接続を表す：class：`〜sqlalchemy.schema.MetaData`オブジェクト内に作成されます。以下、テーブル `` shopping_cart_items``が `` shopping_carts``というテーブルを参照していると仮定します。 `` shopping_cart_items``テーブルを反映させることで、 `` shopping_carts``テーブルもロードされるようになります::"

#: ../../core/reflection.rst:39
msgid ""
"The :class:`~sqlalchemy.schema.MetaData` has an interesting \"singleton-"
"like\" behavior such that if you requested both tables individually, "
":class:`~sqlalchemy.schema.MetaData` will ensure that exactly one "
":class:`~sqlalchemy.schema.Table` object is created for each distinct "
"table name. The :class:`~sqlalchemy.schema.Table` constructor actually "
"returns to you the already-existing :class:`~sqlalchemy.schema.Table` "
"object if one already exists with the given name. Such as below, we can "
"access the already generated ``shopping_carts`` table just by naming it::"
msgstr "：class： `〜sqlalchemy.schema.MetaData`はあなたが両方のテーブルを個別に要求した場合、class：`〜sqlalchemy.schema.MetaData`が確実に1つだけを保証するような興味深い\ &quot;シングルトンのような\&quot;という振舞いを持っています：class ： `〜sqlalchemy.schema.Table`オブジェクトは、別個のテーブル名ごとに作成されます。 ：class： `〜sqlalchemy.schema.Table`コンストラクタは、既に存在する：class：`〜sqlalchemy.schema.Table`オブジェクトを返します。以下のように、既に生成された `` shopping_carts``テーブルにアクセスすることができます::"

#: ../../core/reflection.rst:50
msgid ""
"Of course, it's a good idea to use ``autoload=True`` with the above table"
" regardless. This is so that the table's attributes will be loaded if "
"they have not been already. The autoload operation only occurs for the "
"table if it hasn't already been loaded; once loaded, new calls to "
":class:`~sqlalchemy.schema.Table` with the same name will not re-issue "
"any reflection queries."
msgstr "もちろん、上記の表に関係なく `` autoload = True``を使うのは良い考えです。これは、テーブルの属性がまだロードされていない場合にロードされるようにするためです。自動ロード操作は、テーブルがまだロードされていない場合にのみ発生します。一度ロードされると、同じ名前の：class： `〜sqlalchemy.schema.Table`への新しい呼び出しは、リフレクションクエリを再発行しません。"

#: ../../core/reflection.rst:58
msgid "Overriding Reflected Columns"
msgstr "リフレクションされた列のオーバーライド"

#: ../../core/reflection.rst:60
msgid ""
"Individual columns can be overridden with explicit values when reflecting"
" tables; this is handy for specifying custom datatypes, constraints such "
"as primary keys that may not be configured within the database, etc.::"
msgstr "個々の列は、表を反映するときに明示的な値で上書きできます。これは、カスタムデータ型、データベース内で構成されない主キーなどの制約条件を指定するのに便利です。"

#: ../../core/reflection.rst:70
msgid "Reflecting Views"
msgstr "ビューを反映"

#: ../../core/reflection.rst:72
msgid ""
"The reflection system can also reflect views. Basic usage is the same as "
"that of a table::"
msgstr "リフレクションシステムはビューを反映することもできます。基本的な使い方はテーブルの使い方と同じです::"

#: ../../core/reflection.rst:77
msgid ""
"Above, ``my_view`` is a :class:`~sqlalchemy.schema.Table` object with "
":class:`~sqlalchemy.schema.Column` objects representing the names and "
"types of each column within the view \"some_view\"."
msgstr "上記の `` my_view``は：class： `〜sqlalchemy.schema.Table`オブジェクトです。class：`〜sqlalchemy.schema.Column`オブジェクトはビュー内の各列の名前と型を表します。 &quot;some_view&quot; 。"

#: ../../core/reflection.rst:81
msgid ""
"Usually, it's desired to have at least a primary key constraint when "
"reflecting a view, if not foreign keys as well. View reflection doesn't "
"extrapolate these constraints."
msgstr "通常は、外部キーでなくても、ビューを反映するときに少なくとも1つの主キー制約が必要です。ビューのリフレクションはこれらの制約を外挿するものではありません。"

#: ../../core/reflection.rst:85
msgid ""
"Use the \"override\" technique for this, specifying explicitly those "
"columns which are part of the primary key or have foreign key "
"constraints::"
msgstr "主キーの一部であるか、または外部キー制約を持つ列を明示的に指定して、このために &quot;オーバーライド&quot;"

#: ../../core/reflection.rst:95
msgid "Reflecting All Tables at Once"
msgstr "すべての表を一度に反映する"

#: ../../core/reflection.rst:97
msgid ""
"The :class:`~sqlalchemy.schema.MetaData` object can also get a listing of"
" tables and reflect the full set. This is achieved by using the "
":func:`~sqlalchemy.schema.MetaData.reflect` method. After calling it, all"
" located tables are present within the "
":class:`~sqlalchemy.schema.MetaData` object's dictionary of tables::"
msgstr "：class： `〜sqlalchemy.schema.MetaData`オブジェクトは、テーブルのリストを取得し、フルセットを反映することもできます。これは、：func： `〜sqlalchemy.schema.MetaData.reflect`メソッドを使用することで実現します。それを呼び出した後、見つかったすべてのテーブルは：class： `〜sqlalchemy.schema.MetaData`オブジェクトのテーブルの辞書::"

#: ../../core/reflection.rst:108
msgid ""
"``metadata.reflect()`` also provides a handy way to clear or delete all "
"the rows in a database::"
msgstr "`` metadata.reflect（） ``は、データベース内のすべての行をクリアまたは削除する便利な方法を提供します::"

#: ../../core/reflection.rst:118
msgid "Fine Grained Reflection with Inspector"
msgstr "インスペクタによる細かい砂目立て"

#: ../../core/reflection.rst:120
msgid ""
"A low level interface which provides a backend-agnostic system of loading"
" lists of schema, table, column, and constraint descriptions from a given"
" database is also available. This is known as the \"Inspector\"::"
msgstr "特定のデータベースからスキーマ、表、列、および制約の説明のリストをロードするバックエンドに依存しないシステムを提供する低レベルのインタフェースも使用できます。これは\ &quot;Inspector \&quot;として知られています::"

#: of sqlalchemy.engine.reflection.Inspector:1
msgid "Performs database schema inspection."
msgstr "データベーススキーマ検査を実行します。"

#: of sqlalchemy.engine.reflection.Inspector:3
msgid ""
"The Inspector acts as a proxy to the reflection methods of the "
":class:`~sqlalchemy.engine.interfaces.Dialect`, providing a consistent "
"interface as well as caching support for previously fetched metadata."
msgstr "Inspectorは：class： `〜sqlalchemy.engine.interfaces.Dialect`のリフレクションメソッドへの代理として機能し、以前にフェッチされたメタデータに対する一貫したインターフェイスとキャッシュサポートを提供します。"

#: of sqlalchemy.engine.reflection.Inspector:8
msgid ""
"A :class:`.Inspector` object is usually created via the :func:`.inspect` "
"function::"
msgstr "A：class： `.Inspector`オブジェクトは、通常、：func：` .inspect`関数によって生成されます::"

#: of sqlalchemy.engine.reflection.Inspector:15
msgid ""
"The inspection method above is equivalent to using the "
":meth:`.Inspector.from_engine` method, i.e.::"
msgstr "上記の検査メソッドは、：meth： `.Inspector.from_engine`メソッド、すなわち::"

#: of sqlalchemy.engine.reflection.Inspector:21
msgid ""
"Where above, the :class:`~sqlalchemy.engine.interfaces.Dialect` may opt "
"to return an :class:`.Inspector` subclass that provides additional "
"methods specific to the dialect's target database."
msgstr "上記のところでは、：class： `〜sqlalchemy.engine.interfaces.Dialect`は、方言のターゲットデータベースに固有の追加のメソッドを提供する：class：` .Inspector`サブクラスを返すことを選ぶかもしれません。"

#: of sqlalchemy.engine.reflection.Inspector.default_schema_name:1
msgid ""
"Return the default schema name presented by the dialect for the current "
"engine's database user."
msgstr "現在のエンジンのデータベースユーザーの方言によって提示されたデフォルトのスキーマ名を返します。"

#: of sqlalchemy.engine.reflection.Inspector.default_schema_name:4
msgid ""
"E.g. this is typically ``public`` for PostgreSQL and ``dbo`` for SQL "
"Server."
msgstr "例えば、PostgreSQLでは `` public``、SQL Serverでは `` dbo``です。"

#: of sqlalchemy.engine.reflection.Inspector.from_engine:1
msgid ""
"Construct a new dialect-specific Inspector object from the given engine "
"or connection."
msgstr "指定されたエンジンまたは接続から新しいダイアレクト固有のInspectorオブジェクトを構築します。"

#: of sqlalchemy.engine.reflection.Inspector.from_engine
#: sqlalchemy.engine.reflection.Inspector.get_check_constraints
#: sqlalchemy.engine.reflection.Inspector.get_columns
#: sqlalchemy.engine.reflection.Inspector.get_foreign_keys
#: sqlalchemy.engine.reflection.Inspector.get_indexes
#: sqlalchemy.engine.reflection.Inspector.get_pk_constraint
#: sqlalchemy.engine.reflection.Inspector.get_table_names
#: sqlalchemy.engine.reflection.Inspector.get_table_options
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints
#: sqlalchemy.engine.reflection.Inspector.get_view_definition
#: sqlalchemy.engine.reflection.Inspector.get_view_names
#: sqlalchemy.engine.reflection.Inspector.reflecttable
msgid "パラメータ"
msgstr "パラメータ"

#: of sqlalchemy.engine.reflection.Inspector.from_engine:4
msgid ""
"a :class:`~sqlalchemy.engine.Connectable`, which is typically an instance"
" of :class:`~sqlalchemy.engine.Engine` or "
":class:`~sqlalchemy.engine.Connection`."
msgstr "a：class： `〜sqlalchemy.engine.Connectable`です。通常はclass：`〜sqlalchemy.engine.Engine`や：class： `〜sqlalchemy.engine.Connection`のインスタンスです。"

#: of sqlalchemy.engine.reflection.Inspector.from_engine:9
msgid ""
"This method differs from direct a direct constructor call of "
":class:`.Inspector` in that the "
":class:`~sqlalchemy.engine.interfaces.Dialect` is given a chance to "
"provide a dialect-specific :class:`.Inspector` instance, which may "
"provide additional methods."
msgstr "このメソッドは、：class： `〜sqlalchemy.engine.interfaces.Dialect`が方言固有の：class：` .Inspector`を提供する機会を与えられている点で、class： `.Inspector`のダイレクトコンストラクターコールとは異なります。追加のメソッドを提供する可能性があります。"

#: of sqlalchemy.engine.reflection.Inspector.from_engine:15
msgid "See the example at :class:`.Inspector`."
msgstr "例：class： `.Inspector`を参照してください。"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:1
msgid "Return information about check constraints in `table_name`."
msgstr "`table_name`のチェック制約に関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:3
msgid ""
"Given a string `table_name` and an optional string `schema`, return check"
" constraint information as a list of dicts with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つdictsのリストとしてcheck制約情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:7
#: sqlalchemy.engine.reflection.Inspector.get_foreign_keys:20
#: sqlalchemy.engine.reflection.Inspector.get_indexes:7
#: sqlalchemy.engine.reflection.Inspector.get_pk_constraint:10
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints:7
msgid "name"
msgstr "名"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:7
msgid "the check constraint's name"
msgstr "チェック制約の名前"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:10
msgid "sqltext"
msgstr "sqltext"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:10
msgid "the check constraint's SQL expression"
msgstr "チェック制約のSQL式"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:12
#: sqlalchemy.engine.reflection.Inspector.get_columns:18
#: sqlalchemy.engine.reflection.Inspector.get_foreign_keys:22
#: sqlalchemy.engine.reflection.Inspector.get_indexes:21
#: sqlalchemy.engine.reflection.Inspector.get_pk_constraint:12
#: sqlalchemy.engine.reflection.Inspector.get_table_options:6
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints:12
msgid "string name of the table.  For special quoting, use :class:`.quoted_name`."
msgstr "テーブルの文字列名。特別な引用のために、：class： `.quoted_name`を使います。"

#: of sqlalchemy.engine.reflection.Inspector.get_check_constraints:15
#: sqlalchemy.engine.reflection.Inspector.get_columns:21
#: sqlalchemy.engine.reflection.Inspector.get_foreign_keys:25
#: sqlalchemy.engine.reflection.Inspector.get_indexes:24
#: sqlalchemy.engine.reflection.Inspector.get_pk_constraint:15
#: sqlalchemy.engine.reflection.Inspector.get_table_options:9
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints:15
msgid ""
"string schema name; if omitted, uses the default schema of the database "
"connection.  For special quoting, use :class:`.quoted_name`."
msgstr "文字列スキーマ名。省略された場合、データベース接続のデフォルトスキーマが使用されます。特別な引用のために、：class： `.quoted_name`を使います。"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:1
msgid "Return information about columns in `table_name`."
msgstr "`table_name`の列に関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:3
msgid ""
"Given a string `table_name` and an optional string `schema`, return "
"column information as a list of dicts with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つdictsのリストとしてカラム情報を返します："

#: of sqlalchemy.engine.reflection.Inspector.get_columns:6
msgid "``name`` - the column's name"
msgstr "`` name``  - 列の名前"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:8
msgid ""
"``type`` - the type of this column; an instance of "
":class:`~sqlalchemy.types.TypeEngine`"
msgstr "`` type``  - この列の型。のインスタンス：class： `〜sqlalchemy.types.TypeEngine`"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:11
msgid "``nullable`` - boolean flag if the column is NULL or NOT NULL"
msgstr "`` nullable``  - カラムがNULLかNOT NULLの場合のブールフラグ"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:13
msgid ""
"``default`` - the column's server default value - this is returned as a "
"string SQL expression."
msgstr "`` default``  - カラムのサーバのデフォルト値です - これは文字列のSQL式として返されます。"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:16
msgid "``attrs``  - dict containing optional column attributes"
msgstr "`` attrs``  - オプションのカラム属性を含むdict"

#: of sqlalchemy.engine.reflection.Inspector.get_columns
msgid "戻り値"
msgstr "戻り値"

#: of sqlalchemy.engine.reflection.Inspector.get_columns:25
msgid ""
"list of dictionaries, each representing the definition of a database "
"column."
msgstr "各辞書はデータベース列の定義を表します。"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:1
msgid "Return information about foreign_keys in `table_name`."
msgstr "`table_name`のforeign_keysに関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:3
msgid ""
"Given a string `table_name`, and an optional string `schema`, return "
"foreign key information as a list of dicts with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つdictsのリストとして外部キー情報を返します："

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:7
#: sqlalchemy.engine.reflection.Inspector.get_pk_constraint:7
msgid "constrained_columns"
msgstr "constrained_columns"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:7
msgid "a list of column names that make up the foreign key"
msgstr "外部キーを構成する列名のリスト"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:10
msgid "referred_schema"
msgstr "参照スキーマ"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:10
msgid "the name of the referred schema"
msgstr "参照されるスキーマの名前"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:13
msgid "referred_table"
msgstr "被引用文献"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:13
msgid "the name of the referred table"
msgstr "参照される表の名前"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:17
msgid "referred_columns"
msgstr "referenced_columns"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:16
msgid ""
"a list of column names in the referred table that correspond to "
"constrained_columns"
msgstr "constrained_columnsに対応する参照先テーブルの列名のリスト"

#: of sqlalchemy.engine.reflection.Inspector.get_foreign_keys:20
msgid "optional name of the foreign key constraint."
msgstr "外部キー制約のオプションの名前。"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:1
msgid "Return information about indexes in `table_name`."
msgstr "`table_name`のインデックスに関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:3
msgid ""
"Given a string `table_name` and an optional string `schema`, return index"
" information as a list of dicts with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つdictsのリストとしてインデックス情報を返します："

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:7
msgid "the index's name"
msgstr "インデックスの名前"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:10
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints:10
msgid "column_names"
msgstr "column_names"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:10
#: sqlalchemy.engine.reflection.Inspector.get_unique_constraints:10
msgid "list of column names in order"
msgstr "列名のリスト"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:13
msgid "unique"
msgstr "ユニークな"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:13
msgid "boolean"
msgstr "ブール値"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:19
msgid "dialect_options"
msgstr "dialect_options"

#: of sqlalchemy.engine.reflection.Inspector.get_indexes:16
msgid ""
"dict of dialect-specific index options.  May not be present for all "
"dialects."
msgstr "方言固有の索引オプションを指定します。すべての方言に対して存在していない可能性があります。"

#: of sqlalchemy.engine.reflection.Inspector.get_pk_constraint:1
msgid "Return information about primary key constraint on `table_name`."
msgstr "`table_name`の主キー制約に関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_pk_constraint:3
msgid ""
"Given a string `table_name`, and an optional string `schema`, return "
"primary key information as a dictionary with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つ辞書としての主キー情報を返します："

#: of sqlalchemy.engine.reflection.Inspector.get_pk_constraint:7
msgid "a list of column names that make up the primary key"
msgstr "主キーを構成する列名のリスト"

#: of sqlalchemy.engine.reflection.Inspector.get_pk_constraint:10
msgid "optional name of the primary key constraint."
msgstr "主キー制約のオプションの名前。"

#: of sqlalchemy.engine.reflection.Inspector.get_primary_keys:1
msgid "Return information about primary keys in `table_name`."
msgstr "`table_name`の主キーに関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_primary_keys:3
msgid ""
"Call to deprecated method get_primary_keys.  Use get_pk_constraint "
"instead."
msgstr "非推奨のメソッドget_primary_keysを呼び出します。代わりにget_pk_constraintを使用してください。"

#: of sqlalchemy.engine.reflection.Inspector.get_primary_keys:5
msgid ""
"Given a string `table_name`, and an optional string `schema`, return "
"primary key information as a list of column names."
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、主キー情報を列名のリストとして返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_schema_names:1
msgid "Return all schema names."
msgstr "すべてのスキーマ名を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names:1
msgid ""
"Return dependency-sorted table and foreign key constraint names in "
"referred to within a particular schema."
msgstr "特定のスキーマ内で参照される依存関係ソート表および外部キー制約名を戻します。"

#: of sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names:4
msgid ""
"This will yield 2-tuples of ``(tablename, [(tname, fkname), (tname, "
"fkname), ...])`` consisting of table names in CREATE order grouped with "
"the foreign key constraint names that are not detected as belonging to a "
"cycle. The final element will be ``(None, [(tname, fkname), (tname, "
"fkname), ..])`` which will consist of remaining foreign key constraint "
"names that would require a separate CREATE step after-the-fact, based on "
"dependencies between tables."
msgstr "これは、 ``（tablename、[（tname、fkname）、（tname、fkname）、...]） ``の2タプルを生成し、検出されない外部キー制約名サイクルに属するものとして。最後の要素は、後に別々のCREATEステップを必要とする残りの外部キー制約名で構成される ``（None、[（tname、fkname）、（tname、fkname）、..]） ``です。テーブル間の依存関係に基づいています。"

#: of sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names:18
msgid ":meth:`.Inspector.get_table_names`"
msgstr "：meth： `.Inspector.get_table_names`"

#: of sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names:20
msgid ":func:`.sort_tables_and_constraints` - similar method which works"
msgstr "：func： `.sort_tables_and_constraints`  - 動作する同様のメソッド"

#: of sqlalchemy.engine.reflection.Inspector.get_sorted_table_and_fkc_names:21
msgid "with an already-given :class:`.MetaData`."
msgstr "既に与えられている：class： `.MetaData`を使って、"

#: of sqlalchemy.engine.reflection.Inspector.get_table_comment:1
msgid "Return information about the table comment for ``table_name``."
msgstr "`` table_name``のテーブルコメントに関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_comment:3
msgid ""
"Given a string ``table_name`` and an optional string ``schema``, return "
"table comment information as a dictionary with these keys:"
msgstr "文字列 `` table_name``とオプションの文字列 `` schema``があれば、これらのキーを持つ辞書としてのテーブルコメント情報を返します："

#: of sqlalchemy.engine.reflection.Inspector.get_table_comment:7
msgid "text"
msgstr "テキスト"

#: of sqlalchemy.engine.reflection.Inspector.get_table_comment:7
msgid "text of the comment."
msgstr "コメントのテキスト。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_comment:9
msgid ""
"Raises ``NotImplementedError`` for a dialect that does not support "
"comments."
msgstr "コメントをサポートしていない方言に対して `` NotImplementedError``を発生させます。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:1
msgid "Return all table names in referred to within a particular schema."
msgstr "特定のスキーマ内で参照されているすべてのテーブル名を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:3
msgid ""
"The names are expected to be real tables only, not views. Views are "
"instead returned using the :meth:`.Inspector.get_view_names` method."
msgstr "名前はビューではなく、実際のテーブルのみであると予想されます。ビューは代わりに：meth： `.Inspector.get_view_names`メソッドを使用して返されます。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:8
msgid ""
"Schema name. If ``schema`` is left at ``None``, the database's default "
"schema is used, else the named schema is searched.  If the database does "
"not support named schemas, behavior is undefined if ``schema`` is not "
"passed as ``None``.  For special quoting, use :class:`.quoted_name`."
msgstr "スキーマ名。 `` None``に `` schema``が残っていると、データベースのデフォルトスキーマが使用されます。そうでない場合は、指定されたスキーマが検索されます。データベースが名前付きスキーマをサポートしていない場合、 `` schema``が `` None``として渡されないと、動作は未定義です。特別な引用のために、：class： `.quoted_name`を使います。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:14
msgid ""
"Optional, may be the string \"foreign_key\" to sort the result on foreign"
" key dependencies.  Does not automatically resolve cycles, and will raise"
" :class:`.CircularDependencyError` if cycles exist.  .. deprecated:: "
"1.0.0 - see    :meth:`.Inspector.get_sorted_table_and_fkc_names` for a "
"version    of this which resolves foreign key cycles between tables    "
"automatically.  .. versionchanged:: 0.8 the \"foreign_key\" sorting sorts"
" tables    in order of dependee to dependent; that is, in creation    "
"order, rather than in drop order.  This is to maintain    consistency "
"with similar features such as    :attr:`.MetaData.sorted_tables` and "
":func:`.util.sort_tables`."
msgstr "外部キーの依存関係の結果をソートするには、オプションで、\ &quot;foreign_key \&quot;という文字列を使用できます。サイクルを自動的に解決しません。サイクルが存在する場合、class： `.CircularDependencyError`を送出します。 .. deprecated :: 1.0.0  - 参照：meth： `.Inspector.get_sorted_table_and_fkc_names`これはテーブル間の外部キーサイクルを自動的に解決するバージョンです。 .. versionchanged :: 0.8 \ &quot;foreign_key \&quot;ソートは依存する順にテーブルをソートします;つまり、作成順ではなく、ドロップ順で表示されます。これは、attr： `.MetaData.sorted_tables`と：func：` .util.sort_tables`のような類似の機能との一貫性を維持するためです。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:14
msgid ""
"Optional, may be the string \"foreign_key\" to sort the result on foreign"
" key dependencies.  Does not automatically resolve cycles, and will raise"
" :class:`.CircularDependencyError` if cycles exist."
msgstr "外部キーの依存関係の結果をソートするには、オプションで、\ &quot;foreign_key \&quot;という文字列を使用できます。サイクルを自動的に解決しません。サイクルが存在する場合、class： `.CircularDependencyError`を送出します。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:19
msgid ""
"- see :meth:`.Inspector.get_sorted_table_and_fkc_names` for a version of "
"this which resolves foreign key cycles between tables automatically."
msgstr "- 参照：meth： `.Inspector.get_sorted_table_and_fkc_names`これはテーブル間の外部キーサイクルを自動的に解決するバージョンです。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:24
msgid ""
"the \"foreign_key\" sorting sorts tables in order of dependee to "
"dependent; that is, in creation order, rather than in drop order.  This "
"is to maintain consistency with similar features such as "
":attr:`.MetaData.sorted_tables` and :func:`.util.sort_tables`."
msgstr "\ &quot;foreign_key \&quot;ソートは、従属順にテーブルをソートします。つまり、作成順ではなく、ドロップ順で表示されます。これは、attr： `.MetaData.sorted_tables`と：func：` .util.sort_tables`のような類似の機能との一貫性を維持するためです。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:32
msgid ":meth:`.Inspector.get_sorted_table_and_fkc_names`"
msgstr "：meth： `.Inspector.get_sorted_table_and_fkc_names`"

#: of sqlalchemy.engine.reflection.Inspector.get_table_names:34
msgid ":attr:`.MetaData.sorted_tables`"
msgstr "：attr： `.MetaData.sorted_tables`"

#: of sqlalchemy.engine.reflection.Inspector.get_table_options:1
msgid ""
"Return a dictionary of options specified when the table of the given name"
" was created."
msgstr "指定された名前のテーブルが作成されたときに指定されたオプションの辞書を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_table_options:4
msgid "This currently includes some options that apply to MySQL tables."
msgstr "これには現在、MySQLテーブルに適用されるいくつかのオプションが含まれています。"

#: of sqlalchemy.engine.reflection.Inspector.get_temp_table_names:1
msgid "return a list of temporary table names for the current bind."
msgstr "現在のバインドの一時テーブル名のリストを返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_temp_table_names:3
#: sqlalchemy.engine.reflection.Inspector.get_temp_view_names:3
msgid ""
"This method is unsupported by most dialects; currently only SQLite "
"implements it."
msgstr "この方法はほとんどの方言ではサポートされていません。現在のところ、SQLiteのみが実装されています。"

#: of sqlalchemy.engine.reflection.Inspector.get_temp_view_names:1
msgid "return a list of temporary view names for the current bind."
msgstr "現在のバインドの一時ビュー名のリストを返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_unique_constraints:1
msgid "Return information about unique constraints in `table_name`."
msgstr "`table_name`の一意の制約に関する情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_unique_constraints:3
msgid ""
"Given a string `table_name` and an optional string `schema`, return "
"unique constraint information as a list of dicts with these keys:"
msgstr "文字列 `table_name`とオプションの文字列` schema`が与えられた場合、これらのキーを持つdictsのリストとして一意制約情報を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_unique_constraints:7
msgid "the unique constraint's name"
msgstr "一意制約の名前"

#: of sqlalchemy.engine.reflection.Inspector.get_view_definition:1
msgid "Return definition for `view_name`."
msgstr "`view_name`の定義を返します。"

#: of sqlalchemy.engine.reflection.Inspector.get_view_definition:3
#: sqlalchemy.engine.reflection.Inspector.get_view_names:3
msgid ""
"Optional, retrieve names from a non-default schema. For special quoting, "
"use :class:`.quoted_name`."
msgstr "オプションで、デフォルト以外のスキーマから名前を取得します。特別な引用のために、：class： `.quoted_name`を使います。"

#: of sqlalchemy.engine.reflection.Inspector.get_view_names:1
msgid "Return all view names in `schema`."
msgstr "`schema`の全てのビュー名を返します。"

#: of sqlalchemy.engine.reflection.Inspector.reflecttable:1
msgid "Given a Table object, load its internal constructs based on introspection."
msgstr "与えられたTableオブジェクトは、イントロスペクションに基づいて内部構造をロードします。"

#: of sqlalchemy.engine.reflection.Inspector.reflecttable:4
msgid ""
"This is the underlying method used by most dialects to produce table "
"reflection.  Direct usage is like::"
msgstr "これは、テーブルリフレクションを生成するために、ほとんどの方言で使用される基本的な方法です。直接の使用法は次のようなものです::"

#: of sqlalchemy.engine.reflection.Inspector.reflecttable:16
msgid "a :class:`~sqlalchemy.schema.Table` instance."
msgstr "a：class： `〜sqlalchemy.schema.Table`インスタンスです。"

#: of sqlalchemy.engine.reflection.Inspector.reflecttable:17
msgid ""
"a list of string column names to include in the reflection process.  If "
"``None``, all columns are reflected."
msgstr "リフレクション処理に含める文字列名のリスト。 `` None``の場合、すべての列が反映されます。"

#: ../../core/reflection.rst:135
msgid "Limitations of Reflection"
msgstr "反射の限界"

#: ../../core/reflection.rst:137
msgid ""
"It's important to note that the reflection process recreates "
":class:`.Table` metadata using only information which is represented in "
"the relational database. This process by definition cannot restore "
"aspects of a schema that aren't actually stored in the database.   State "
"which is not available from reflection includes but is not limited to:"
msgstr "リフレクションプロセスでは、リレーショナルデータベースで表現される情報のみを使用して、class： `.Table`メタデータを再作成することに注意することが重要です。このプロセスは、実際にはデータベースに格納されていないスキーマの側面を復元することはできません。リフレクションから利用できない状態には、以下のものが含まれますが、これに限定されません。"

#: ../../core/reflection.rst:143
msgid ""
"Client side defaults, either Python functions or SQL expressions defined "
"using the ``default`` keyword of :class:`.Column` (note this is separate "
"from ``server_default``, which specifically is what's available via "
"reflection)."
msgstr "クライアントサイドのデフォルト。Python関数やSQL式のclass： `.Column`（` `server_default``とは別のものです）の` `default``キーワードを使って定義されています。"

#: ../../core/reflection.rst:147
msgid ""
"Column information, e.g. data that might have been placed into the "
":attr:`.Column.info` dictionary"
msgstr "列情報、例えば：attr： `.Column.info`辞書に置かれた可能性のあるデータ"

#: ../../core/reflection.rst:150
msgid ""
"The value of the ``.quote`` setting for :class:`.Column` or "
":class:`.Table`"
msgstr "：class： `.Column`または：class：` .Table`の `` .quote``設定の値"

#: ../../core/reflection.rst:152
msgid ""
"The association of a particular :class:`.Sequence` with a given "
":class:`.Column`"
msgstr "特定の：class： `.Sequence`と与えられた：class：` .Column`の関連付け"

#: ../../core/reflection.rst:154
msgid ""
"The relational database also in many cases reports on table metadata in a"
" different format than what was specified in SQLAlchemy.   The "
":class:`.Table` objects returned from reflection cannot be always relied "
"upon to produce the identical DDL as the original Python-defined "
":class:`.Table` objects.   Areas where this occurs includes server "
"defaults, column-associated sequences and various idosyncrasies regarding"
" constraints and datatypes.   Server side defaults may be returned with "
"cast directives (typically PostgreSQL will include a ``::<type>`` cast) "
"or different quoting patterns than originally specified."
msgstr "リレーショナルデータベースは、多くの場合、SQLAlchemyで指定されたものとは異なるフォーマットでテーブルメタデータをレポートします。リフレクションから返された：class： `.Table`オブジェクトは、オリジナルのPython定義：class：` .Table`オブジェクトと同じDDLを生成するために常に依存することはできません。これが発生する領域には、サーバーのデフォルト、列関連シーケンス、および制約とデータ型に関するさまざまなidosyncrasiesが含まれます。サーバサイドのデフォルトはキャストディレクティブで返されることがあります（通常、PostgreSQLには `` :: <type> ``キャスト（cast））したり、引用符のパターンを変更することができます。"

#: ../../core/reflection.rst:163
msgid ""
"Another category of limitation includes schema structures for which "
"reflection is only partially or not yet defined.  Recent improvements to "
"reflection allow things like views, indexes and foreign key options to be"
" reflected.  As of this writing, structures like CHECK constraints, table"
" comments, and triggers are not reflected."
msgstr "他のカテゴリの制限には、リフレクションが部分的または部分的にしか定義されていないスキーマ構造が含まれます。最近のリフレクションの改善により、ビュー、インデックス、外部キーオプションなどが反映されます。この執筆時点では、CHECK制約、表コメント、トリガーなどの構造は反映されていません。"

