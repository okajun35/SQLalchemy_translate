# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/type_api.rst:6
msgid "Base Type API"
msgstr ""

#: of sqlalchemy.types.TypeEngine:1
msgid "The ultimate base class for all SQL datatypes."
msgstr ""

#: of sqlalchemy.types.TypeEngine:3
msgid ""
"Common subclasses of :class:`.TypeEngine` include :class:`.String`, "
":class:`.Integer`, and :class:`.Boolean`."
msgstr ""

#: of sqlalchemy.types.TypeEngine:6
msgid ""
"For an overview of the SQLAlchemy typing system, see "
":ref:`types_toplevel`."
msgstr ""

#: of sqlalchemy.types.TypeEngine:11
msgid ":ref:`types_toplevel`"
msgstr ""

#: of sqlalchemy.types.TypeEngine.Comparator:1
msgid ""
"Base class for custom comparison operations defined at the type level.  "
"See :attr:`.TypeEngine.comparator_factory`."
msgstr ""

#: of sqlalchemy.types.TypeEngine.adapt:1
msgid ""
"Produce an \"adapted\" form of this type, given an \"impl\" class to work"
" with."
msgstr ""

#: of sqlalchemy.types.TypeEngine.adapt:4
msgid ""
"This method is used internally to associate generic types with "
"\"implementation\" types that are specific to a particular dialect."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:1
msgid ""
"\"Given a bind value (i.e. a :class:`.BindParameter` instance), return a "
"SQL expression in its place."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:4
msgid ""
"This is typically a SQL function that wraps the existing bound parameter "
"within the statement.  It is used for special data types that require "
"literals being wrapped in some special database function in order to "
"coerce an application-level value into a database-specific format.  It is"
" the SQL analogue of the :meth:`.TypeEngine.bind_processor` method."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:11
#: sqlalchemy.types.TypeEngine.column_expression:11
msgid ""
"The method is evaluated at statement compile time, as opposed to "
"statement construction time."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:14
msgid ""
"Note that this method, when implemented, should always return the exact "
"same structure, without any conditional logic, as it may be used in an "
"executemany() call against an arbitrary number of bound parameter sets."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:19
#: sqlalchemy.types.TypeEngine.column_expression:14
msgid "See also:"
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_expression:21
#: sqlalchemy.types.TypeEngine.column_expression:16
msgid ":ref:`types_sql_value_processing`"
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_processor:1
msgid "Return a conversion function for processing bind values."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_processor:3
msgid ""
"Returns a callable which will receive a bind parameter value as the sole "
"positional argument and will return a value to send to the DB-API."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_processor:7
#: sqlalchemy.types.TypeEngine.result_processor:7
msgid "If processing is not necessary, the method should return ``None``."
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_processor
#: sqlalchemy.types.TypeEngine.compare_against_backend
#: sqlalchemy.types.TypeEngine.compile
#: sqlalchemy.types.TypeEngine.result_processor
#: sqlalchemy.types.TypeEngine.with_variant
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.types.TypeEngine.bind_processor:9
#: sqlalchemy.types.TypeEngine.result_processor:9
msgid "Dialect instance in use."
msgstr ""

#: of sqlalchemy.types.TypeEngine.coerce_compared_value:1
msgid "Suggest a type for a 'coerced' Python value in an expression."
msgstr ""

#: of sqlalchemy.types.TypeEngine.coerce_compared_value:3
msgid ""
"Given an operator and value, gives the type a chance to return a type "
"which the value should be coerced into."
msgstr ""

#: of sqlalchemy.types.TypeEngine.coerce_compared_value:6
msgid ""
"The default behavior here is conservative; if the right-hand side is "
"already coerced into a SQL type based on its Python type, it is usually "
"left alone."
msgstr ""

#: of sqlalchemy.types.TypeEngine.coerce_compared_value:10
msgid ""
"End-user functionality extension here should generally be via "
":class:`.TypeDecorator`, which provides more liberal behavior in that it "
"defaults to coercing the other side of the expression into this type, "
"thus applying special Python conversions above and beyond those needed by"
" the DBAPI to both ides. It also provides the public method "
":meth:`.TypeDecorator.coerce_compared_value` which is intended for end-"
"user customization of this behavior."
msgstr ""

#: of sqlalchemy.types.TypeEngine.column_expression:1
msgid "Given a SELECT column expression, return a wrapping SQL expression."
msgstr ""

#: of sqlalchemy.types.TypeEngine.column_expression:3
msgid ""
"This is typically a SQL function that wraps a column expression as "
"rendered in the columns clause of a SELECT statement. It is used for "
"special data types that require columns to be wrapped in some special "
"database function in order to coerce the value before being sent back to "
"the application. It is the SQL analogue of the "
":meth:`.TypeEngine.result_processor` method."
msgstr ""

#: of sqlalchemy.types.TypeEngine.comparator_factory:1
msgid ""
"A :class:`.TypeEngine.Comparator` class which will apply to operations "
"performed by owning :class:`.ColumnElement` objects."
msgstr ""

#: of sqlalchemy.types.TypeEngine.comparator_factory:4
msgid ""
"The :attr:`.comparator_factory` attribute is a hook consulted by the core"
" expression system when column and SQL expression operations are "
"performed.   When a :class:`.TypeEngine.Comparator` class is associated "
"with this attribute, it allows custom re-definition of all existing "
"operators, as well as definition of new operators. Existing operators "
"include those provided by Python operator overloading such as "
":meth:`.operators.ColumnOperators.__add__` and "
":meth:`.operators.ColumnOperators.__eq__`, those provided as standard "
"attributes of :class:`.operators.ColumnOperators` such as "
":meth:`.operators.ColumnOperators.like` and "
":meth:`.operators.ColumnOperators.in_`."
msgstr ""

#: of sqlalchemy.types.TypeEngine.comparator_factory:17
msgid ""
"Rudimentary usage of this hook is allowed through simple subclassing of "
"existing types, or alternatively by using :class:`.TypeDecorator`. See "
"the documentation section :ref:`types_operators` for examples."
msgstr ""

#: of sqlalchemy.types.TypeEngine.comparator_factory:21
msgid ""
"The expression system was enhanced to support customization of operators "
"on a per-type level."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:1
msgid "Compare this type against the given backend type."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:3
msgid ""
"This function is currently not implemented for SQLAlchemy types, and for "
"all built in types will return ``None``.  However, it can be implemented "
"by a user-defined type where it can be consumed by schema comparison "
"tools such as Alembic autogenerate."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:9
msgid ""
"A future release of SQLAlchemy will potentially impement this method for "
"builtin types as well."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:12
msgid ""
"The function should return True if this type is equivalent to the given "
"type; the type is typically reflected from the database so should be "
"database specific.  The dialect in use is also passed.   It can also "
"return False to assert that the type is not equivalent."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:18
msgid "a :class:`.Dialect` that is involved in the comparison."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_against_backend:20
msgid "the type object reflected from the backend."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compare_values:1
msgid "Compare two values for equality."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compile:1
msgid "Produce a string-compiled form of this :class:`.TypeEngine`."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compile:3
msgid ""
"When called with no arguments, uses a \"default\" dialect to produce a "
"string result."
msgstr ""

#: of sqlalchemy.types.TypeEngine.compile:6
msgid "a :class:`.Dialect` instance."
msgstr ""

#: of sqlalchemy.types.TypeEngine.dialect_impl:1
msgid "Return a dialect-specific implementation for this :class:`.TypeEngine`."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:1
msgid ""
"Return a copy of this type which has the :attr:`.should_evaluate_none` "
"flag set to True."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:4
msgid "E.g.::"
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:14
msgid ""
"The ORM uses this flag to indicate that a positive value of ``None`` is "
"passed to the column in an INSERT statement, rather than omitting the "
"column from the INSERT statement which has the effect of firing off "
"column-level defaults.   It also allows for types which have special "
"behavior associated with the Python None value to indicate that the value"
" doesn't necessarily translate into SQL NULL; a prime example of this is "
"a JSON type which may wish to persist the JSON value ``'null'``."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:23
msgid ""
"In all cases, the actual NULL SQL value can be always be persisted in any"
" column by using the :obj:`~.expression.null` SQL construct in an INSERT "
"statement or associated with an ORM-mapped attribute."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:30
msgid ""
"The \"evaulates none\" flag does **not** apply to a value of ``None`` "
"passed to :paramref:`.Column.default` or "
":paramref:`.Column.server_default`; in these cases, ``None`` still means "
"\"no default\"."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:39
msgid ":ref:`session_forcing_null` - in the ORM documentation"
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:41
msgid ""
":paramref:`.postgresql.JSON.none_as_null` - PostgreSQL JSON interaction "
"with this flag."
msgstr ""

#: of sqlalchemy.types.TypeEngine.evaluates_none:44
msgid ":attr:`.TypeEngine.should_evaluate_none` - class-level flag"
msgstr ""

#: of sqlalchemy.types.TypeEngine.get_dbapi_type:1
msgid "Return the corresponding type object from the underlying DB-API, if any."
msgstr ""

#: of sqlalchemy.types.TypeEngine.get_dbapi_type:4
msgid "This can be useful for calling ``setinputsizes()``, for example."
msgstr ""

#: of sqlalchemy.types.TypeEngine.hashable:1
msgid "Flag, if False, means values from this type aren't hashable."
msgstr ""

#: of sqlalchemy.types.TypeEngine.hashable:3
msgid "Used by the ORM when uniquing result lists."
msgstr ""

#: of sqlalchemy.types.TypeEngine.literal_processor:1
msgid ""
"Return a conversion function for processing literal values that are to be"
" rendered directly without using binds."
msgstr ""

#: of sqlalchemy.types.TypeEngine.literal_processor:4
msgid ""
"This function is used when the compiler makes use of the "
"\"literal_binds\" flag, typically used in DDL generation as well as in "
"certain scenarios where backends don't accept bound parameters."
msgstr ""

#: of sqlalchemy.types.TypeEngine.python_type:1
msgid ""
"Return the Python type object expected to be returned by instances of "
"this type, if known."
msgstr ""

#: of sqlalchemy.types.TypeEngine.python_type:4
msgid ""
"Basically, for those types which enforce a return type, or are known "
"across the board to do such for all common DBAPIs (like ``int`` for "
"example), will return that type."
msgstr ""

#: of sqlalchemy.types.TypeEngine.python_type:8
msgid "If a return type is not defined, raises ``NotImplementedError``."
msgstr ""

#: of sqlalchemy.types.TypeEngine.python_type:11
msgid ""
"Note that any type also accommodates NULL in SQL which means you can also"
" get back ``None`` from any type in practice."
msgstr ""

#: of sqlalchemy.types.TypeEngine.result_processor:1
msgid "Return a conversion function for processing result row values."
msgstr ""

#: of sqlalchemy.types.TypeEngine.result_processor:3
msgid ""
"Returns a callable which will receive a result row column value as the "
"sole positional argument and will return a value to return to the user."
msgstr ""

#: of sqlalchemy.types.TypeEngine.result_processor:11
msgid "DBAPI coltype argument received in cursor.description."
msgstr ""

#: of sqlalchemy.types.TypeEngine.should_evaluate_none:1
msgid ""
"If True, the Python constant ``None`` is considered to be handled "
"explicitly by this type."
msgstr ""

#: of sqlalchemy.types.TypeEngine.should_evaluate_none:4
msgid ""
"The ORM uses this flag to indicate that a positive value of ``None`` is "
"passed to the column in an INSERT statement, rather than omitting the "
"column from the INSERT statement which has the effect of firing off "
"column-level defaults.   It also allows types which have special behavior"
" for Python None, such as a JSON type, to indicate that they'd like to "
"handle the None value explicitly."
msgstr ""

#: of sqlalchemy.types.TypeEngine.should_evaluate_none:11
msgid ""
"To set this flag on an existing type, use the "
":meth:`.TypeEngine.evaluates_none` method."
msgstr ""

#: of sqlalchemy.types.TypeEngine.should_evaluate_none:16
msgid ":meth:`.TypeEngine.evaluates_none`"
msgstr ""

#: of sqlalchemy.types.TypeEngine.with_variant:1
msgid ""
"Produce a new type object that will utilize the given type when applied "
"to the dialect of the given name."
msgstr ""

#: of sqlalchemy.types.TypeEngine.with_variant:4
msgid "e.g.::"
msgstr ""

#: of sqlalchemy.types.TypeEngine.with_variant:13
msgid ""
"The construction of :meth:`.TypeEngine.with_variant` is always from the "
"\"fallback\" type to that which is dialect specific. The returned type is"
" an instance of :class:`.Variant`, which itself provides a "
":meth:`.Variant.with_variant` that can be called repeatedly."
msgstr ""

#: of sqlalchemy.types.TypeEngine.with_variant:19
msgid ""
"a :class:`.TypeEngine` that will be selected as a variant from the "
"originating type, when a dialect of the given name is in use."
msgstr ""

#: of sqlalchemy.types.TypeEngine.with_variant:22
msgid ""
"base name of the dialect which uses this type. (i.e. ``'postgresql'``, "
"``'mysql'``, etc.)"
msgstr ""

#: of sqlalchemy.types.Concatenable:1
msgid ""
"A mixin that marks a type as supporting 'concatenation', typically "
"strings."
msgstr ""

#: of sqlalchemy.types.Indexable:1
msgid ""
"A mixin that marks a type as supporting indexing operations, such as "
"array or JSON structures."
msgstr ""

#: of sqlalchemy.types.NullType:1
msgid "An unknown type."
msgstr ""

#: of sqlalchemy.types.NullType:3
msgid ""
":class:`.NullType` is used as a default type for those cases where a type"
" cannot be determined, including:"
msgstr ""

#: of sqlalchemy.types.NullType:6
msgid ""
"During table reflection, when the type of a column is not recognized by "
"the :class:`.Dialect`"
msgstr ""

#: of sqlalchemy.types.NullType:8
msgid ""
"When constructing SQL expressions using plain Python objects of unknown "
"types (e.g. ``somecolumn == my_special_object``)"
msgstr ""

#: of sqlalchemy.types.NullType:10
msgid ""
"When a new :class:`.Column` is created, and the given type is passed as "
"``None`` or is not passed at all."
msgstr ""

#: of sqlalchemy.types.NullType:13
msgid ""
"The :class:`.NullType` can be used within SQL expression invocation "
"without issue, it just has no behavior either at the expression "
"construction level or at the bind-parameter/result processing level. "
":class:`.NullType` will result in a :exc:`.CompileError` if the compiler "
"is asked to render the type itself, such as if it is used in a "
":func:`.cast` operation or within a schema creation operation such as "
"that invoked by :meth:`.MetaData.create_all` or the :class:`.CreateTable`"
" construct."
msgstr ""

#: of sqlalchemy.types.Variant:1
msgid ""
"A wrapping type that selects among a variety of implementations based on "
"dialect in use."
msgstr ""

#: of sqlalchemy.types.Variant:4
msgid ""
"The :class:`.Variant` type is typically constructed using the "
":meth:`.TypeEngine.with_variant` method."
msgstr ""

#: of sqlalchemy.types.Variant:9
msgid ":meth:`.TypeEngine.with_variant` for an example of use."
msgstr ""

#: ../../core/type_api.rst
msgid "members"
msgstr ""

#: ../../core/type_api.rst:24
msgid "with_variant, __init__"
msgstr ""

