# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../core/schema.rst:5
msgid "Schema Definition Language"
msgstr "スキーマ定義言語"

#: ../../core/schema.rst:9
msgid ""
"This section references SQLAlchemy **schema metadata**, a comprehensive "
"system of describing and inspecting database schemas."
msgstr "このセクションでは、データベーススキーマの記述と検査の包括的なシステムであるSQLAlchemy **スキーマメタデータ**を参照しています。"

#: ../../core/schema.rst:12
msgid ""
"The core of SQLAlchemy's query and object mapping operations are "
"supported by *database metadata*, which is comprised of Python objects "
"that describe tables and other schema-level objects. These objects are at"
" the core of three major types of operations - issuing CREATE and DROP "
"statements (known as *DDL*), constructing SQL queries, and expressing "
"information about structures that already exist within the database."
msgstr "SQLAlchemyのクエリとオブジェクトマッピング操作の中核は、テーブルや他のスキーマレベルのオブジェクトを記述するPythonオブジェクトで構成される*データベースメタデータ*によってサポートされています。これらのオブジェクトは、CREATEおよびDROPステートメント（* DDL *と呼ばれる）の発行、SQL照会の作成、およびデータベース内にすでに存在する構造に関する情報の表現の3つの主なタイプの操作の中核を成しています。"

#: ../../core/schema.rst:19
msgid ""
"Database metadata can be expressed by explicitly naming the various "
"components and their properties, using constructs such as "
":class:`~sqlalchemy.schema.Table`, :class:`~sqlalchemy.schema.Column`, "
":class:`~sqlalchemy.schema.ForeignKey` and "
":class:`~sqlalchemy.schema.Sequence`, all of which are imported from the "
"``sqlalchemy.schema`` package. It can also be generated by SQLAlchemy "
"using a process called *reflection*, which means you start with a single "
"object such as :class:`~sqlalchemy.schema.Table`, assign it a name, and "
"then instruct SQLAlchemy to load all the additional information related "
"to that name from a particular engine source."
msgstr "データベースメタデータは、class： `〜sqlalchemy.schema.Table`、：class：`〜sqlalchemy.schema.Column`、：class： `〜sqlalchemyなどの構文を使用して、さまざまなコンポーネントとそのプロパティを明示的に命名することで表現できます。スキーマ.ForeignKey`と：class： `〜sqlalchemy.schema.Sequence`を含み、これらはすべて` `sqlalchemy.schema``パッケージからインポートされます。 * reflection *という名前のプロセスを使ってSQLAlchemyで生成することもできます。つまり、class： `〜sqlalchemy.schema.Table`のような単一のオブジェクトから始め、名前を付けてからSQLAlchemyにすべての特定のエンジンソースからその名前に関連する追加情報。"

#: ../../core/schema.rst:30
msgid ""
"A key feature of SQLAlchemy's database metadata constructs is that they "
"are designed to be used in a *declarative* style which closely resembles "
"that of real DDL. They are therefore most intuitive to those who have "
"some background in creating real schema generation scripts."
msgstr "SQLAlchemyのデータベースメタデータコンストラクトの主な特徴は、実際のDDLと似ている*宣言型*スタイルで使用するように設計されていることです。したがって、実際のスキーマ生成スクリプトを作成する背景を持っている人にとっては、最も直感的です。"

