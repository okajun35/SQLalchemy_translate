# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../dialects/postgresql.rst:4
msgid "PostgreSQL"
msgstr "PostgreSQL"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:7
msgid "Sequences/SERIAL/IDENTITY"
msgstr "シーケンス/シリアル/ IDENTITY"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:9
msgid ""
"PostgreSQL supports sequences, and SQLAlchemy uses these as the default "
"means of creating new primary key values for integer-based primary key "
"columns. When creating tables, SQLAlchemy will issue the ``SERIAL`` "
"datatype for integer-based primary key columns, which generates a "
"sequence and server side default corresponding to the column."
msgstr "PostgreSQLはシーケンスをサポートしており、SQLAlchemyはこれを整数ベースの主キー列の新しい主キー値を作成するデフォルトの手段として使用します。テーブルを作成するとき、SQLAlchemyは整数ベースの主キーカラムの `` SERIAL``データ型を発行します。このデータ型は、列に対応するシーケンスとサーバ側のデフォルトを生成します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:15
msgid ""
"To specify a specific named sequence to be used for primary key "
"generation, use the :func:`~sqlalchemy.schema.Sequence` construct::"
msgstr "主キーの生成に使用する特定の名前付きシーケンスを指定するには、：func： `〜sqlalchemy.schema.Sequence`構造体を使用します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:22
msgid ""
"When SQLAlchemy issues a single INSERT statement, to fulfill the contract"
" of having the \"last insert identifier\" available, a RETURNING clause "
"is added to the INSERT statement which specifies the primary key columns "
"should be returned after the statement completes. The RETURNING "
"functionality only takes place if PostgreSQL 8.2 or later is in use. As a"
" fallback approach, the sequence, whether specified explicitly or "
"implicitly via ``SERIAL``, is executed independently beforehand, the "
"returned value to be used in the subsequent insert. Note that when an "
":func:`~sqlalchemy.sql.expression.insert()` construct is executed using "
"\"executemany\" semantics, the \"last inserted identifier\" functionality"
" does not apply; no RETURNING clause is emitted nor is the sequence pre-"
"executed in this case."
msgstr "SQLAlchemyが単一のINSERT文を発行するとき、\ &quot;最後の挿入識別子\&quot;を持つ契約を満たすために、RETURNING句がINSERT文に追加され、文の完了後に主キー列を返すように指定します。 RETURNING機能は、PostgreSQL 8.2以降が使用されている場合にのみ機能します。フォールバックアプローチとして、明示的にまたは暗黙的に `` SERIAL``を介して指定されたかどうかにかかわらず、シーケンスは事前に独立して実行され、後続の挿入で使用される戻り値です。 ：func： `〜sqlalchemy.sql.expression.insert（）`構文が\ &quot;executemany \&quot;セマンティクスを使って実行されるとき、\ &quot;最後に挿入された識別子\&quot;という機能は適用されないことに注意してください。この場合、RETURNING節は出されず、シーケンスは事前に実行されません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:35
msgid ""
"To force the usage of RETURNING by default off, specify the flag "
"``implicit_returning=False`` to :func:`.create_engine`."
msgstr "デフォルトでRETURNINGの使用を強制的にオフにするには、フラグ `` implicit_returning = False``を：func： `.create_engine`に指定します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:39
msgid "Postgresql 10 IDENTITY columns"
msgstr "PostgreSQL 10のIDENTITYカラム"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:41
msgid ""
"Postgresql 10 has a new IDENTITY feature that supersedes the use of "
"SERIAL. Built-in support for rendering of IDENTITY is not available yet, "
"however the following compilation hook may be used to replace occurrences"
" of SERIAL with IDENTITY::"
msgstr "Postgresql 10には、SERIALの使用に取って代わる新しいIDENTITY機能があります。 IDENTITYのレンダリングの組み込みサポートはまだ利用できませんが、次のコンパイルフックを使用して、SERIALの出現をIDENTITY ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:56
msgid "Using the above, a table such as::"
msgstr "上記を使用して、::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:64
msgid "Will generate on the backing database as::"
msgstr "バッキングデータベースで次のように生成されます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:75
msgid "Transaction Isolation Level"
msgstr "トランザクション分離レベル"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:77
msgid ""
"All PostgreSQL dialects support setting of transaction isolation level "
"both via a dialect-specific parameter "
":paramref:`.create_engine.isolation_level` accepted by "
":func:`.create_engine`, as well as the "
":paramref:`.Connection.execution_options.isolation_level` argument as "
"passed to :meth:`.Connection.execution_options`. When using a non-"
"psycopg2 dialect, this feature works by issuing the command ``SET SESSION"
" CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL <level>`` for each new "
"connection.  For the special AUTOCOMMIT isolation level, DBAPI-specific "
"techniques are used."
msgstr "すべてのPostgreSQLの方言は、：paramref： `.Connection.execution_options.isolation_level`と同様に、方言固有のパラメータ：paramref：` .create_engine.isolation_level`：func： `.create_engine`と、引数は：meth： `.Connection.execution_options`に渡されます。非psycopg2方言を使用する場合、この機能は、コマンド `` SET SESSION CHARACTERISTICS AS TRANSACTION ISOLATION LEVEL <level> ``新しい接続ごとに。特殊なAUTOCOMMIT分離レベルの場合は、DBAPI固有のテクニックが使用されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:87
msgid "To set isolation level using :func:`.create_engine`::"
msgstr "func： `.create_engine` ::を使って隔離レベルを設定する"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:94
msgid "To set using per-connection execution options::"
msgstr "接続ごとの実行オプションを使用して設定するには::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:101
msgid "Valid values for ``isolation_level`` include:"
msgstr "`` isolation_level``に有効な値は次のとおりです："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:103
#: sqlalchemy.dialects.postgresql.pg8000:41
#: sqlalchemy.dialects.postgresql.psycopg2:270
msgid "``READ COMMITTED``"
msgstr "`` READ COMMITTED``"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:104
#: sqlalchemy.dialects.postgresql.pg8000:42
#: sqlalchemy.dialects.postgresql.psycopg2:271
msgid "``READ UNCOMMITTED``"
msgstr "`` READ UNCOMMITTED``"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:105
#: sqlalchemy.dialects.postgresql.pg8000:43
#: sqlalchemy.dialects.postgresql.psycopg2:272
msgid "``REPEATABLE READ``"
msgstr "`` REPEATABLE READ``"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:106
#: sqlalchemy.dialects.postgresql.pg8000:44
#: sqlalchemy.dialects.postgresql.psycopg2:273
msgid "``SERIALIZABLE``"
msgstr "``シリアル化可能 ``"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:107
msgid "``AUTOCOMMIT`` - on psycopg2 / pg8000 only"
msgstr "`` AUTOCOMMIT``  -  psycopg2 / pg8000のみ"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:111
#: sqlalchemy.dialects.postgresql.pg8000:54
#: sqlalchemy.dialects.postgresql.psycopg2:39
msgid ":ref:`psycopg2_isolation_level`"
msgstr "：ref： `psycopg2_isolation_level`"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:113
#: sqlalchemy.dialects.postgresql.psycopg2:283
msgid ":ref:`pg8000_isolation_level`"
msgstr "：ref： `pg8000_isolation_level`"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:118
msgid "Remote-Schema Table Introspection and PostgreSQL search_path"
msgstr "リモートスキーマテーブルのイントロスペクションとPostgreSQLのsearch_path"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:120
msgid ""
"**TL;DR;**: keep the ``search_path`` variable set to its default of "
"``public``, name schemas **other** than ``public`` explicitly within "
"``Table`` defintitions."
msgstr "** TL; DR; **： &quot;search_path&quot;変数をデフォルトの `` public``に設定し、 `` Table``の定義内で明示的に `` public``以外の名前スキーマを指定してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:123
msgid ""
"The PostgreSQL dialect can reflect tables from any schema.  The "
":paramref:`.Table.schema` argument, or alternatively the "
":paramref:`.MetaData.reflect.schema` argument determines which schema "
"will be searched for the table or tables.   The reflected :class:`.Table`"
" objects will in all cases retain this ``.schema`` attribute as was "
"specified. However, with regards to tables which these :class:`.Table` "
"objects refer to via foreign key constraint, a decision must be made as "
"to how the ``.schema`` is represented in those remote tables, in the case"
" where that remote schema name is also a member of the current "
"`PostgreSQL search path <http://www.postgresql.org/docs/current/static"
"/ddl-schemas.html#DDL-SCHEMAS-PATH>`_."
msgstr "PostgreSQLの方言は、任意のスキーマのテーブルを反映することができます。 ：paramref： `.Table.schema`引数、または：paramref：` .MetaData.reflect.schema`引数は、どのスキーマがテーブルに対して検索されるかを決定します。 reflected：class： `.Table`オブジェクトは、すべての場合、指定されたとおりにこの` `.schema``属性を保持します。しかし、これらの：class： `.Table`オブジェクトが外部キー制約を参照するテーブルに関して、` `.schema``がどのようにそれらのリモートテーブルに表現されるかについての決定がなされなければなりません。リモートスキーマ名は、現在の `PostgreSQL検索パス<http://www.postgresql.org/docs/current/static/ddl-schemas.html#DDL-SCHEMAS-PATH> `_。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:135
msgid ""
"By default, the PostgreSQL dialect mimics the behavior encouraged by "
"PostgreSQL's own ``pg_get_constraintdef()`` builtin procedure.  This "
"function returns a sample definition for a particular foreign key "
"constraint, omitting the referenced schema name from that definition when"
" the name is also in the PostgreSQL schema search path.  The interaction "
"below illustrates this behavior::"
msgstr "デフォルトでは、PostgreSQLの方言は、PostgreSQL自身の `` pg_get_constraintdef（） ``組み込みプロシージャによって奨励される動作を模倣しています。この関数は、特定の外部キー制約のサンプル定義を返します。名前がPostgreSQLスキーマの検索パスにも含まれている場合、その定義から参照されるスキーマ名は省略されます。以下の対話はこの動作を示しています::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:160
msgid ""
"Above, we created a table ``referred`` as a member of the remote schema "
"``test_schema``, however when we added ``test_schema`` to the PG "
"``search_path`` and then asked ``pg_get_constraintdef()`` for the "
"``FOREIGN KEY`` syntax, ``test_schema`` was not included in the output of"
" the function."
msgstr "上記では、リモートスキーマ `` test_schema``のメンバとして `` referenced``テーブルを作成しましたが、 `` test_schema``をPGの `` search_path``に追加し、 `` pg_get_constraintdef（） ` `` FOREIGN KEY`構文では、 `` test_schema``は関数の出力に含まれていませんでした。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:166
msgid ""
"On the other hand, if we set the search path back to the typical default "
"of ``public``::"
msgstr "一方、検索パスを `` public``の典型的なデフォルトに戻した場合::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:172
msgid ""
"The same query against ``pg_get_constraintdef()`` now returns the fully "
"schema-qualified name for us::"
msgstr "`` pg_get_constraintdef（） ``と同じクエリが、私たちの完全なスキーマ修飾名を返すようになりました::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:185
msgid ""
"SQLAlchemy will by default use the return value of "
"``pg_get_constraintdef()`` in order to determine the remote schema name."
"  That is, if our ``search_path`` were set to include ``test_schema``, "
"and we invoked a table reflection process as follows::"
msgstr "SQLAlchemyはデフォルトで `` pg_get_constraintdef（） ``の戻り値を使用してリモートスキーマ名を決定します。つまり、 `` search_path``が `` test_schema``をインクルードするように設定されていて、次のようにテーブルリフレクションプロセスを呼び出すとします::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:200
msgid ""
"The above process would deliver to the :attr:`.MetaData.tables` "
"collection ``referred`` table named **without** the schema::"
msgstr "上記のプロセスは、スキーマなしで**という名前の：attr： `.MetaData.tables`コレクション`参照された `テーブルに配送します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:206
msgid ""
"To alter the behavior of reflection such that the referred schema is "
"maintained regardless of the ``search_path`` setting, use the "
"``postgresql_ignore_search_path`` option, which can be specified as a "
"dialect-specific argument to both :class:`.Table` as well as "
":meth:`.MetaData.reflect`::"
msgstr "`` search_path``の設定に関係なく、参照されたスキーマが維持されるようなリフレクションの振る舞いを変更するには、 `` postgresql_ignore_search_path``オプションを使います。これは、dialect特有の引数としてclass： `.Table `と同様に：meth：` .MetaData.reflect` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:221
msgid "We will now have ``test_schema.referred`` stored as schema-qualified::"
msgstr "`` test_schema.referred``をスキーマ修飾::として保存します"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:228
msgid ""
"The description of PostgreSQL schema reflection behavior is complex, and "
"is the product of many years of dealing with widely varied use cases and "
"user preferences. But in fact, there's no need to understand any of it if"
" you just stick to the simplest use pattern: leave the ``search_path`` "
"set to its default of ``public`` only, never refer to the name ``public``"
" as an explicit schema name otherwise, and refer to all other schema "
"names explicitly when building up a :class:`.Table` object.  The options "
"described here are only for those users who can't, or prefer not to, stay"
" within these guidelines."
msgstr "PostgreSQLのスキーマリフレクションの動作の説明は複雑で、幅広く使用されるユースケースやユーザの好みを扱った長年の製品です。しかし、実際には、最も単純な使用パターンに固執するだけであれば、それを理解する必要はありません。 `` search_path``をデフォルトの `` public``だけにしておき、 `` public``を参照しないでください`を明示的なスキーマ名として使用し、：class：` .Table`オブジェクトを構築するときに他のすべてのスキーマ名を明示的に参照します。ここに記載されているオプションは、このガイドラインに収まることができない、またはそうでないことを希望するユーザーのみに適用されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:238
msgid ""
"Note that **in all cases**, the \"default\" schema is always reflected as"
" ``None``. The \"default\" schema on PostgreSQL is that which is returned"
" by the PostgreSQL ``current_schema()`` function.  On a typical "
"PostgreSQL installation, this is the name ``public``.  So a table that "
"refers to another which is in the ``public`` (i.e. default) schema will "
"always have the ``.schema`` attribute set to ``None``."
msgstr "** **すべての場合**、\ &quot;default \&quot;スキーマは常に `` None``として反映されます。 PostgreSQLの\ &quot;default \&quot;スキーマは、PostgreSQLの `` current_schema（） ``関数が返すものです。典型的なPostgreSQLのインストールでは、これは `` public``という名前です。したがって、 `` public``（つまりデフォルト）スキーマにある別のテーブルを参照するテーブルは、 `` .schema``属性が常に `` None``に設定されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:245
msgid ""
"Added the ``postgresql_ignore_search_path`` dialect-level option accepted"
" by :class:`.Table` and :meth:`.MetaData.reflect`."
msgstr "：class： `.Table`と：meth：` .MetaData.reflect`で受け入れられる `` postgresql_ignore_search_path``ダイアレクトレベルオプションを追加しました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:252
msgid ""
"`The Schema Search Path <http://www.postgresql.org/docs/9.0/static/ddl-"
"schemas.html#DDL-SCHEMAS-PATH>`_ - on the PostgreSQL website."
msgstr "`スキーマ検索パス<http://www.postgresql.org/docs/9.0/static/ddl-schemas.html#DDL-SCHEMAS-PATH> `_  -  PostgreSQLのウェブサイトにあります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:257
msgid "INSERT/UPDATE...RETURNING"
msgstr "INSERT / UPDATE ... RETURNING"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:259
msgid ""
"The dialect supports PG 8.2's ``INSERT..RETURNING``, "
"``UPDATE..RETURNING`` and ``DELETE..RETURNING`` syntaxes.   "
"``INSERT..RETURNING`` is used by default for single-row INSERT statements"
" in order to fetch newly generated primary key identifiers.   To specify "
"an explicit ``RETURNING`` clause, use the :meth:`._UpdateBase.returning` "
"method on a per-statement basis::"
msgstr "この方言は、PG 8.2の `` INSERT..RETURNING``、 `` UPDATE..RETURNING``、および `` DELETE..RETURNING``の構文をサポートしています。 `` INSERT..RETURNING``は、新しく生成された主キー識別子をフェッチするために、単一行のINSERT文にデフォルトで使用されます。明示的な `` RETURNING``節を指定するには、文ごとに：meth： `._UpdateBase.returning`メソッドを使用します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:283
msgid "INSERT...ON CONFLICT (Upsert)"
msgstr "INSERT ... ON CONFLICT（アップサート）"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:285
msgid ""
"Starting with version 9.5, PostgreSQL allows \"upserts\" (update or "
"insert) of rows into a table via the ``ON CONFLICT`` clause of the "
"``INSERT`` statement. A candidate row will only be inserted if that row "
"does not violate any unique constraints.  In the case of a unique "
"constraint violation, a secondary action can occur which can be either "
"\"DO UPDATE\", indicating that the data in the target row should be "
"updated, or \"DO NOTHING\", which indicates to silently skip this row."
msgstr "バージョン9.5以降、PostgreSQLでは、 `` INSERT``文の `` ON CONFLICT``節を介して、行の\ &quot;upserts \&quot;（更新または挿入）をテーブルに許可します。候補行は、その行が一意の制約に違反しない場合にのみ挿入されます。ユニークな制約違反の場合、セカンダリアクションが発生する可能性があります。これは、ターゲット行のデータを更新する必要があることを示す\ &quot;DO UPDATE \&quot;か、\ &quot;DO NOTHING \&quot;この行"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:293
msgid ""
"Conflicts are determined using existing unique constraints and indexes.  "
"These constraints may be identified either using their name as stated in "
"DDL, or they may be *inferred* by stating the columns and conditions that"
" comprise the indexes."
msgstr "競合は、既存の一意の制約とインデックスを使用して決定されます。これらの制約は、DDLに記述されているようにその名前を使用して特定することも、インデックスを構成する列と条件を記述することによって*推論することもできます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:298
msgid ""
"SQLAlchemy provides ``ON CONFLICT`` support via the PostgreSQL-specific "
":func:`.postgresql.dml.insert()` function, which provides the generative "
"methods :meth:`~.postgresql.dml.Insert.on_conflict_do_update` and "
":meth:`~.postgresql.dml.Insert.on_conflict_do_nothing`::"
msgstr "SQLAlchemyはPostgreSQL特有の：func： `.postgresql.dml.insert（）`関数を介して `` ON CONFLICT``サポートを提供します。これは生成メソッドを提供します：meth： `〜.postgresql.dml.Insert.on_conflict_do_update`と： meth： `〜.postgresql.dml.Insert.on_conflict_do_nothing` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:322
msgid ""
"Both methods supply the \"target\" of the conflict using either the named"
" constraint or by column inference:"
msgstr "どちらのメソッドも、名前付き制約または列推論のいずれかを使用して、競合の\ &quot;ターゲット\&quot;を指定します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:325
msgid ""
"The :paramref:`.Insert.on_conflict_do_update.index_elements` argument "
"specifies a sequence containing string column names, :class:`.Column` "
"objects, and/or SQL expression elements, which would identify a unique "
"index::"
msgstr "：paramref： `.Insert.on_conflict_do_update.index_elements`引数は、文字列名、：class：` .Column`オブジェクト、および/またはSQL式要素を含むシーケンスを指定します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:339
msgid ""
"When using :paramref:`.Insert.on_conflict_do_update.index_elements` to "
"infer an index, a partial index can be inferred by also specifying the "
"use the :paramref:`.Insert.on_conflict_do_update.index_where` parameter::"
msgstr "：paramref： `.Insert.on_conflict_do_update.index_elements`を使用してインデックスを推論する場合、部分インデックスは：paramref：` .Insert.on_conflict_do_update.index_where`パラメータを使用して推測することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:354
msgid ""
"The :paramref:`.Insert.on_conflict_do_update.constraint` argument is used"
" to specify an index directly rather than inferring it.  This can be the "
"name of a UNIQUE constraint, a PRIMARY KEY constraint, or an INDEX::"
msgstr "：paramref： `.Insert.on_conflict_do_update.constraint`引き数は、それを推論するのではなく直接的に指定するために使用されます。 UNIQUE制約の名前、PRIMARY KEY制約、またはINDEX ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:368
msgid ""
"The :paramref:`.Insert.on_conflict_do_update.constraint` argument may "
"also refer to a SQLAlchemy construct representing a constraint, e.g. "
":class:`.UniqueConstraint`, :class:`.PrimaryKeyConstraint`, "
":class:`.Index`, or :class:`.ExcludeConstraint`.   In this use, if the "
"constraint has a name, it is used directly.  Otherwise, if the constraint"
" is unnamed, then inference will be used, where the expressions and "
"optional WHERE clause of the constraint will be spelled out in the "
"construct.  This use is especially convenient to refer to the named or "
"unnamed primary key of a :class:`.Table` using the "
":attr:`.Table.primary_key` attribute::"
msgstr "：paramref： `.Insert.on_conflict_do_update.constraint`引数は、制約を表すSQLAlchemy構造体、例えば：class：` .UniqueConstraint`、：class： `.PrimaryKeyConstraint`、：class：` .Index`を参照することもできます。 ：クラス： `.ExcludeConstraint`。この使用法では、制約に名前がある場合は、その制約が直接使用されます。それ以外の場合、制約に名前がない場合は、推論が使用されます。ここでは、制約の式とオプションのWHERE句がコンストラクトにスペルアウトされます。この使用法は、：attr： `.Table.primary_key`属性を使用して：class：` .Table`の名前付きまたは名前のない主キーを参照すると特に便利です::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:384
msgid ""
"``ON CONFLICT...DO UPDATE`` is used to perform an update of the already "
"existing row, using any combination of new values as well as values from "
"the proposed insertion.   These values are specified using the "
":paramref:`.Insert.on_conflict_do_update.set_` parameter.  This parameter"
" accepts a dictionary which consists of direct values for UPDATE::"
msgstr "`` ON CONFLICT ... DO UPDATE``は、新しい値と提案された挿入からの値の任意の組み合わせを使用して、既存の行の更新を実行するために使用されます。これらの値は、：paramref： `.Insert.on_conflict_do_update.set_`パラメータを使用して指定します。このパラメータは、UPDATE ::の直接値で構成される辞書を受け入れます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:402
msgid ""
"The :meth:`.Insert.on_conflict_do_update` method does **not** take into "
"account Python-side default UPDATE values or generation functions, e.g. "
"e.g. those specified using :paramref:`.Column.onupdate`. These values "
"will not be exercised for an ON CONFLICT style of UPDATE, unless they are"
" manually specified in the :paramref:`.Insert.on_conflict_do_update.set_`"
" dictionary."
msgstr "：meth： `.Insert.on_conflict_do_update`メソッドは、Python側のデフォルトのUPDATE値や生成関数を考慮せず、paramref：` .Column.onupdate`を使って指定されたものを考慮しません。これらの値は、：paramref： `.Insert.on_conflict_do_update.set_`ディクショナリで手動で指定されていない限り、ON CONFLICTスタイルのUPDATEスタイルに対しては使用されません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:409
msgid ""
"In order to refer to the proposed insertion row, the special alias "
":attr:`~.postgresql.dml.Insert.excluded` is available as an attribute on "
"the :class:`.postgresql.dml.Insert` object; this object is a "
":class:`.ColumnCollection` which alias contains all columns of the target"
" table::"
msgstr "提案された挿入行を参照するために、特別な別名：attr： `〜.postgresql.dml.Insert.excluded`は：class：` .postgresql.dml.Insert`オブジェクトの属性として利用できます。このオブジェクトは：class： `.ColumnCollection`です。このエイリアスには、ターゲットテーブルのすべてのカラムが含まれています::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:427
msgid ""
"The :meth:`.Insert.on_conflict_do_update` method also accepts a WHERE "
"clause using the :paramref:`.Insert.on_conflict_do_update.where` "
"parameter, which will limit those rows which receive an UPDATE::"
msgstr "：meth： `.Insert.on_conflict_do_update`メソッドは、：paramref：` .Insert.on_conflict_do_update.where`パラメータを使用してWHERE句を受け取ります。このパラメータは、UPDATE ::を受け取る行を制限します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:444
msgid ""
"``ON CONFLICT`` may also be used to skip inserting a row entirely if any "
"conflict with a unique or exclusion constraint occurs; below this is "
"illustrated using the "
":meth:`~.postgresql.dml.Insert.on_conflict_do_nothing` method::"
msgstr "&quot;ON CONFLICT&quot;は、一意制約または除外制約との競合が発生した場合に行全体の挿入をスキップするためにも使用できます。以下は：meth： `〜.postgresql.dml.Insert.on_conflict_do_nothing`メソッドを使って説明しています::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:455
msgid ""
"If ``DO NOTHING`` is used without specifying any columns or constraint, "
"it has the effect of skipping the INSERT for any unique or exclusion "
"constraint violation which occurs::"
msgstr "列または制約を指定せずに `` DO NOTHING``を使用すると、INSERTをスキップして一意制約または除外制約違反が発生すると、"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:465
msgid "Added support for PostgreSQL ON CONFLICT clauses"
msgstr "PostgreSQL ON CONFLICT句のサポートが追加されました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:469
msgid ""
"`INSERT .. ON CONFLICT <http://www.postgresql.org/docs/current/static"
"/sql-insert.html#SQL-ON-CONFLICT>`_ - in the PostgreSQL documentation."
msgstr "`INSERT .. ON CONFLICT <http://www.postgresql.org/docs/current/static/sql-insert.html#SQL-ON-CONFLICT> `_  -  PostgreSQLのドキュメントにあります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:474
msgid "Full Text Search"
msgstr "全文検索"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:476
msgid ""
"SQLAlchemy makes available the PostgreSQL ``@@`` operator via the "
":meth:`.ColumnElement.match` method on any textual column expression. On "
"a PostgreSQL dialect, an expression like the following::"
msgstr "SQLAlchemyはPostgreSQLの `` @@ ``演算子を任意のテキスト式の：meth： `.ColumnElement.match`メソッドで利用可能にします。 PostgreSQLの方言では、次のような式::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:482
msgid "will emit to the database::"
msgstr "データベースに送信します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:486
msgid ""
"The PostgreSQL text search functions such as ``to_tsquery()`` and "
"``to_tsvector()`` are available explicitly using the standard "
":data:`.func` construct.  For example::"
msgstr "`` to_tsquery（） ``や `` to_tsvector（） ``などのPostgreSQLのテキスト検索関数は、standard：data： `.func`構造体を使って明示的に利用できます。例えば：："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:494
#: sqlalchemy.dialects.postgresql.base:527
msgid "Emits the equivalent of::"
msgstr "::の同等物を放出する"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:498
msgid "The :class:`.postgresql.TSVECTOR` type can provide for explicit CAST::"
msgstr "：class： `.postgresql.TSVECTOR`型は、明示的なCAST ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:504
#: sqlalchemy.dialects.postgresql.base:540
msgid "produces a statement equivalent to::"
msgstr "::と同等の文を生成する"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:508
msgid ""
"Full Text Searches in PostgreSQL are influenced by a combination of: the "
"PostgresSQL setting of ``default_text_search_config``, the ``regconfig`` "
"used to build the GIN/GiST indexes, and the ``regconfig`` optionally "
"passed in during a query."
msgstr "PostgreSQLの全文検索は、PostgreSQLの「default_text_search_config」設定、GIN / GiSTインデックスの構築に使用する `` regconfig``、およびクエリ中にオプションで渡される `` regconfig``の組み合わせの影響を受けます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:513
msgid ""
"When performing a Full Text Search against a column that has a GIN or "
"GiST index that is already pre-computed (which is common on full text "
"searches) one may need to explicitly pass in a particular PostgresSQL "
"``regconfig`` value to ensure the query-planner utilizes the index and "
"does not re-compute the column on demand."
msgstr "すでに計算されているGINまたはGiSTインデックス（全文検索でよく見られる）に対してフルテキスト検索を実行するときは、特定のPostgresSQLの `` regconfig``値を明示的に渡す必要があります。クエリプランナはインデックスを使用し、必要に応じて列を再計算しません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:519
msgid ""
"In order to provide for this explicit query planning, or to use different"
" search strategies, the ``match`` method accepts a "
"``postgresql_regconfig`` keyword argument::"
msgstr "この明示的なクエリ計画を提供するため、または異なる検索戦略を使用するために、 `` match``メソッドは `` postgresql_regconfig``キーワード引数を受け取ります::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:532
msgid ""
"One can also specifically pass in a `'regconfig'` value to the "
"``to_tsvector()`` command as the initial argument::"
msgstr "また、 `` regconfig &#39;&#39;の値を初期引数として `` to_tsvector（） ``コマンドに渡すこともできます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:546
msgid ""
"It is recommended that you use the ``EXPLAIN ANALYZE...`` tool from "
"PostgresSQL to ensure that you are generating queries with SQLAlchemy "
"that take full advantage of any indexes you may have created for full "
"text search."
msgstr "全文検索のために作成したインデックスをフルに活用するSQLAlchemyを使ってクエリを生成するには、PostgresSQLの `` EXPLAIN ANALYZE ... ``ツールを使うことをお勧めします。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:551
msgid "FROM ONLY ..."
msgstr "からだけ..."

#: ../../docstring of sqlalchemy.dialects.postgresql.base:553
msgid ""
"The dialect supports PostgreSQL's ONLY keyword for targeting only a "
"particular table in an inheritance hierarchy. This can be used to produce"
" the ``SELECT ... FROM ONLY``, ``UPDATE ONLY ...``, and ``DELETE FROM "
"ONLY ...`` syntaxes. It uses SQLAlchemy's hints mechanism::"
msgstr "ダイアレクトは、継承階層内の特定のテーブルのみを対象とするためのPostgreSQLのONLYキーワードをサポートしています。これは `` SELECT ... FROM ONLY``、 `` UPDATE ONLY ... ``、 `` DELETE FROM ONLY ... ``構文を生成するために使用できます。それはSQLAlchemyのヒントメカニズムを使用します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:573
msgid "PostgreSQL-Specific Index Options"
msgstr "PostgreSQL固有のインデックスオプション"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:575
msgid ""
"Several extensions to the :class:`.Index` construct are available, "
"specific to the PostgreSQL dialect."
msgstr "PostgreSQLの方言に特有の：class： `.Index`構造のいくつかの拡張が利用できます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:581
msgid "Partial Indexes"
msgstr "部分インデックス"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:583
msgid ""
"Partial indexes add criterion to the index definition so that the index "
"is applied to a subset of rows.   These can be specified on "
":class:`.Index` using the ``postgresql_where`` keyword argument::"
msgstr "部分的な索引は、索引が行のサブセットに適用されるように、索引定義に基準を追加します。これらは、 `` postgresql_where``キーワード引数を使って：class： `.Index`で指定することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:590
msgid "Operator Classes"
msgstr "演算子クラス"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:592
msgid ""
"PostgreSQL allows the specification of an *operator class* for each "
"column of an index (see http://www.postgresql.org/docs/8.3/interactive"
"/indexes-opclass.html). The :class:`.Index` construct allows these to be "
"specified via the ``postgresql_ops`` keyword argument::"
msgstr "PostgreSQLでは、インデックスの各カラムに対して*演算子クラス*を指定できます（http://www.postgresql.org/docs/8.3/interactive/indexes-opclass.htmlを参照）。 ：class： `.Index`構造体は、` `postgresql_ops``キーワード引数で指定することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:605
msgid ""
"Note that the keys in the ``postgresql_ops`` dictionary are the \"key\" "
"name of the :class:`.Column`, i.e. the name used to access it from the "
"``.c`` collection of :class:`.Table`, which can be configured to be "
"different than the actual name of the column as expressed in the "
"database."
msgstr "`` postgresql_ops``辞書のキーは：class： `.Column`の\&quot;キー\ &quot;の名前です。つまり、` `.c``コレクションからアクセスするための名前です。class： `.Table`は、データベースで表現されているカラムの実際の名前とは異なるように設定することができます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:610
msgid ""
"If ``postgresql_ops`` is to be used against a complex SQL expression such"
" as a function call, then to apply to the column it must be given a label"
" that is identified in the dictionary by name, e.g.::"
msgstr "`` postgresql_ops``を関数呼び出しのような複雑なSQL式に対して使用する場合は、カラムに適用するために辞書名で指定されたラベルを与えなければなりません。例えば："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:624
msgid "Index Types"
msgstr "インデックスの種類"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:626
msgid ""
"PostgreSQL provides several index types: B-Tree, Hash, GiST, and GIN, as "
"well as the ability for users to create their own (see "
"http://www.postgresql.org/docs/8.3/static/indexes-types.html). These can "
"be specified on :class:`.Index` using the ``postgresql_using`` keyword "
"argument::"
msgstr "PostgreSQLは、B-Tree、Hash、GiST、GINなどのインデックスタイプと、独自のインデックス作成機能（http://www.postgresql.org/docs/8.3/static/indexes-typesを参照）を提供しています。 html）。これらは `` postgresql_using``キーワード引数を使ってclass： `.Index`で指定することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:633
msgid ""
"The value passed to the keyword argument will be simply passed through to"
" the underlying CREATE INDEX command, so it *must* be a valid index type "
"for your version of PostgreSQL."
msgstr "キーワード引数に渡された値は、基礎となるCREATE INDEXコマンドに渡されるだけなので、使用しているPostgreSQLのバージョンの有効なインデックスタイプでなければなりません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:640
msgid "Index Storage Parameters"
msgstr "索引記憶域パラメータ"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:642
msgid ""
"PostgreSQL allows storage parameters to be set on indexes. The storage "
"parameters available depend on the index method used by the index. "
"Storage parameters can be specified on :class:`.Index` using the "
"``postgresql_with`` keyword argument::"
msgstr "PostgreSQLでは、インデックスにストレージパラメータを設定できます。使用可能なストレージパラメータは、インデックスで使用されるインデックスメソッドによって異なります。記憶域パラメータは、 `` postgresql_with``キーワード引数を使って：class： `.Index`で指定することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:651
msgid ""
"PostgreSQL allows to define the tablespace in which to create the index. "
"The tablespace can be specified on :class:`.Index` using the "
"``postgresql_tablespace`` keyword argument::"
msgstr "PostgreSQLでは、インデックスを作成するためのテーブルスペースを定義することができます。テーブルスペースは `` postgresql_tablespace``キーワード引数を使って：class： `.Index`で指定することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:659
msgid "Note that the same option is available on :class:`.Table` as well."
msgstr "同じオプションがclass： `.Table`でも利用可能であることに注意してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:664
msgid "Indexes with CONCURRENTLY"
msgstr "CONCURRENTLYのインデックス"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:666
msgid ""
"The PostgreSQL index option CONCURRENTLY is supported by passing the flag"
" ``postgresql_concurrently`` to the :class:`.Index` construct::"
msgstr "PostgreSQLインデックスオプションCONCURRENTLYは、 `` postgresql_concurrently``フラグを：class： `.Index`構造体に渡すことでサポートされています::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:673
msgid ""
"The above index construct will render DDL for CREATE INDEX, assuming "
"PostgreSQL 8.2 or higher is detected or for a connection-less dialect, "
"as::"
msgstr "上記の索引構成では、PostgreSQL 8.2以降が検出されたと仮定して、CREATE INDEXのDDLをレンダリングします。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:678
msgid ""
"For DROP INDEX, assuming PostgreSQL 9.2 or higher is detected or for a "
"connection-less dialect, it will emit::"
msgstr "DROP INDEXの場合、PostgreSQL 9.2以降が検出された場合、または接続のない方言については、::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:683
msgid ""
"support for CONCURRENTLY on DROP INDEX.  The CONCURRENTLY keyword is now "
"only emitted if a high enough version of PostgreSQL is detected on the "
"connection (or for a connection-less dialect)."
msgstr "DROP INDEXでCONCURRENTLYをサポートしています。 CONCURRENTLYキーワードは、接続でPostgreSQLの十分なバージョンが検出された場合（または接続のない方言の場合）にのみ生成されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:688
msgid ""
"When using CONCURRENTLY, the Postgresql database requires that the "
"statement be invoked outside of a transaction block.   The Python DBAPI "
"enforces that even for a single statement, a transaction is present, so "
"to use this construct, the DBAPI's \"autocommit\" mode must be used::"
msgstr "CONCURRENTLYを使用する場合、PostgreSQLデータベースでは、トランザクションブロック外でステートメントを呼び出す必要があります。 Python DBAPIは、単一の文であってもトランザクションが存在するので、この構文を使用するためにDBAPIの\ &quot;autocommit \&quot;モードを使用する必要があります::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:706
#: sqlalchemy.dialects.postgresql.pg8000:52
#: sqlalchemy.dialects.postgresql.psycopg2:281
msgid ":ref:`postgresql_isolation_level`"
msgstr "：ref： `postgresql_isolation_level`"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:711
msgid "PostgreSQL Index Reflection"
msgstr "PostgreSQLインデックスリフレクション"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:713
msgid ""
"The PostgreSQL database creates a UNIQUE INDEX implicitly whenever the "
"UNIQUE CONSTRAINT construct is used.   When inspecting a table using "
":class:`.Inspector`, the :meth:`.Inspector.get_indexes` and the "
":meth:`.Inspector.get_unique_constraints` will report on these two "
"constructs distinctly; in the case of the index, the key "
"``duplicates_constraint`` will be present in the index entry if it is "
"detected as mirroring a constraint.   When performing reflection using "
"``Table(..., autoload=True)``, the UNIQUE INDEX is **not** returned in "
":attr:`.Table.indexes` when it is detected as mirroring a "
":class:`.UniqueConstraint` in the :attr:`.Table.constraints` collection."
msgstr "PostgreSQLデータベースは、UNIQUE CONSTRAINT構文が使用されるたびに、UNIQUE INDEXを暗黙的に作成します。 ：meth： `.Inspector.get_indexes`と：meth：` .Inspector.get_unique_constraints`は、class： `.Inspector`を使用してテーブルを検査するとき、これらの2つの構文について明確に報告します。索引の場合、索引項目に制約がミラーリングされていると検出された場合は、キー「duplicates_constraint」が索引項目に表示されます。 `` Table（...、autoload = True） ``を使用してリフレクションを実行するとき、UNIQUE INDEXはミラーリングとして検出されたときに** attr： `.Table.indexes`で**返されません：class：` .UniqueConstraint`を：attr： `.Table.constraints`コレクションに追加しました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:724
msgid ""
"- :class:`.Table` reflection now includes :class:`.UniqueConstraint` "
"objects present in the :attr:`.Table.constraints` collection; the "
"PostgreSQL backend will no longer include a \"mirrored\" :class:`.Index` "
"construct in :attr:`.Table.indexes` if it is detected as corresponding to"
" a unique constraint."
msgstr "- ：class： `.Table`リフレクションには以下が含まれています：class：` .UniqueConstraint`オブジェクトは：attr： `.Table.constraints`コレクションにあります。 PostgreSQLのバックエンドは、一意の制約に対応するものとして検出された場合、\ &quot;mirrored \&quot;：class： `.Index`をattr：` .Table.indexes`に含めません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:731
msgid "Special Reflection Options"
msgstr "特殊反射オプション"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:733
msgid ""
"The :class:`.Inspector` used for the PostgreSQL backend is an instance of"
" :class:`.PGInspector`, which offers additional methods::"
msgstr "PostgreSQLバックエンドに使用される：class： `.Inspector`は：class：` .PGInspector`のインスタンスです。これは追加のメソッドを提供します::"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:1
msgid "Return a list of ENUM objects."
msgstr "ENUMオブジェクトのリストを返します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:3
msgid "Each member is a dictionary containing these fields:"
msgstr "各メンバーは、次のフィールドを含む辞書です。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:5
msgid "name - name of the enum"
msgstr "name  - 列挙型の名前"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:6
msgid "schema - the schema name for the enum."
msgstr "schema  - 列挙のスキーマ名"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:7
msgid ""
"visible - boolean, whether or not this enum is visible in the default "
"search path."
msgstr "visible  - このenumがデフォルトの検索パスに表示されるかどうかを示すブール値"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:9
msgid "labels - a list of string labels that apply to the enum."
msgstr "labels  -  enumに適用される文字列ラベルのリスト。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__
#: sqlalchemy.dialects.postgresql.BYTEA.__init__
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__
#: sqlalchemy.dialects.postgresql.ENUM.__init__
#: sqlalchemy.dialects.postgresql.ENUM.create
#: sqlalchemy.dialects.postgresql.ENUM.drop
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__
#: sqlalchemy.dialects.postgresql.INTERVAL.__init__
#: sqlalchemy.dialects.postgresql.REAL.__init__
#: sqlalchemy.dialects.postgresql.UUID.__init__
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update
msgid "パラメータ"
msgstr "パラメータ"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_enums:11
msgid ""
"schema name.  If None, the default schema (typically 'public') is used.  "
"May also be set to '*' to indicate load enums for all schemas."
msgstr "スキーマ名。 Noneの場合、デフォルトスキーマ（通常は &#39;public&#39;）が使用されます。すべてのスキーマのロード列挙を示すために &#39;*&#39;に設定することもできます。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names:1
msgid "Return a list of FOREIGN TABLE names."
msgstr "FOREIGN TABLEの名前のリストを返します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_foreign_table_names:3
msgid ""
"Behavior is similar to that of :meth:`.Inspector.get_table_names`, except"
" that the list is limited to those tables tha report a ``relkind`` value "
"of ``f``."
msgstr "動作は：meth： `.Inspector.get_table_names`の動作に似ていますが、リストは` `relkind``の` `f``値を報告するテーブルに限定されています。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_table_oid:1
msgid "Return the OID for the given table name."
msgstr "指定されたテーブル名のOIDを返します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names:1
msgid "Return all view names in `schema`."
msgstr "`schema`の全てのビュー名を返します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names:3
msgid ""
"Optional, retrieve names from a non-default schema. For special quoting, "
"use :class:`.quoted_name`."
msgstr "オプションで、デフォルト以外のスキーマから名前を取得します。特別な引用のために、：class： `.quoted_name`を使います。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names:6
msgid ""
"specify which types of views to return.  Passed as a string value (for a "
"single type) or a tuple (for any number of types).  Defaults to "
"``('plain', 'materialized')``.  .. versionadded:: 1.1"
msgstr "戻すビューのタイプを指定します。文字列値（単一の型の場合）またはタプル（任意の数の型の場合）として渡されます。デフォルトは ``（ &#39;plain&#39;、 &#39;materialized&#39;） ``です。 .. versionadded :: 1.1"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.base.PGInspector.get_view_names:6
msgid ""
"specify which types of views to return.  Passed as a string value (for a "
"single type) or a tuple (for any number of types).  Defaults to "
"``('plain', 'materialized')``."
msgstr "戻すビューのタイプを指定します。文字列値（単一の型の場合）またはタプル（任意の数の型の場合）として渡されます。デフォルトは ``（ &#39;plain&#39;、 &#39;materialized&#39;） ``です。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:749
msgid "PostgreSQL Table Options"
msgstr "PostgreSQLのテーブルオプション"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:751
msgid ""
"Several options for CREATE TABLE are supported directly by the PostgreSQL"
" dialect in conjunction with the :class:`.Table` construct:"
msgstr "CREATE TABLEのいくつかのオプションは、：class： `.Table`構文と一緒にPostgreSQLの方言によって直接サポートされています："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:754
msgid "``TABLESPACE``::"
msgstr "`` TABLESPACE`` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:758
msgid "The above option is also available on the :class:`.Index` construct."
msgstr "上記のオプションは：class： `.Index`構造でも利用できます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:760
msgid "``ON COMMIT``::"
msgstr "`` ON COMMIT` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:764
msgid "``WITH OIDS``::"
msgstr "`` OIDS`` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:768
msgid "``WITHOUT OIDS``::"
msgstr "`` OIDSなし `` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:772
msgid "``INHERITS``::"
msgstr "「INHERITS」::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:780
msgid "``PARTITION BY``::"
msgstr "`` PARTITION BY`` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:789
msgid ""
"`PostgreSQL CREATE TABLE options "
"<http://www.postgresql.org/docs/current/static/sql-createtable.html>`_"
msgstr "`PostgreSQLのCREATE TABLEオプション<http://www.postgresql.org/docs/current/static/sql-createtable.html> `_"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:793
msgid "ARRAY Types"
msgstr "ARRAYタイプ"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:795
msgid ""
"The PostgreSQL dialect supports arrays, both as multidimensional column "
"types as well as array literals:"
msgstr "PostgreSQLの方言は、多次元列型と配列リテラルの両方として配列をサポートしています："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:798
msgid ":class:`.postgresql.ARRAY` - ARRAY datatype"
msgstr "：クラス： `.postgresql.ARRAY`  -  ARRAYデータ型"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:800
msgid ":class:`.postgresql.array` - array literal"
msgstr "：class： `.postgresql.array`  - 配列リテラル"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:802
msgid ":func:`.postgresql.array_agg` - ARRAY_AGG SQL function"
msgstr "：func： `.postgresql.array_agg`  -  ARRAY_AGG SQL関数"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:804
msgid ""
":class:`.postgresql.aggregate_order_by` - helper for PG's ORDER BY "
"aggregate function syntax."
msgstr "：class： `.postgresql.aggregate_order_by`  -  PGのORDER BY集約関数構文のヘルパーです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:808
msgid "JSON Types"
msgstr "JSONの種類"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:810
msgid ""
"The PostgreSQL dialect supports both JSON and JSONB datatypes, including "
"psycopg2's native support and support for all of PostgreSQL's special "
"operators:"
msgstr "PostgreSQLの方言は、psycopg2のネイティブサポートとPostgreSQLのすべての特別な演算子のサポートを含むJSONとJSONBの両方のデータ型をサポートしています："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:814
msgid ":class:`.postgresql.JSON`"
msgstr "：クラス： `.postgresql.JSON`"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:816
msgid ":class:`.postgresql.JSONB`"
msgstr "：クラス： `.postgresql.JSONB`"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:819
msgid "HSTORE Type"
msgstr "HSTOREタイプ"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:821
msgid "The PostgreSQL HSTORE type as well as hstore literals are supported:"
msgstr "PostgreSQL HSTORE型とhstoreリテラルがサポートされています："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:823
msgid ":class:`.postgresql.HSTORE` - HSTORE datatype"
msgstr "：クラス： `.postgresql.HSTORE`  -  HSTOREデータ型"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:825
msgid ":class:`.postgresql.hstore` - hstore literal"
msgstr "：クラス： `.postgresql.hstore`  -  hstoreリテラル"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:828
msgid "ENUM Types"
msgstr "ENUMの種類"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:830
msgid ""
"PostgreSQL has an independently creatable TYPE structure which is used to"
" implement an enumerated type.   This approach introduces significant "
"complexity on the SQLAlchemy side in terms of when this type should be "
"CREATED and DROPPED.   The type object is also an independently "
"reflectable entity.   The following sections should be consulted:"
msgstr "PostgreSQLには、列挙型を実装するために独立して作成可能なTYPE構造体があります。このアプローチは、この型をCREATEDおよびDROPPEDにする必要があるという点で、SQLAlchemyの面でかなりの複雑さをもたらします。型オブジェクトは、独立して反映可能なエンティティでもあります。次のセクションを参照してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:836
msgid ":class:`.postgresql.ENUM` - DDL and typing support for ENUM."
msgstr "：class： `.postgresql.ENUM`  -  DDLとENUMのためのタイピングサポート。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:838
msgid ":meth:`.PGInspector.get_enums` - retrieve a listing of current ENUM types"
msgstr "：meth： `.PGInspector.get_enums`  - 現在のENUM型のリストを取得する"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:840
msgid ""
":meth:`.postgresql.ENUM.create` , :meth:`.postgresql.ENUM.drop` - "
"individual CREATE and DROP commands for ENUM."
msgstr "：meth： `.postgresql.ENUM.create`、：meth：` .postgresql.ENUM.drop`  -  ENUMのための個々のCREATEとDROPコマンド。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:846
msgid "Using ENUM with ARRAY"
msgstr "ARRAYでのENUMの使用"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:848
msgid ""
"The combination of ENUM and ARRAY is not directly supported by backend "
"DBAPIs at this time.   In order to send and receive an ARRAY of ENUM, use"
" the following workaround type::"
msgstr "ENUMとARRAYの組み合わせは、現時点でバックエンドDBAPIによって直接サポートされていません。 ENUMのARRAYを送受信するには、次の対処方法を使用します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:3
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:3
#: sqlalchemy.dialects.postgresql.JSON.Comparator.astext:4
#: sqlalchemy.dialects.postgresql.aggregate_order_by:3
#: sqlalchemy.dialects.postgresql.base:871
#: sqlalchemy.dialects.postgresql.base:898
#: sqlalchemy.dialects.postgresql.hstore:7
msgid "E.g.::"
msgstr "例えば：："

#: ../../docstring of sqlalchemy.dialects.postgresql.base:880
msgid ""
"This type is not included as a built-in type as it would be incompatible "
"with a DBAPI that suddenly decides to support ARRAY of ENUM directly in a"
" new version."
msgstr "このタイプは組み込みタイプには含まれていません。新しいバージョンで直接ENRのARRAYをサポートすることを突然決定したDBAPIと互換性がないからです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:887
msgid "Using JSON/JSONB with ARRAY"
msgstr "ARRAYでのJSON / JSONBの使用"

#: ../../docstring of sqlalchemy.dialects.postgresql.base:889
msgid ""
"Similar to using ENUM, for an ARRAY of JSON/JSONB we need to render the "
"appropriate CAST, however current psycopg2 drivers seem to handle the "
"result for ARRAY of JSON automatically, so the type is simpler::"
msgstr "ENUMを使用するのと同様に、JSON / JSONBのARRAYに対して適切なCASTをレンダリングする必要がありますが、現在のpsycopg2ドライバはJSONのARRAYの結果を自動的に処理するように見えるので、タイプはよりシンプルです::"

#: ../../dialects/postgresql.rst:9
msgid "PostgreSQL Data Types"
msgstr "PostgreSQLのデータ型"

#: ../../dialects/postgresql.rst:11
msgid ""
"As with all SQLAlchemy dialects, all UPPERCASE types that are known to be"
" valid with PostgreSQL are importable from the top level dialect, whether"
" they originate from :mod:`sqlalchemy.types` or from the local dialect::"
msgstr "すべてのSQLAlchemy方言と同様に、PostgreSQLで有効であることが知られているすべてのUPPERCASE型は、from：mod： `sqlalchemy.types`またはローカルの方言から上位の方言からインポートできます::"

#: ../../dialects/postgresql.rst:22
msgid ""
"Types which are specific to PostgreSQL, or have PostgreSQL-specific "
"construction arguments, are as follows:"
msgstr "PostgreSQLに固有の型、またはPostgreSQL固有の構築引数を持つ型は、次のとおりです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:1
msgid "Represent a PostgreSQL aggregate order by expression."
msgstr "PostgreSQL集約オーダーを式で表現します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:9
msgid "would represent the expression::"
msgstr "式::"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:13
msgid "Similarly::"
msgstr "同様に::"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:21
msgid "Would represent::"
msgstr "::"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:27
msgid "- the ORDER BY argument may be multiple terms"
msgstr "-  ORDER BY引数は複数の項にすることができます"

#: ../../docstring of sqlalchemy.dialects.postgresql.aggregate_order_by:31
msgid ":class:`.array_agg`"
msgstr "：クラス： `.array_agg`"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:1
msgid "A PostgreSQL ARRAY literal."
msgstr "PostgreSQLのARRAYリテラル。"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:3
msgid "This is used to produce ARRAY literals in SQL expressions, e.g.::"
msgstr "これは、SQL式でARRAYリテラルを生成するために使用されます。例えば::"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:15
msgid "Produces the SQL::"
msgstr "SQLを生成する::"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:20
msgid ""
"An instance of :class:`.array` will always have the datatype "
":class:`.ARRAY`.  The \"inner\" type of the array is inferred from the "
"values present, unless the ``type_`` keyword argument is passed::"
msgstr "：class： `.array`のインスタンスは常にclass：` .ARRAY`というデータ型を持ちます。 `` type_``キーワード引数が渡されない限り、配列の\ &quot;inner \&quot;型は存在する値から推測されます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:26
msgid "Added the :class:`~.postgresql.array` literal type."
msgstr "：class： `〜.postgresql.array`リテラル型を追加しました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.array:28
msgid "See also:"
msgstr "参照："

#: ../../docstring of sqlalchemy.dialects.postgresql.array:30
msgid ":class:`.postgresql.ARRAY`"
msgstr "：クラス： `.postgresql.ARRAY`"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:1
msgid "PostgreSQL ARRAY type."
msgstr "PostgreSQLのARRAYタイプ。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:3
msgid ""
"The :class:`.postgresql.ARRAY` type is now a subclass of the core "
":class:`.types.ARRAY` type."
msgstr "：class： `.postgresql.ARRAY`型はcore：class：` .types.ARRAY`型のサブクラスになりました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:6
msgid ""
"The :class:`.postgresql.ARRAY` type is constructed in the same way as the"
" core :class:`.types.ARRAY` type; a member type is required, and a number"
" of dimensions is recommended if the type is to be used for more than one"
" dimension::"
msgstr "：class： `.postgresql.ARRAY`型は、core：class：` .types.ARRAY`型と同じ方法で構築されます。メンバータイプが必要です。複数のディメンションに複数のディメンションを使用する場合は、ディメンション数を推奨します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:17
msgid ""
"The :class:`.postgresql.ARRAY` type provides all operations defined on "
"the core :class:`.types.ARRAY` type, including support for "
"\"dimensions\", indexed access, and simple matching such as "
":meth:`.types.ARRAY.Comparator.any` and "
":meth:`.types.ARRAY.Comparator.all`.  :class:`.postgresql.ARRAY` class "
"also provides PostgreSQL-specific methods for containment operations, "
"including :meth:`.postgresql.ARRAY.Comparator.contains` "
":meth:`.postgresql.ARRAY.Comparator.contained_by`, and "
":meth:`.postgresql.ARRAY.Comparator.overlap`, e.g.::"
msgstr "：class： `.postgresql.ARRAY`型は、core：class：` .types.ARRAY`型で定義されたすべての操作を提供します。例えば、 &quot;dimensions&quot;、インデックス付きアクセス、 .types.ARRAY.Comparator.any`と：meth： `.types.ARRAY.Comparator.all`です。 ：class： `.postgresql.ARRAY`クラスは、meth：` .postgresql.ARRAY.Comparator.contains`：meth： `.postgresql.ARRAY.Comparator.contained_by`を含む、包含操作のためのPostgreSQL固有のメソッドも提供します： meth： `.postgresql.ARRAY.Comparator.overlap`、例えば::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:28
msgid ""
"The :class:`.postgresql.ARRAY` type may not be supported on all "
"PostgreSQL DBAPIs; it is currently known to work on psycopg2 only."
msgstr "：class： `.postgresql.ARRAY`タイプは、すべてのPostgreSQL DBAPIでサポートされているわけではありません。 psycopg2のみで動作することが現在知られています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:31
msgid ""
"Additionally, the :class:`.postgresql.ARRAY` type does not work directly "
"in conjunction with the :class:`.ENUM` type.  For a workaround, see the "
"special type at :ref:`postgresql_array_of_enum`."
msgstr "さらに：class： `.postgresql.ARRAY`型は、：class：` .ENUM`型と直接には連動しません。回避策は、ref： `postgresql_array_of_enum`の特別な型を参照してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:37
msgid ":class:`.types.ARRAY` - base array type"
msgstr "：class： `.types.ARRAY`  - 基本配列型"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY:39
msgid ":class:`.postgresql.array` - produces a literal array value."
msgstr "：class： `.postgresql.array`  - リテラル配列の値を生成します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.Comparator:1
msgid "Define comparison operations for :class:`.ARRAY`."
msgstr "：class： `.ARRAY`の比較演算を定義します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.Comparator:3
msgid ""
"Note that these operations are in addition to those provided by the base "
":class:`.types.ARRAY.Comparator` class, including "
":meth:`.types.ARRAY.Comparator.any` and "
":meth:`.types.ARRAY.Comparator.all`."
msgstr "これらの操作は、base：class： `.types.ARRAY.Comparator`クラスによって提供されるものに加えて、：meth：` .types.ARRAY.Comparator.any`と：meth： `.types.ARRAYを含むことに注意してください。 Comparator.all`。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ARRAY.Comparator.contained_by:1
msgid ""
"Boolean expression.  Test if elements are a proper subset of the elements"
" of the argument array expression."
msgstr "ブール式。要素が引数配列式の要素の適切なサブセットであるかどうかをテストします。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ARRAY.Comparator.contains:1
msgid ""
"Boolean expression.  Test if elements are a superset of the elements of "
"the argument array expression."
msgstr "ブール式。要素が引数配列式の要素のスーパーセットであるかどうかをテストします。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.Comparator.overlap:1
msgid ""
"Boolean expression.  Test if array has elements in common with an "
"argument array expression."
msgstr "ブール式。配列に引数配列式と共通の要素があるかどうかを調べます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:1
msgid "Construct an ARRAY."
msgstr "ARRAYを構築します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:7
msgid "Arguments are:"
msgstr "引数は次のとおりです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:9
msgid ""
"The data type of items of this array. Note that dimensionality is "
"irrelevant here, so multi-dimensional arrays like ``INTEGER[][]``, are "
"constructed as ``ARRAY(Integer)``, not as ``ARRAY(ARRAY(Integer))`` or "
"such."
msgstr "この配列の項目のデータ型。ここで、次元は無関係であるため、 `` INTEGER [] [] ``のような多次元配列は、 `` ARRAY（ARRAY（Integer）） ``ではなく、 `` ARRAY（Integer） 。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:14
msgid ""
"Specify whether return results should be converted to tuples from lists. "
"DBAPIs such as psycopg2 return lists by default. When tuples are "
"returned, the results are hashable."
msgstr "戻り値をリストからタプルに変換するかどうかを指定します。 psycopg2などのDBAPIでは、デフォルトでリストが返されます。タプルが返されると、結果はハッシュ可能になります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:19
msgid ""
"if non-None, the ARRAY will assume a fixed number of dimensions.  This "
"will cause the DDL emitted for this ARRAY to include the exact number of "
"bracket clauses ``[]``, and will also optimize the performance of the "
"type overall. Note that PG arrays are always implicitly \"non-"
"dimensioned\", meaning they can store any number of dimensions no matter "
"how they were declared."
msgstr "非なしの場合、ARRAYは固定数の次元を想定します。これにより、このARRAYのために生成されたDDLにブラケット節 `` [] ``の正確な数が含まれるようになり、全体的な型のパフォーマンスも最適化されます。 PG配列は常に暗黙的に\ &quot;非次元\&quot;であり、宣言された方法に関係なく任意の数の次元を格納できることに注意してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:27
msgid ""
"when True, index values will be converted between Python zero-based and "
"PostgreSQL one-based indexes, e.g. a value of one will be added to all "
"index values before passing to the database.  .. versionadded:: 0.9.5"
msgstr "Trueの場合、インデックス値はPythonのゼロベースとPostgreSQLの1つのインデックスの間で変換されます。例えば、値1はデータベースに渡す前にすべてのインデックス値に追加されます。 .. versionadded :: 0.9.5"

#: ../../docstring of sqlalchemy.dialects.postgresql.ARRAY.__init__:27
msgid ""
"when True, index values will be converted between Python zero-based and "
"PostgreSQL one-based indexes, e.g. a value of one will be added to all "
"index values before passing to the database."
msgstr "Trueの場合、インデックス値はPythonのゼロベースとPostgreSQLの1つのインデックスの間で変換されます。例えば、値1はデータベースに渡す前にすべてのインデックス値に追加されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.array_agg:1
msgid ""
"PostgreSQL-specific form of :class:`.array_agg`, ensures return type is "
":class:`.postgresql.ARRAY` and not the plain :class:`.types.ARRAY`, "
"unless an explicit ``type_`` is passed."
msgstr "PostgreSQL固有の形式のclass： `.array_agg`は、明示的な` `type_``が渡されない限り、戻り値の型は：class：` .postgresql.ARRAY`で、plain：class： `.types.ARRAY`ではありません。 。"

#: ../../docstring of sqlalchemy.dialects.postgresql.Any:1
msgid "A synonym for the :meth:`.ARRAY.Comparator.any` method."
msgstr "：meth： `.ARRAY.Comparator.any`メソッドの同義語です。"

#: ../../docstring of sqlalchemy.dialects.postgresql.All:3
#: sqlalchemy.dialects.postgresql.Any:3
msgid "This method is legacy and is here for backwards-compatibility."
msgstr "このメソッドは古いもので、後方互換性のためにここにあります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.Any:7
msgid ":func:`.expression.any_`"
msgstr "：func： `.expression.any_`"

#: ../../docstring of sqlalchemy.dialects.postgresql.All:1
msgid "A synonym for the :meth:`.ARRAY.Comparator.all` method."
msgstr "：meth： `.ARRAY.Comparator.all`メソッドの同義語です。"

#: ../../docstring of sqlalchemy.dialects.postgresql.All:7
msgid ":func:`.expression.all_`"
msgstr "：func： `.expression.all_`"

#: ../../docstring of sqlalchemy.dialects.postgresql.BYTEA.__init__:1
msgid "Construct a LargeBinary type."
msgstr "LargeBinary型を構築します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.BYTEA.__init__:3
msgid ""
"optional, a length for the column for use in DDL statements, for those "
"binary types that accept a length, such as the MySQL BLOB type."
msgstr "オプションで、長さを受け入れるバイナリ型（MySQL BLOB型など）のDDL文で使用する列の長さ。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:1
#: sqlalchemy.dialects.postgresql.REAL.__init__:1
msgid "Construct a Float."
msgstr "Floatを構築します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:3
#: sqlalchemy.dialects.postgresql.REAL.__init__:3
msgid "the numeric precision for use in DDL ``CREATE TABLE``."
msgstr "`` CREATE TABLE`` DDLで使用する数値精度。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:6
#: sqlalchemy.dialects.postgresql.REAL.__init__:6
msgid ""
"the same flag as that of :class:`.Numeric`, but defaults to ``False``.   "
"Note that setting this flag to ``True`` results in floating point "
"conversion."
msgstr "：class： `.Numeric`と同じフラグですが、デフォルトは` `False``です。このフラグを &quot;True&quot;に設定すると、浮動小数点変換が行われることに注意してください。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:10
#: sqlalchemy.dialects.postgresql.REAL.__init__:10
msgid ""
"Default scale to use when converting from floats to Python decimals.  "
"Floating point values will typically be much longer due to decimal "
"inaccuracy, and most floating point database types don't have a notion of"
" \"scale\", so by default the float type looks for the first ten decimal "
"places when converting. Specfiying this value will override that length."
"  Note that the MySQL float types, which do include \"scale\", will use "
"\"scale\" as the default for decimal_return_scale, if not otherwise "
"specified.  .. versionadded:: 0.9.0"
msgstr "浮動小数点数からPython小数値に変換するときに使用するデフォルトの位取り。浮動小数点の値は、通常、小数の不正確さのために非常に長くなり、ほとんどの浮動小数点データベース型は\ &quot;スケール\&quot;という概念を持たないため、デフォルトで浮動小数点型は変換時に小数点以下10桁を探します。この値を指定すると、その長さがオーバーライドされます。 \ &quot;scale \&quot;を含むMySQLのfloat型は、特に指定がない限り、decimal_return_scaleのデフォルトとして\ &quot;scale \&quot;を使用することに注意してください。 .. versionadded :: 0.9.0"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:10
#: sqlalchemy.dialects.postgresql.REAL.__init__:10
msgid ""
"Default scale to use when converting from floats to Python decimals.  "
"Floating point values will typically be much longer due to decimal "
"inaccuracy, and most floating point database types don't have a notion of"
" \"scale\", so by default the float type looks for the first ten decimal "
"places when converting. Specfiying this value will override that length."
"  Note that the MySQL float types, which do include \"scale\", will use "
"\"scale\" as the default for decimal_return_scale, if not otherwise "
"specified."
msgstr "浮動小数点数からPython小数値に変換するときに使用するデフォルトの位取り。浮動小数点の値は、通常、小数の不正確さのために非常に長くなり、ほとんどの浮動小数点データベース型は\ &quot;スケール\&quot;という概念を持たないため、デフォルトで浮動小数点型は変換時に小数点以下10桁を探します。この値を指定すると、その長さがオーバーライドされます。 \ &quot;scale \&quot;を含むMySQLのfloat型は、特に指定がない限り、decimal_return_scaleのデフォルトとして\ &quot;scale \&quot;を使用することに注意してください。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.DOUBLE_PRECISION.__init__:21
#: sqlalchemy.dialects.postgresql.REAL.__init__:21
msgid ""
"deprecated.  Additional arguments here are ignored by the default "
":class:`.Float` type.  For database specific floats that support "
"additional arguments, see that dialect's documentation for details, such "
"as :class:`sqlalchemy.dialects.mysql.FLOAT`."
msgstr "推奨されていません。ここでの追加引数は、デフォルトでは無視されます：class： `.Float`型。追加の引数をサポートするデータベース固有の浮動小数点数については、その方言の詳細については、class： `sqlalchemy.dialects.mysql.FLOAT`などのドキュメントを参照してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:1
msgid "PostgreSQL ENUM type."
msgstr "PostgreSQLのENUMタイプ。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:3
msgid ""
"This is a subclass of :class:`.types.Enum` which includes support for "
"PG's ``CREATE TYPE`` and ``DROP TYPE``."
msgstr "これは：class： `.types.Enum`のサブクラスで、PGの` `CREATE TYPE``と` `DROP TYPE``をサポートしています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:6
msgid ""
"When the builtin type :class:`.types.Enum` is used and the "
":paramref:`.Enum.native_enum` flag is left at its default of True, the "
"PostgreSQL backend will use a :class:`.postgresql.ENUM` type as the "
"implementation, so the special create/drop rules will be used."
msgstr "組み込みタイプ：class： `.types.Enum`が使用され、：paramref：` .Enum.native_enum`フラグがデフォルトのTrueに設定されている場合、PostgreSQLバックエンドは：class： `.postgresql.ENUM`を使用します。特定の作成/削除ルールが使用されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:12
msgid ""
"The create/drop behavior of ENUM is necessarily intricate, due to the "
"awkward relationship the ENUM type has in relationship to the parent "
"table, in that it may be \"owned\" by just a single table, or may be "
"shared among many tables."
msgstr "ENUM型の作成/削除動作は、ENUM型が親テーブルとの関係で厄介な関係にあるため、必然的に複雑です。単一のテーブルによって所有されているか、複数のテーブルで共有されている可能性があります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:17
msgid ""
"When using :class:`.types.Enum` or :class:`.postgresql.ENUM` in an "
"\"inline\" fashion, the ``CREATE TYPE`` and ``DROP TYPE`` is emitted "
"corresponding to when the :meth:`.Table.create` and :meth:`.Table.drop` "
"methods are called::"
msgstr "：class： `.types.Enum`または：class：` .postgresql.ENUM`を\ &quot;インライン\&quot;形式で使用すると、 `` CREATE TYPE``と `` DROP TYPE``は、 ：meth： `.Table.create`と：meth：` .Table.drop`メソッドは::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:29
msgid ""
"To use a common enumerated type between multiple tables, the best "
"practice is to declare the :class:`.types.Enum` or "
":class:`.postgresql.ENUM` independently, and associate it with the "
":class:`.MetaData` object itself::"
msgstr "複数のテーブル間で共通の列挙型を使用するには、：class： `.types.Enum`または：class：` .postgresql.ENUM`を単独で宣言し、それを：class： `.MetaData`オブジェクト自体::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:44
msgid ""
"When this pattern is used, care must still be taken at the level of "
"individual table creates.  Emitting CREATE TABLE without also specifying "
"``checkfirst=True`` will still cause issues::"
msgstr "このパターンを使用する場合、個々のテーブル作成のレベルで注意を払う必要があります。 `` checkfirst = True``を指定せずにCREATE TABLEを発行しても問題は発生します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:50
msgid ""
"If we specify ``checkfirst=True``, the individual table-level create "
"operation will check for the ``ENUM`` and create if not exists::"
msgstr "`` checkfirst = True``を指定した場合、個々のテーブルレベルの作成操作は `` ENUM``をチェックし、存在しない場合は作成します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:56
msgid ""
"When using a metadata-level ENUM type, the type will always be created "
"and dropped if either the metadata-wide create/drop is called::"
msgstr "メタデータレベルのENUMタイプを使用する場合、メタデータ全体の作成/削除のいずれかが呼び出されると、タイプは常に作成され、削除されます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:62
msgid "The type can also be created and dropped directly::"
msgstr "型を直接作成してドロップすることもできます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM:67
msgid ""
"The PostgreSQL :class:`.postgresql.ENUM` type now behaves more strictly "
"with regards to CREATE/DROP.  A metadata-level ENUM type will only be "
"created and dropped at the metadata level, not the table level, with the "
"exception of ``table.create(checkfirst=True)``. The ``table.drop()`` call"
" will now emit a DROP TYPE for a table-level enumerated type."
msgstr "PostgreSQL：class： `.postgresql.ENUM`型はCREATE / DROPに関してより厳密に動作するようになりました。メタデータレベルのENUMタイプは、 `` table.create（checkfirst = True） ``を除いて、テーブルレベルではなく、メタデータレベルでのみ作成され、削除されます。 `` table.drop（） ``の呼び出しは、テーブルレベルの列挙型に対してDROP TYPEを発行するようになりました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.__init__:1
msgid "Construct an :class:`~.postgresql.ENUM`."
msgstr "：class： `〜.postgresql.ENUM`を作ります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.__init__:3
msgid ""
"Arguments are the same as that of :class:`.types.Enum`, but also "
"including the following parameters."
msgstr "引数は：class： `.types.Enum`の引数と同じですが、以下のパラメータも含みます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.__init__:7
msgid ""
"Defaults to True. Indicates that ``CREATE TYPE`` should be emitted, after"
" optionally checking for the presence of the type, when the parent table "
"is being created; and additionally that ``DROP TYPE`` is called when the "
"table is dropped.    When ``False``, no check will be performed and no "
"``CREATE TYPE`` or ``DROP TYPE`` is emitted, unless "
":meth:`~.postgresql.ENUM.create` or :meth:`~.postgresql.ENUM.drop` are "
"called directly. Setting to ``False`` is helpful when invoking a creation"
" scheme to a SQL file without access to the actual database - the "
":meth:`~.postgresql.ENUM.create` and :meth:`~.postgresql.ENUM.drop` "
"methods can be used to emit SQL to a target bind.  .. versionadded:: "
"0.7.4"
msgstr "デフォルトはTrueです。親テーブルが作成されているときに、オプションで型の存在をチェックした後に `` CREATE TYPE``を発行する必要があることを示します。 `` DROP TYPE``はテーブルを削除するときに呼び出されます。 `` False``の場合、チェックは行われず、：meth： `〜.postgresql.ENUM.create`または：meth：`〜がなければ、 `` CREATE TYPE``または `` DROP TYPE``は発行されません。 postgresql.ENUM.drop`が直接呼び出されます。 `` False``に設定すると、実際のデータベースにアクセスすることなくSQLスキームの作成スキームを呼び出すときに役立ちます。：meth： `〜.postgresql.ENUM.create`と：meth：`〜.postgresql.ENUM.drop `メソッドを使用して、SQLをターゲットバインドに出力することができます。 .. versionadded :: 0.7.4"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.__init__:7
msgid ""
"Defaults to True. Indicates that ``CREATE TYPE`` should be emitted, after"
" optionally checking for the presence of the type, when the parent table "
"is being created; and additionally that ``DROP TYPE`` is called when the "
"table is dropped.    When ``False``, no check will be performed and no "
"``CREATE TYPE`` or ``DROP TYPE`` is emitted, unless "
":meth:`~.postgresql.ENUM.create` or :meth:`~.postgresql.ENUM.drop` are "
"called directly. Setting to ``False`` is helpful when invoking a creation"
" scheme to a SQL file without access to the actual database - the "
":meth:`~.postgresql.ENUM.create` and :meth:`~.postgresql.ENUM.drop` "
"methods can be used to emit SQL to a target bind."
msgstr "デフォルトはTrueです。親テーブルが作成されているときに、オプションで型の存在をチェックした後に `` CREATE TYPE``を発行する必要があることを示します。 `` DROP TYPE``はテーブルを削除するときに呼び出されます。 `` False``の場合、チェックは行われず、：meth： `〜.postgresql.ENUM.create`または：meth：`〜がなければ、 `` CREATE TYPE``または `` DROP TYPE``は発行されません。 postgresql.ENUM.drop`が直接呼び出されます。 `` False``に設定すると、実際のデータベースにアクセスすることなくSQLスキームの作成スキームを呼び出すときに役立ちます。：meth： `〜.postgresql.ENUM.create`と：meth：`〜.postgresql.ENUM.drop `メソッドを使用して、SQLをターゲットバインドに出力することができます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.create:1
msgid "Emit ``CREATE TYPE`` for this :class:`~.postgresql.ENUM`."
msgstr "このために `` CREATE TYPE``を出します：class： `〜.postgresql.ENUM`。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.create:4
msgid ""
"If the underlying dialect does not support PostgreSQL CREATE TYPE, no "
"action is taken."
msgstr "基礎となる方言がPostgreSQLのCREATE TYPEをサポートしていない場合は、何もしません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.create:7
#: sqlalchemy.dialects.postgresql.ENUM.drop:7
msgid ""
"a connectable :class:`.Engine`, :class:`.Connection`, or similar object "
"to emit SQL."
msgstr "connectable：class： `.Engine`、：class：` .Connection`、またはSQLを送出する類似のオブジェクトです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.create:10
msgid ""
"if ``True``, a query against the PG catalog will be first performed to "
"see if the type does not exist already before creating."
msgstr "`` True``の場合、最初にPGカタログに対するクエリが実行され、型が作成前に既に存在していないかどうかが確認されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.drop:1
msgid "Emit ``DROP TYPE`` for this :class:`~.postgresql.ENUM`."
msgstr "このために `` DROP TYPE``を出します：class： `〜.postgresql.ENUM`。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.drop:4
msgid ""
"If the underlying dialect does not support PostgreSQL DROP TYPE, no "
"action is taken."
msgstr "基礎となる方言がPostgreSQLのDROP TYPEをサポートしていない場合は、何も行われません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ENUM.drop:10
msgid ""
"if ``True``, a query against the PG catalog will be first performed to "
"see if the type actually exists before dropping."
msgstr "`` True``の場合、最初にPGカタログに対するクエリが実行され、型が実際に存在するかどうかを確認します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:1
msgid "Represent the PostgreSQL HSTORE type."
msgstr "PostgreSQLのHSTOREタイプを表します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:3
msgid "The :class:`.HSTORE` type stores dictionaries containing strings, e.g.::"
msgstr "：class： `.HSTORE`型は文字列を含む辞書を格納します::例えば::"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:16
msgid ":class:`.HSTORE` provides for a wide range of operations, including:"
msgstr "：class： `.HSTORE`は以下を含む幅広い操作を提供します："

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:18
msgid "Index operations::"
msgstr "索引操作::"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:22
msgid "Containment operations::"
msgstr "封じ込め操作::"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:28
msgid "Concatenation::"
msgstr "連結：："

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:32
msgid ""
"For a full list of special methods see "
":class:`.HSTORE.comparator_factory`."
msgstr "特別なメソッドの完全なリストについては、class： `.HSTORE.comparator_factory`を参照してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:35
msgid ""
"For usage with the SQLAlchemy ORM, it may be desirable to combine the "
"usage of :class:`.HSTORE` with :class:`.MutableDict` dictionary now part "
"of the :mod:`sqlalchemy.ext.mutable` extension.  This extension will "
"allow \"in-place\" changes to the dictionary, e.g. addition of new keys "
"or replacement/removal of existing keys to/from the current dictionary, "
"to produce events which will be detected by the unit of work::"
msgstr "SQLAlchemy ORMを使用するには：class： `.HSTORE`と：class：` .MutableDict`ディクショナリを：mod： `sqlalchemy.ext.mutable`拡張の一部として組み合わせることが望ましいかもしれません。この拡張機能は辞書に\ &quot;インプレース\&quot;を変更することができます。例えば、新しいキーの追加や、現在の辞書との既存のキーの置換/削除などは、作業単位で検出されるイベントを生成します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:59
msgid ""
"When the :mod:`sqlalchemy.ext.mutable` extension is not used, the ORM "
"will not be alerted to any changes to the contents of an existing "
"dictionary, unless that dictionary value is re-assigned to the HSTORE-"
"attribute itself, thus generating a change event."
msgstr "：mod： `sqlalchemy.ext.mutable`拡張が使用されていない場合、その辞書値がHSTORE属性自体に再割り当てされない限り、ORMは既存の辞書の内容の変更に警告されません。変更イベントを生成する。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE:68
msgid ":class:`.hstore` - render the PostgreSQL ``hstore()`` function."
msgstr "：class： `.hstore`  -  PostgreSQLの` `hstore（）` `関数をレンダリングします。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator:1
msgid "Define comparison operations for :class:`.HSTORE`."
msgstr "：class： `.HSTORE`の比較演算を定義します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.array:1
msgid "Text array expression.  Returns array of alternating keys and values."
msgstr "テキスト配列式。交互のキーと値の配列を返します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.contained_by:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator.contained_by:1
msgid ""
"Boolean expression.  Test if keys are a proper subset of the keys of the "
"argument jsonb expression."
msgstr "ブール式。キーが引数jsonb式のキーの適切なサブセットであるかどうかをテストします。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.contains:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator.contains:1
msgid ""
"Boolean expression.  Test if keys (or array) are a superset of/contained "
"the keys of the argument jsonb expression."
msgstr "ブール式。キー（または配列）が引数jsonb式のスーパーセット/キーを含むかどうかをテストします。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.defined:1
msgid ""
"Boolean expression.  Test for presence of a non-NULL value for the key.  "
"Note that the key may be a SQLA expression."
msgstr "ブール式。キーのNULL以外の値が存在するかどうかをテストします。キーはSQLA式でもよいことに注意してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.delete:1
msgid ""
"HStore expression.  Returns the contents of this hstore with the given "
"key deleted.  Note that the key may be a SQLA expression."
msgstr "HStore式。指定されたキーを削除してこのhstoreの内容を返します。キーはSQLA式でもよいことに注意してください。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_all:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator.has_all:1
msgid "Boolean expression.  Test for presence of all keys in jsonb"
msgstr "ブール式。 jsonbのすべての鍵の存在をテストする"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_any:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator.has_any:1
msgid "Boolean expression.  Test for presence of any key in jsonb"
msgstr "ブール式。 jsonbでのキーの有無のテスト"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.HSTORE.Comparator.has_key:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator.has_key:1
msgid ""
"Boolean expression.  Test for presence of a key.  Note that the key may "
"be a SQLA expression."
msgstr "ブール式。キーの存在をテストします。キーはSQLA式でもよいことに注意してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.keys:1
msgid "Text array expression.  Returns array of keys."
msgstr "テキスト配列式。キーの配列を返します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.matrix:1
msgid "Text array expression.  Returns array of [key, value] pairs."
msgstr "テキスト配列式。 [key、value]のペアの配列を返します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.slice:1
msgid ""
"HStore expression.  Returns a subset of an hstore defined by array of "
"keys."
msgstr "HStore式。キーの配列で定義されたhstoreのサブセットを返します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.HSTORE.Comparator.vals:1
msgid "Text array expression.  Returns array of values."
msgstr "テキスト配列式。値の配列を返します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.hstore:1
msgid ""
"Construct an hstore value within a SQL expression using the PostgreSQL "
"``hstore()`` function."
msgstr "PostgreSQLの `` hstore（） ``関数を使用して、SQL式内でhstore値を構築します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.hstore:4
msgid ""
"The :class:`.hstore` function accepts one or two arguments as described "
"in the PostgreSQL documentation."
msgstr "：class： `.hstore`関数は、PostgreSQLのドキュメントで説明されているように、1つまたは2つの引数を受け取ります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.hstore:24
msgid ":class:`.HSTORE` - the PostgreSQL ``HSTORE`` datatype."
msgstr "：class： `.HSTORE`  -  PostgreSQLの` `HSTORE``データ型です。"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL:1
msgid "PostgreSQL INTERVAL type."
msgstr "PostgreSQL INTERVAL型。"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL:3
msgid ""
"The INTERVAL type may not be supported on all DBAPIs. It is known to work"
" on psycopg2 and not pg8000 or zxjdbc."
msgstr "INTERVAL型は、すべてのDBAPIでサポートされているわけではありません。 psycopg2では動作し、pg8000やzxjdbcでは動作しないことが知られています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL.__init__:1
msgid "Construct an INTERVAL."
msgstr "INTERVALを構築します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL.__init__:3
msgid "optional integer precision value"
msgstr "オプションの整数精度値"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL.__init__:4
msgid ""
"string fields specifier.  allows storage of fields to be limited, such as"
" ``\"YEAR\"``, ``\"MONTH\"``, ``\"DAY TO HOUR\"``, etc.  .. "
"versionadded:: 1.2"
msgstr "文字列フィールド指定子。 YEAR \ &quot;、&quot; \ &quot;MONTH \&quot;、 &quot;&quot; \ &quot;DAY TO HOUR \&quot; ``など、フィールドの格納を制限することができます。versionadded :: 1.2"

#: ../../docstring of sqlalchemy.dialects.postgresql.INTERVAL.__init__:4
msgid ""
"string fields specifier.  allows storage of fields to be limited, such as"
" ``\"YEAR\"``, ``\"MONTH\"``, ``\"DAY TO HOUR\"``, etc."
msgstr "文字列フィールド指定子。 YEAR \ &quot;` `、\&quot; MONTH \ &quot;` `、` `\&quot; DAY TO HOUR \ &quot;` `などのフィールドの格納を制限することができます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:1
msgid "Represent the PostgreSQL JSON type."
msgstr "PostgreSQLのJSONタイプを表します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:3
msgid ""
"This type is a specialization of the Core-level :class:`.types.JSON` "
"type.   Be sure to read the documentation for :class:`.types.JSON` for "
"important tips regarding treatment of NULL values and ORM use."
msgstr "このタイプは、Core-level：class： `.types.JSON`タイプの特殊化です。 NULL値とORMの使用法に関する重要なヒントについては、class： `.types.JSON`のドキュメントを必ず読んでください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:7
msgid ""
":class:`.postgresql.JSON` is now a PostgreSQL- specific specialization of"
" the new :class:`.types.JSON` type."
msgstr "：class： `.postgresql.JSON`はPostgreSQLに特化したnew：class：` .types.JSON`型になりました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:10
msgid ""
"The operators provided by the PostgreSQL version of :class:`.JSON` "
"include:"
msgstr "PostgreSQLバージョン：class： `.JSON`によって提供される演算子は次のものを含みます："

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:13
msgid "Index operations (the ``->`` operator)::"
msgstr "インデックス操作（ ``  - &gt; ``演算子）::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:20
msgid "Index operations returning text (the ``->>`` operator)::"
msgstr "テキストを返すインデックス演算（ ``  -  &gt;&gt; ``演算子）::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:24
msgid ""
"Index operations with CAST (equivalent to ``CAST(col ->> ['some key'] AS "
"<type>)``)::"
msgstr "CASTによる索引演算（ &quot;CAST（col  -  &gt;&gt; [some key &#39;] ASと同じです<type> ） ``）::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:29
msgid "Path index operations (the ``#>`` operator)::"
msgstr "パスインデックス操作（ ``＃&gt; ``演算子）::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:33
msgid "Path index operations returning text (the ``#>>`` operator)::"
msgstr "テキストを返すパスインデックス操作（ ``＃&gt;&gt; ``演算子）::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:37
msgid ""
"The :meth:`.ColumnElement.cast` operator on JSON objects now requires "
"that the :attr:`.JSON.Comparator.astext` modifier be called explicitly, "
"if the cast works only from a textual string."
msgstr "JSONオブジェクトの：meth： `.ColumnElement.cast`演算子は、キャストがテキスト文字列からしか動作しない場合、：attr：` .JSON.Comparator.astext`修飾子を明示的に呼び出す必要があります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:42
msgid ""
"Index operations return an expression object whose type defaults to "
":class:`.JSON` by default, so that further JSON-oriented instructions may"
" be called upon the result type."
msgstr "インデックス操作は、デフォルトでtypeが：class： `.JSON`に設定されている式オブジェクトを返します。これにより、JSON指向のさらなる命令が結果タイプに対して呼び出されるようになります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:46
msgid ""
"Custom serializers and deserializers are specified at the dialect level, "
"that is using :func:`.create_engine`.  The reason for this is that when "
"using psycopg2, the DBAPI only allows serializers at the per-cursor or "
"per-connection level.   E.g.::"
msgstr "カスタムシリアライザとデシリアライザは、func： `.create_engine`を使用して、方言レベルで指定されます。この理由は、psycopg2を使用する場合、DBAPIはシリアライザをカーソル単位または接続単位でのみ許可するためです。例えば：："

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:56
msgid ""
"When using the psycopg2 dialect, the json_deserializer is registered "
"against the database using ``psycopg2.extras.register_default_json``."
msgstr "psycopg2方言を使用する場合、json_deserializerは `` psycopg2.extras.register_default_json``を使用してデータベースに対して登録されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:61
msgid ":class:`.types.JSON` - Core level JSON type"
msgstr "：class： `.types.JSON`  - コアレベルのJSON型"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON:63
msgid ":class:`.JSONB`"
msgstr "：クラス： `.JSONB`"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON.Comparator:1
#: sqlalchemy.dialects.postgresql.JSONB.Comparator:1
msgid "Define comparison operations for :class:`.JSON`."
msgstr "：class： `.JSON`の比較演算を定義します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON.Comparator.astext:1
msgid ""
"On an indexed expression, use the \"astext\" (e.g. \"->>\") conversion "
"when rendered in SQL."
msgstr "インデックス付きの式では、SQLでレンダリングするときに\ &quot;astext \&quot;（たとえば\ &quot; -  &gt;&gt; \&quot;）変換を使用します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSON.Comparator.astext:10
msgid ":meth:`.ColumnElement.cast`"
msgstr "：meth： `.ColumnElement.cast`"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:1
msgid "Represent the PostgreSQL JSONB type."
msgstr "PostgreSQL JSONBタイプを表します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:3
msgid "The :class:`.JSONB` type stores arbitrary JSONB format data, e.g.::"
msgstr "：class： `.JSONB`型は任意のJSONB形式のデータを格納します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:16
msgid ""
"The :class:`.JSONB` type includes all operations provided by "
":class:`.JSON`, including the same behaviors for indexing operations. It "
"also adds additional operators specific to JSONB, including "
":meth:`.JSONB.Comparator.has_key`, :meth:`.JSONB.Comparator.has_all`, "
":meth:`.JSONB.Comparator.has_any`, :meth:`.JSONB.Comparator.contains`, "
"and :meth:`.JSONB.Comparator.contained_by`."
msgstr "：class： `.JSONB`型は：class：` .JSON`によって提供されるすべての操作を含みます。これには、インデックス操作と同じ動作が含まれます。また、：meth： `.JSONB.Comparator.has_key`、：meth：` .JSONB.Comparator.has_all`、：meth： `.JSONB.Comparator.has_any`、：meth：` JSONB.Comparator.has_any`を含むJSONBに固有の演算子を追加します。 .JSONB.Comparator.contains`、および：meth： `.JSONB.Comparator.contained_by`。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:23
msgid ""
"Like the :class:`.JSON` type, the :class:`.JSONB` type does not detect "
"in-place changes when used with the ORM, unless the "
":mod:`sqlalchemy.ext.mutable` extension is used."
msgstr "：class： `.JSON`型と同じように、：class：` .JSONB`型は、：mod： `sqlalchemy.ext.mutable`拡張が使われていない限り、ORMとともに使用されたときのインプレースの変更を検出しません。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:27
msgid ""
"Custom serializers and deserializers are shared with the :class:`.JSON` "
"class, using the ``json_serializer`` and ``json_deserializer`` keyword "
"arguments.  These must be specified at the dialect level using "
":func:`.create_engine`.  When using psycopg2, the serializers are "
"associated with the jsonb type using "
"``psycopg2.extras.register_default_jsonb`` on a per-connection basis, in "
"the same way that ``psycopg2.extras.register_default_json`` is used to "
"register these handlers with the json type."
msgstr "カスタム・シリアライザとデシリアライザは：class： `.JSON`クラスと共有され、` `json_serializer``と` `json_deserializer``キーワード引数を使用します。これらは、func： `.create_engine`を使って方言レベルで指定する必要があります。 psycopg2を使用する場合、シリアライザは、 `` psycopg2.extras.register_default_json``を使用してこれらのハンドラを登録するのと同じ方法で、接続ごとに `` psycopg2.extras.register_default_jsonb``を使用してjsonbタイプに関連付けられますjsonタイプ。"

#: ../../docstring of sqlalchemy.dialects.postgresql.JSONB:40
msgid ":class:`.JSON`"
msgstr "：クラス： `.JSON`"

#: ../../docstring of sqlalchemy.dialects.postgresql.MONEY:1
msgid "Provide the PostgreSQL MONEY type."
msgstr "PostgreSQL MONEYタイプを指定します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.OID:1
msgid "Provide the PostgreSQL OID type."
msgstr "PostgreSQLのOIDタイプを指定します。"

#: of sqlalchemy.dialects.postgresql.REAL:1
msgid "The SQL REAL type."
msgstr "SQL REAL型。"

#: ../../docstring of sqlalchemy.dialects.postgresql.REGCLASS:1
msgid "Provide the PostgreSQL REGCLASS type."
msgstr "PostgreSQLのREGCLASS型を提供します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.TSVECTOR:1
msgid ""
"The :class:`.postgresql.TSVECTOR` type implements the PostgreSQL text "
"search type TSVECTOR."
msgstr "：class： `.postgresql.TSVECTOR`型はPostgreSQLのテキスト検索型TSVECTORを実装しています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.TSVECTOR:4
msgid "It can be used to do full text queries on natural language documents."
msgstr "これは、自然言語文書の全文検索に使用できます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.TSVECTOR:11
msgid ":ref:`postgresql_match`"
msgstr "：ref： `postgresql_match`"

#: ../../docstring of sqlalchemy.dialects.postgresql.UUID:1
msgid "PostgreSQL UUID type."
msgstr "PostgreSQLのUUIDタイプ。"

#: ../../docstring of sqlalchemy.dialects.postgresql.UUID:3
msgid ""
"Represents the UUID column type, interpreting data either as natively "
"returned by the DBAPI or as Python uuid objects."
msgstr "データをDBAPIによってネイティブに返されるか、Pythonのuuidオブジェクトとして解釈するUUID列型を表します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.UUID:7
msgid ""
"The UUID type may not be supported on all DBAPIs. It is known to work on "
"psycopg2 and not pg8000."
msgstr "UUIDタイプは、すべてのDBAPIでサポートされているわけではありません。 psycopg2ではなくpg8000で動作することが知られています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.UUID.__init__:1
msgid "Construct a UUID type."
msgstr "UUID型を構築します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.UUID.__init__:4
msgid ""
"if True, values will be interpreted as Python uuid objects, converting "
"to/from string via the DBAPI."
msgstr "Trueの場合、値はPython Uuidオブジェクトとして解釈され、DBAPIを介してstringに/から変換されます。"

#: ../../dialects/postgresql.rst:93
msgid "Range Types"
msgstr "範囲タイプ"

#: ../../dialects/postgresql.rst:95
msgid ""
"The new range column types found in PostgreSQL 9.2 onwards are catered "
"for by the following types:"
msgstr "PostgreSQL 9.2以降の新しい範囲の列型は、以下の型によって処理されます。"

#: of sqlalchemy.dialects.postgresql.INT4RANGE:1
msgid "Represent the PostgreSQL INT4RANGE type."
msgstr "PostgreSQLのINT4RANGEタイプを表します。"

#: of sqlalchemy.dialects.postgresql.INT8RANGE:1
msgid "Represent the PostgreSQL INT8RANGE type."
msgstr "PostgreSQLのINT8RANGEタイプを表します。"

#: of sqlalchemy.dialects.postgresql.NUMRANGE:1
msgid "Represent the PostgreSQL NUMRANGE type."
msgstr "PostgreSQLのNUMRANGE型を表します。"

#: of sqlalchemy.dialects.postgresql.DATERANGE:1
msgid "Represent the PostgreSQL DATERANGE type."
msgstr "PostgreSQLのDATERANGEタイプを表します。"

#: of sqlalchemy.dialects.postgresql.TSRANGE:1
msgid "Represent the PostgreSQL TSRANGE type."
msgstr "PostgreSQLのTSRANGEタイプを表します。"

#: of sqlalchemy.dialects.postgresql.TSTZRANGE:1
msgid "Represent the PostgreSQL TSTZRANGE type."
msgstr "PostgreSQLのTSTZRANGEタイプを表します。"

#: ../../dialects/postgresql.rst:116
msgid "The types above get most of their functionality from the following mixin:"
msgstr "上記のタイプは、以下のミックスインから機能のほとんどを得ています："

#: of sqlalchemy.dialects.postgresql.ranges.RangeOperators:1
msgid ""
"This mixin provides functionality for the Range Operators listed in Table"
" 9-44 of the `postgres documentation`__ for Range Functions and "
"Operators. It is used by all the range types provided in the ``postgres``"
" dialect and can likely be used for any range types you create yourself."
msgstr "このミックスインは、Range FunctionとOperatorsの `postgres documentation`の表9-44にリストされているRange Operatorsの機能を提供します。 `` postgres``の方言で提供されている全ての範囲型で使われており、自分で作成した任意の範囲の型に使うことができます。"

#: of sqlalchemy.dialects.postgresql.ranges.RangeOperators:9
msgid ""
"No extra support is provided for the Range Functions listed in Table 9-45"
" of the postgres documentation. For these, the normal "
":func:`~sqlalchemy.sql.expression.func` object should be used."
msgstr "Postgresのドキュメントの表9-45に列挙されているRange関数には、特別なサポートは提供されていません。これらのために、normal：func： `〜sqlalchemy.sql.expression.func`オブジェクトを使用する必要があります。"

#: of sqlalchemy.dialects.postgresql.ranges.RangeOperators:13
msgid "Support for PostgreSQL RANGE operations."
msgstr "PostgreSQL RANGE操作のサポート"

#: of sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory:1
msgid "Define comparison operations for range types."
msgstr "範囲タイプの比較操作を定義します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.adjacent_to:1
msgid ""
"Boolean expression. Returns true if the range in the column is adjacent "
"to the range in the operand."
msgstr "ブール式。列の範囲がオペランドの範囲に隣接する場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.contained_by:1
msgid ""
"Boolean expression. Returns true if the column is contained within the "
"right hand operand."
msgstr "ブール式。列が右側のオペランドに含まれている場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.contains:1
msgid ""
"Boolean expression. Returns true if the right hand operand, which can be "
"an element or a range, is contained within the column."
msgstr "ブール式。要素または範囲である右手オペランドが列内に含まれている場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.not_extend_left_of:1
msgid ""
"Boolean expression. Returns true if the range in the column does not "
"extend left of the range in the operand."
msgstr "ブール式。列の範囲がオペランドの範囲の左に広がっていない場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.not_extend_right_of:1
msgid ""
"Boolean expression. Returns true if the range in the column does not "
"extend right of the range in the operand."
msgstr "ブール式。列の範囲がオペランドの範囲の右に拡張されない場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.overlaps:1
msgid ""
"Boolean expression. Returns true if the column overlaps (has points in "
"common with) the right hand operand."
msgstr "ブール式。列が右手オペランドと重なっている（共通点を持つ）場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.strictly_left_of:1
msgid ""
"Boolean expression. Returns true if the column is strictly left of the "
"right hand operand."
msgstr "ブール式。列が厳密に右端のオペランドの左にある場合はtrueを返します。"

#: of
#: sqlalchemy.dialects.postgresql.ranges.RangeOperators.comparator_factory.strictly_right_of:1
msgid ""
"Boolean expression. Returns true if the column is strictly right of the "
"right hand operand."
msgstr "ブール式。列が厳密に右辺のオペランドの右にある場合はtrueを返します。"

#: ../../dialects/postgresql.rst:124
msgid ""
"The range type DDL support should work with any Postgres DBAPI driver, "
"however the data types returned may vary. If you are using ``psycopg2``, "
"it's recommended to upgrade to version 2.5 or later before using these "
"column types."
msgstr "範囲タイプDDLサポートは、Postgres DBAPIドライバで動作するはずですが、返されるデータ型は異なる場合があります。 `` psycopg2``を使用している場合は、これらのカラムタイプを使用する前にバージョン2.5以降にアップグレードすることをお勧めします。"

#: ../../dialects/postgresql.rst:129
msgid ""
"When instantiating models that use these column types, you should pass "
"whatever data type is expected by the DBAPI driver you're using for the "
"column type. For ``psycopg2`` these are ``psycopg2.extras.NumericRange``,"
" ``psycopg2.extras.DateRange``, ``psycopg2.extras.DateTimeRange`` and "
"``psycopg2.extras.DateTimeTZRange`` or the class you've registered with "
"``psycopg2.extras.register_range``."
msgstr "これらの列型を使用するモデルをインスタンス化するときは、使用しているDBAPIドライバによって予期されるデータ型を列型として渡す必要があります。 `` psycopg2``の場合、 `` psycopg2.extras.NumericRange``、 `` psycopg2.extras.DateRange``、 `` psycopg2.extras.DateTimeRange``、 `` psycopg2.extras.DateTimeTZRange``またはクラス`` psycopg2.extras.register_range``で登録しました。"

#: ../../dialects/postgresql.rst:138
msgid "For example:"
msgstr "例えば："

#: ../../dialects/postgresql.rst:158
msgid "PostgreSQL Constraint Types"
msgstr "PostgreSQLの制約の種類"

#: ../../dialects/postgresql.rst:160
msgid ""
"SQLAlchemy supports PostgreSQL EXCLUDE constraints via the "
":class:`ExcludeConstraint` class:"
msgstr "SQLAlchemyはPostgreSQL EXCLUDE制約を次のようにサポートしています：class： `ExcludeConstraint`クラス："

#: ../../docstring of sqlalchemy.dialects.postgresql.ExcludeConstraint:1
msgid "A table-level EXCLUDE constraint."
msgstr "表レベルのEXCLUDE制約。"

#: ../../docstring of sqlalchemy.dialects.postgresql.ExcludeConstraint:3
msgid ""
"Defines an EXCLUDE constraint as described in the `postgres "
"documentation`__."
msgstr "`postgres documentation`で説明されているように、EXCLUDE制約を定義します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:1
msgid "Create an :class:`.ExcludeConstraint` object."
msgstr "：class： `.ExcludeConstraint`オブジェクトを作成します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:11
msgid ""
"The constraint is normally embedded into the :class:`.Table` construct "
"directly, or added later using :meth:`.append_constraint`::"
msgstr "この制約は、通常：class： `.Table`構造体に直接埋め込まれます。または、後で：meth：` .append_constraint` ::"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:30
msgid ""
"A sequence of two tuples of the form ``(column, operator)`` where "
"\"column\" is a SQL expression element or a raw SQL string, most "
"typically a :class:`.Column` object, and \"operator\" is a string "
"containing the operator to use.  .. note::        A plain string passed "
"for the value of \"column\" is interpreted       as an arbitrary SQL  "
"expression; when passing a plain string,       any necessary quoting and "
"escaping syntaxes must be applied       manually. In order to specify a "
"column name when a       :class:`.Column` object is not available, while "
"ensuring that       any necessary quoting rules take effect, an ad-hoc"
"       :class:`.Column` or :func:`.sql.expression.column` object may"
"       be used."
msgstr "\ &quot;列\&quot;がSQL式要素または生のSQL文字列、最も一般的には：class： `.Column`オブジェクトと\&quot;演算子である ``（列、演算子） ``形式の2つのタプルのシーケンス\ &quot;は、使用する演算子を含む文字列です。 .. note :: \ &quot;列\&quot;の値のために渡されるプレーンな文字列は、任意のSQL式として解釈されます。単純な文字列を渡すときには、必要な引用およびエスケープ構文を手動で適用する必要があります。 a：class： `.Column`オブジェクトが利用できないときに列名を指定するために、必要なクォート規則が有効になるようにして、ad-hoc：class：` .Column`または：func： `.sql。 expression.column`オブジェクトを使用することができます。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:31
msgid ""
"A sequence of two tuples of the form ``(column, operator)`` where "
"\"column\" is a SQL expression element or a raw SQL string, most "
"typically a :class:`.Column` object, and \"operator\" is a string "
"containing the operator to use."
msgstr "\ &quot;列\&quot;がSQL式要素または生のSQL文字列、最も一般的には：class： `.Column`オブジェクトと\&quot;演算子である ``（列、演算子） ``形式の2つのタプルのシーケンス\ &quot;は、使用する演算子を含む文字列です。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:38
msgid ""
"A plain string passed for the value of \"column\" is interpreted as an "
"arbitrary SQL  expression; when passing a plain string, any necessary "
"quoting and escaping syntaxes must be applied manually. In order to "
"specify a column name when a :class:`.Column` object is not available, "
"while ensuring that any necessary quoting rules take effect, an ad-hoc "
":class:`.Column` or :func:`.sql.expression.column` object may be used."
msgstr "\ &quot;column \&quot;の値のために渡される単純文字列は、任意のSQL式として解釈されます。単純な文字列を渡すときには、必要な引用およびエスケープ構文を手動で適用する必要があります。 a：class： `.Column`オブジェクトが利用できないときに列名を指定するために、必要なクォート規則が有効になるようにして、ad-hoc：class：` .Column`または：func： `.sql。 expression.column`オブジェクトを使用することができます。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:47
msgid "Optional, the in-database name of this constraint."
msgstr "オプションで、この制約のデータベース内の名前。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:50
msgid ""
"Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when issuing "
"DDL for this constraint."
msgstr "オプションのbool。設定されている場合は、この制約に対してDDLを発行するときにDEFERRABLEまたはNOT DEFERRABLEを発行します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:54
msgid ""
"Optional string.  If set, emit INITIALLY <value> when issuing DDL for "
"this constraint."
msgstr "オプションの文字列。設定されている場合は、INITIALLY <value>この制約のDDLを発行するとき。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:58
msgid ""
"Optional string.  If set, emit USING <index_method> when issuing DDL for "
"this constraint. Defaults to 'gist'."
msgstr "オプションの文字列。設定されている場合は、USINGを発行します。 <index_method>この制約のDDLを発行するとき。デフォルトは &#39;gist&#39;です。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:62
msgid ""
"Optional SQL expression construct or literal SQL string. If set, emit "
"WHERE <predicate> when issuing DDL for this constraint.  .. note::"
"        A plain string passed here is interpreted as an arbitrary SQL"
"       expression; when passing a plain string, any necessary quoting"
"       and escaping syntaxes must be applied manually."
msgstr "オプションのSQL式構成またはリテラルSQL文字列。設定されている場合は、WHERE <predicate>この制約のDDLを発行するとき。 .. note ::ここで渡される単純文字列は、任意のSQL式として解釈されます。単純な文字列を渡すときには、必要な引用およびエスケープ構文を手動で適用する必要があります。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:63
msgid ""
"Optional SQL expression construct or literal SQL string. If set, emit "
"WHERE <predicate> when issuing DDL for this constraint."
msgstr "オプションのSQL式構成またはリテラルSQL文字列。設定されている場合は、WHERE <predicate>この制約のDDLを発行するとき。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.ExcludeConstraint.__init__:69
msgid ""
"A plain string passed here is interpreted as an arbitrary SQL expression;"
" when passing a plain string, any necessary quoting and escaping syntaxes"
" must be applied manually."
msgstr "ここで渡される単純文字列は、任意のSQL式として解釈されます。単純な文字列を渡すときには、必要な引用およびエスケープ構文を手動で適用する必要があります。"

#: ../../dialects/postgresql.rst:166
msgid "For example::"
msgstr "例えば：："

#: ../../dialects/postgresql.rst:182
msgid "PostgreSQL DML Constructs"
msgstr "PostgreSQLのDML構文"

#: of sqlalchemy.dialects.postgresql.dml.insert:1
msgid "Construct a new :class:`.Insert` object."
msgstr "新しい：class： `.Insert`オブジェクトを作成します。"

#: of sqlalchemy.dialects.postgresql.dml.insert:3
msgid ""
"This constructor is mirrored as a public API function; see "
":func:`~.dialects.mysql.insert` for a full usage and argument "
"description."
msgstr "このコンストラクタはパブリックAPI関数としてミラー化されています。完全な使い方と引数の説明については：func： `〜.dialects.mysql.insert`を参照してください。"

#: ../../docstring of sqlalchemy.dialects.postgresql.dml.Insert:1
msgid "PostgreSQL-specific implementation of INSERT."
msgstr "PostgreSQL固有のINSERTの実装。"

#: ../../docstring of sqlalchemy.dialects.postgresql.dml.Insert:3
msgid "Adds methods for PG-specific syntaxes such as ON CONFLICT."
msgstr "ON CONFLICTなどのPG固有の構文のメソッドを追加します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.dml.Insert.excluded:1
msgid "Provide the ``excluded`` namespace for an ON CONFLICT statement"
msgstr "ON CONFLICT文に `` excluded``名前空間を提供する"

#: ../../docstring of sqlalchemy.dialects.postgresql.dml.Insert.excluded:3
msgid ""
"PG's ON CONFLICT clause allows reference to the row that would be "
"inserted, known as ``excluded``.  This attribute provides all columns in "
"this row to be referenceable."
msgstr "PGのON CONFLICT節は、挿入される行を参照することを可能にします。これは ``除外 ``と呼ばれます。この属性は、この行のすべての列を参照可能にします。"

#: ../../docstring of sqlalchemy.dialects.postgresql.dml.Insert.excluded:9
msgid ""
":ref:`postgresql_insert_on_conflict` - example of how to use "
":attr:`.Insert.excluded`"
msgstr "：ref： `postgresql_insert_on_conflict`  - 使用方法の例：attr：` .Insert.excluded`"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:1
msgid "Specifies a DO NOTHING action for ON CONFLICT clause."
msgstr "ON CONFLICT句のDO NOTHINGアクションを指定します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:3
msgid ""
"The ``constraint`` and ``index_elements`` arguments are optional, but "
"only one of these can be specified."
msgstr "`` constraint``と `` index_elements``の引数はオプションですが、これらの引数の1つだけを指定することができます。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:6
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:6
msgid ""
"The name of a unique or exclusion constraint on the table, or the "
"constraint object itself if it has a .name attribute."
msgstr "表に対する一意制約または除外制約の名前、または.name属性を持つ制約オブジェクト自体。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:10
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:10
msgid ""
"A sequence consisting of string column names, :class:`.Column` objects, "
"or other column expression objects that will be used to infer a target "
"index."
msgstr "文字列の列名、：class： `.Column`オブジェクト、またはターゲットインデックスを推論するために使用される他の列式オブジェクトからなるシーケンス。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:15
msgid ""
"Additional WHERE criterion that can be used to infer a conditional target"
" index.  .. versionadded:: 1.1"
msgstr "条件付きターゲット索引を推論するために使用できる追加のWHERE条件。 .. versionadded :: 1.1"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:16
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:15
msgid ""
"Additional WHERE criterion that can be used to infer a conditional target"
" index."
msgstr "条件付きターゲット索引を推論するために使用できる追加のWHERE条件。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_nothing:23
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:45
msgid ":ref:`postgresql_insert_on_conflict`"
msgstr "：ref： `postgresql_insert_on_conflict`"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:1
msgid "Specifies a DO UPDATE SET action for ON CONFLICT clause."
msgstr "ON CONFLICT句のDO UPDATE SETアクションを指定します。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:3
msgid ""
"Either the ``constraint`` or ``index_elements`` argument is required, but"
" only one of these can be specified."
msgstr "`` constraint``または `` index_elements``のいずれかの引数が必要ですが、どちらか一方しか指定できません。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:19
msgid ""
"Required argument. A dictionary or other mapping object with column names"
" as keys and expressions or literals as values, specifying the ``SET`` "
"actions to take. If the target :class:`.Column` specifies a \".key\" "
"attribute distinct from the column name, that key should be used.  .. "
"warning:: This dictionary does **not** take into account    Python-"
"specified default UPDATE values or generation functions,    e.g. those "
"specified using :paramref:`.Column.onupdate`.    These values will not be"
" exercised for an ON CONFLICT style of    UPDATE, unless they are "
"manually specified in the    "
":paramref:`.Insert.on_conflict_do_update.set_` dictionary."
msgstr "必須の引数。取得する `` SET``アクションを指定して、カラム名をキーとして、式やリテラルを値として持つ辞書やその他のマッピングオブジェクト。 target：class： `.Column`が列名とは異なる\&quot;。key \ &quot;属性を指定する場合、そのキーを使用する必要があります。 .. warning ::この辞書は、Pythonで指定されたデフォルトのUPDATE値や生成関数を考慮していません。例えば、：paramref： `.Column.onupdate`を使って指定したものです。これらの値は、：paramref： `.Insert.on_conflict_do_update.set_`ディクショナリで手動で指定されていない限り、ON CONFLICTスタイルのUPDATEスタイルに対しては使用されません。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:20
msgid ""
"Required argument. A dictionary or other mapping object with column names"
" as keys and expressions or literals as values, specifying the ``SET`` "
"actions to take. If the target :class:`.Column` specifies a \".key\" "
"attribute distinct from the column name, that key should be used."
msgstr "必須の引数。取得する `` SET``アクションを指定して、カラム名をキーとして、式やリテラルを値として持つ辞書やその他のマッピングオブジェクト。 target：class： `.Column`が列名とは異なる\&quot;。key \ &quot;属性を指定する場合、そのキーを使用する必要があります。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:26
msgid ""
"This dictionary does **not** take into account Python-specified default "
"UPDATE values or generation functions, e.g. those specified using "
":paramref:`.Column.onupdate`. These values will not be exercised for an "
"ON CONFLICT style of UPDATE, unless they are manually specified in the "
":paramref:`.Insert.on_conflict_do_update.set_` dictionary."
msgstr "この辞書は** Pythonで指定されたデフォルトのUPDATE値や生成関数を考慮していません**例えば：paramref： `.Column.onupdate`を使って指定したものです。これらの値は、：paramref： `.Insert.on_conflict_do_update.set_`ディクショナリで手動で指定されていない限り、ON CONFLICTスタイルのUPDATEスタイルに対しては使用されません。"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:33
msgid ""
"Optional argument. If present, can be a literal SQL string or an "
"acceptable expression for a ``WHERE`` clause that restricts the rows "
"affected by ``DO UPDATE SET``. Rows not meeting the ``WHERE`` condition "
"will not be updated (effectively a ``DO NOTHING`` for those rows).  .. "
"versionadded:: 1.1"
msgstr "オプションの引数。存在する場合、 `` DO UPDATE SET``の影響を受ける行を制限する `` WHERE``節のためのリテラルSQLストリングまたは許容可能な式にすることができます。 `` WHERE``条件を満たす行は更新されません（事実上、これらの行に対しては `` DO NOTHING``）。 .. versionadded :: 1.1"

#: ../../docstring of
#: sqlalchemy.dialects.postgresql.dml.Insert.on_conflict_do_update:34
msgid ""
"Optional argument. If present, can be a literal SQL string or an "
"acceptable expression for a ``WHERE`` clause that restricts the rows "
"affected by ``DO UPDATE SET``. Rows not meeting the ``WHERE`` condition "
"will not be updated (effectively a ``DO NOTHING`` for those rows)."
msgstr "オプションの引数。存在する場合、 `` DO UPDATE SET``の影響を受ける行を制限する `` WHERE``節のためのリテラルSQLストリングまたは許容可能な式にすることができます。 `` WHERE``条件を満たす行は更新されません（事実上、これらの行に対しては `` DO NOTHING``）。"

#: ../../dialects/postgresql.rst:190
msgid "psycopg2"
msgstr "psycopg2"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:8
msgid "psycopg2 Connect Arguments"
msgstr "psycopg2接続引数"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:10
msgid ""
"psycopg2-specific keyword arguments which are accepted by "
":func:`.create_engine()` are:"
msgstr "psycopg2に固有のキーワード引数は、：func： `.create_engine（）`で受け付けます："

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:13
msgid ""
"``server_side_cursors``: Enable the usage of \"server side cursors\" for "
"SQL statements which support this feature. What this essentially means "
"from a psycopg2 point of view is that the cursor is created using a name,"
" e.g. ``connection.cursor('some name')``, which has the effect that "
"result rows are not immediately pre-fetched and buffered after statement "
"execution, but are instead left on the server and only retrieved as "
"needed. SQLAlchemy's :class:`~sqlalchemy.engine.ResultProxy` uses special"
" row-buffering behavior when this feature is enabled, such that groups of"
" 100 rows at a time are fetched over the wire to reduce conversational "
"overhead. Note that the "
":paramref:`.Connection.execution_options.stream_results` execution option"
" is a more targeted way of enabling this mode on a per-execution basis."
msgstr "`` server_side_cursors``：この機能をサポートするSQL文に\ &quot;サーバサイドカーソル\&quot;の使用を有効にします。これが本質的にpsycopg2の観点から意味することは、名前が `` connection.cursor（ &#39;some name&#39;） ``などの名前を使ってカーソルが作成され、結果行がすぐにプリフェッチされてバッファに入れられないafterステートメントの実行ではなく、サーバー上に残され、必要に応じて検索されます。 SQLAlchemyの：class： `〜sqlalchemy.engine.ResultProxy`は、この機能が有効になっているときに特殊な行バッファリング動作を使用します。一度に100行ずつのグループをワイヤでフェッチして会話のオーバーヘッドを減らします。 ：paramref： `.Connection.execution_options.stream_results`実行オプションは、実行ごとにこのモードを有効にするよりターゲットを絞った方法です。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:26
msgid ""
"``use_native_unicode``: Enable the usage of Psycopg2 \"native unicode\" "
"mode per connection.  True by default."
msgstr "`` use_native_unicode``：接続ごとにPsycopg2 \ &quot;native unicode \&quot;モードの使用を有効にします。デフォルトではTrueです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:31
msgid ":ref:`psycopg2_disable_native_unicode`"
msgstr "：ref： `psycopg2_disable_native_unicode`"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:33
msgid ""
"``isolation_level``: This option, available for all PostgreSQL dialects, "
"includes the ``AUTOCOMMIT`` isolation level when using the psycopg2 "
"dialect."
msgstr "`` isolation_level``：このオプションは、すべてのPostgreSQLの方言で利用でき、psycopg2方言を使用するときは `` AUTOCOMMIT``分離レベルを含みます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:41
msgid ""
"``client_encoding``: sets the client encoding in a libpq-agnostic way, "
"using psycopg2's ``set_client_encoding()`` method."
msgstr "`` client_encoding``：psycopg2の `` set_client_encoding（） ``メソッドを使って、クライアントのエンコーディングをlibpqに無関係に設定します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:46
msgid ":ref:`psycopg2_unicode`"
msgstr "：ref： `psycopg2_unicode`"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:48
msgid ""
"``use_batch_mode``: This flag allows ``psycopg2.extras.execute_batch`` "
"for ``cursor.executemany()`` calls performed by the :class:`.Engine`. It "
"is currently experimental but may well become True by default as it is "
"critical for executemany performance."
msgstr "`` use_batch_mode``：このフラグは：class： `.Engine`によって実行される` `cursor.executemany（）` `呼び出しに対して` `psycopg2.extras.execute_batch``を許可します。現在は実験的ですが、executemanyのパフォーマンスにとって重要なので、デフォルトではTrueになる可能性があります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:56
msgid ":ref:`psycopg2_batch_mode`"
msgstr "：ref： `psycopg2_batch_mode`"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:59
msgid "Unix Domain Connections"
msgstr "Unixドメイン接続"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:61
msgid ""
"psycopg2 supports connecting via Unix domain connections.   When the "
"``host`` portion of the URL is omitted, SQLAlchemy passes ``None`` to "
"psycopg2, which specifies Unix-domain communication rather than TCP/IP "
"communication::"
msgstr "psycopg2はUnixドメイン接続による接続をサポートしています。 URLの `` host``部分が省略された場合、SQLAlchemyは `` None``をTCP / IP通信ではなくUnix-domain通信を指定するpsycopg2に渡します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:67
msgid ""
"By default, the socket file used is to connect to a Unix-domain socket in"
" ``/tmp``, or whatever socket directory was specified when PostgreSQL was"
" built.  This value can be overridden by passing a pathname to psycopg2, "
"using ``host`` as an additional keyword argument::"
msgstr "デフォルトでは、使用されるソケットファイルは、 `` / tmp``のUnixドメインソケット、またはPostgreSQLがビルドされたときに指定されたソケットディレクトリに接続することです。この値は、パス名をpsycopg2に渡すことで上書きできます。追加のキーワード引数として `` host``を使用します："

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:73
msgid "host=/var/lib/postgresql\")"
msgstr "ホスト= / var / lib / postgresql \ &quot;）"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:77
msgid ""
"`PQconnectdbParams <http://www.postgresql.org/docs/9.1/static/libpq-"
"connect.html#LIBPQ-PQCONNECTDBPARAMS>`_"
msgstr "`PQconnectdbParams <http://www.postgresql.org/docs/9.1/static/libpq-connect.html#LIBPQ-PQCONNECTDBPARAMS> `_"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:82
msgid "Per-Statement/Connection Execution Options"
msgstr "Per Statement / Connection実行オプション"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:84
msgid ""
"The following DBAPI-specific options are respected when used with "
":meth:`.Connection.execution_options`, "
":meth:`.Executable.execution_options`, :meth:`.Query.execution_options`, "
"in addition to those not specific to DBAPIs:"
msgstr "次のDBAPI固有のオプションは、DBAPIに固有ではないものに加えて：meth： `.Connection.execution_options`、：meth：` .Executable.execution_options`、：meth： `.Query.execution_options`で使用すると尊重されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:88
msgid ""
"``isolation_level`` - Set the transaction isolation level for the "
"lifespan of a :class:`.Connection` (can only be set on a connection, not "
"a statement or query).   See :ref:`psycopg2_isolation_level`."
msgstr "`` isolation_level``  - ：class： `.Connection`の寿命の間、トランザクション分離レベルを設定します（接続でのみ設定でき、文やクエリでは設定できません）。 See：ref： `psycopg2_isolation_level`。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:92
msgid ""
"``stream_results`` - Enable or disable usage of psycopg2 server side "
"cursors - this feature makes use of \"named\" cursors in combination with"
" special result handling methods so that result rows are not fully "
"buffered. If ``None`` or not set, the ``server_side_cursors`` option of "
"the :class:`.Engine` is used."
msgstr "`` stream_results``  -  psycopg2サーバサイドカーソルの使用を有効または無効にする - この機能は特別な結果処理メソッドと組み合わせて\ &quot;名前付き\&quot;カーソルを使用して、結果行が完全にバッファされないようにします。 `` None``または設定されていない場合、：class： `.Engine`の` `server_side_cursors``オプションが使用されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:98
msgid ""
"``max_row_buffer`` - when using ``stream_results``, an integer value that"
" specifies the maximum number of rows to buffer at a time.  This is "
"interpreted by the :class:`.BufferedRowResultProxy`, and if omitted the "
"buffer will grow to ultimately store 1000 rows at a time."
msgstr "`` max_row_buffer``  -  `` stream_results``を使うとき、一度にバッファする最大行数を指定する整数値です。これは：class： `.BufferedRowResultProxy`によって解釈され、省略された場合、バッファは最終的に一度に1000行ずつ格納されるようになります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:108
msgid "Psycopg2 Batch Mode (Fast Execution)"
msgstr "Psycopg2バッチモード（高速実行）"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:110
msgid ""
"Modern versions of psycopg2 include a feature known as `Fast Execution "
"Helpers <http://initd.org/psycopg/docs/extras.html#fast-execution-"
"helpers>`_, which have been shown in benchmarking to improve psycopg2's "
"executemany() performance with INSERTS by multiple orders of magnitude."
"   SQLAlchemy allows this extension to be used for all ``executemany()`` "
"style calls invoked by an :class:`.Engine` when used with multiple "
"parameter sets, by adding the ``use_batch_mode`` flag to "
":func:`.create_engine`::"
msgstr "psycopg2の最新バージョンには、 `Fast Executionヘルパー<http://initd.org/psycopg/docs/extras.html#fast-execution-helpers> `_ &#39;は、INSERTSを使用してpsycopg2のexecutemany（）パフォーマンスを複数の桁で改善するためのベンチマークで示されています。 SQLAlchemyは、複数のパラメータセットとともに使用される場合、class： `.Engine`によって呼び出されるすべての` `executemany（）` `スタイルコールに対してこの拡張を使用できます：` `use_batch_mode``フラグを：func：`に追加します。 create_engine` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:122
msgid ""
"Batch mode is considered to be **experimental** at this time, however may"
" be enabled by default in a future release."
msgstr "バッチモードは現時点で**実験的**とみなされますが、将来のリリースではデフォルトで有効になる可能性があります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:133
msgid "Unicode with Psycopg2"
msgstr "Psycopg2のUnicode"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:135
msgid ""
"By default, the psycopg2 driver uses the ``psycopg2.extensions.UNICODE`` "
"extension, such that the DBAPI receives and returns all strings as Python"
" Unicode objects directly - SQLAlchemy passes these values through "
"without change.   Psycopg2 here will encode/decode string values based on"
" the current \"client encoding\" setting; by default this is the value in"
" the ``postgresql.conf`` file, which often defaults to ``SQL_ASCII``. "
"Typically, this can be changed to ``utf8``, as a more useful default::"
msgstr "デフォルトでは、psycopg2ドライバは `` psycopg2.extensions.UNICODE``拡張を使用します。これにより、DBAPIはすべての文字列をPython Unicodeオブジェクトとして直接受け取って返します.SQLAlchemyはこれらの値をそのまま渡します。 Psycopg2は現在の &quot;クライアントエンコーディング&quot;設定に基づいて文字列値をエンコード/デコードします。デフォルトではこれは `` postgresql.conf``ファイルの値です。デフォルトでは `` SQL_ASCII``がデフォルトです。通常、これはより便利なデフォルトの `` utf8``に変更することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:149
msgid ""
"A second way to affect the client encoding is to set it within Psycopg2 "
"locally.   SQLAlchemy will call psycopg2's "
":meth:`psycopg2:connection.set_client_encoding` method on all new "
"connections based on the value passed to :func:`.create_engine` using the"
" ``client_encoding`` parameter::"
msgstr "クライアントエンコーディングに影響を与えるもう1つの方法は、Psycopg2内でローカルに設定することです。 SQLAlchemyは `` client_encoding``パラメータを使って：func： `.create_engine`に渡される値に基づいて、すべての新しい接続に対してpsycopg2：meth：` psycopg2：connection.set_client_encoding`メソッドを呼び出します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:160
msgid ""
"This overrides the encoding specified in the PostgreSQL client "
"configuration. When using the parameter in this way, the psycopg2 driver "
"emits ``SET client_encoding TO 'utf8'`` on the connection explicitly, and"
" works in all PostgreSQL versions."
msgstr "これは、PostgreSQLクライアント設定で指定されたエンコーディングをオーバーライドします。このようにパラメータを使用すると、psycopg2ドライバは接続上で明示的に `` SET client_encoding TO &#39;utf8&#39;``を発行し、すべてのPostgreSQLバージョンで動作します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:165
msgid ""
"Note that the ``client_encoding`` setting as passed to "
":func:`.create_engine` is **not the same** as the more recently added "
"``client_encoding`` parameter now supported by libpq directly.   This is "
"enabled when ``client_encoding`` is passed directly to "
"``psycopg2.connect()``, and from SQLAlchemy is passed using the "
":paramref:`.create_engine.connect_args` parameter::"
msgstr "：func： `.create_engine`に渡される` `client_encoding``の設定は**最近追加された` `client_encoding``のパラメータと同じではありません**現在libpqが直接サポートしています。これは `` client_encoding``が `` psycopg2.connect（） ``に直接渡され、SQLAlchemyから：paramref： `.create_engine.connect_args`パラメータを使って渡されるときに有効になります::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:179
msgid ""
"The above parameter was only added to libpq as of version 9.1 of "
"PostgreSQL, so using the previous method is better for cross-version "
"support."
msgstr "上記のパラメータは、PostgreSQLのバージョン9.1以降のlibpqにのみ追加されています。したがって、前の方法を使用するとバージョン間のサポートが向上します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:185
msgid "Disabling Native Unicode"
msgstr "ネイティブUnicodeを無効にする"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:187
msgid ""
"SQLAlchemy can also be instructed to skip the usage of the psycopg2 "
"``UNICODE`` extension and to instead utilize its own unicode "
"encode/decode services, which are normally reserved only for those DBAPIs"
" that don't fully support unicode directly.  Passing "
"``use_native_unicode=False`` to :func:`.create_engine` will disable usage"
" of ``psycopg2.extensions.UNICODE``. SQLAlchemy will instead encode data "
"itself into Python bytestrings on the way in and coerce from bytes on the"
" way back, using the value of the :func:`.create_engine` ``encoding`` "
"parameter, which defaults to ``utf-8``. SQLAlchemy's own unicode "
"encode/decode functionality is steadily becoming obsolete as most DBAPIs "
"now support unicode fully."
msgstr "SQLAlchemyには、psycopg2の `` UNICODE``拡張機能の使用をスキップし、代わりに独自のUnicodeエンコード/デコードサービスを利用するように指示することもできます。通常は、ユニコードを完全にサポートしていないDBAPIのみに予約されています。 `` use_native_unicode = False``を：func： `.create_engine`に渡すと、` `psycopg2.extensions.UNICODE``の使用が無効になります。 SQLAlchemyは代わりに：func： `.create_engine` `` encoding``パラメータの値を使用して、途中のバイトからデータをPythonバイトストリングにエンコードして返します。デフォルトは `` utf-8` `。 SQLAlchemy独自のUnicodeエンコード/デコード機能は、ほとんどのDBAPIが現在ユニコードを完全にサポートしているため、徐々に時代遅れになっています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:200
msgid "Bound Parameter Styles"
msgstr "バウンド・パラメータ・スタイル"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:202
#, python-format
msgid ""
"The default parameter style for the psycopg2 dialect is \"pyformat\", "
"where SQL is rendered using ``%(paramname)s`` style.   This format has "
"the limitation that it does not accommodate the unusual case of parameter"
" names that actually contain percent or parenthesis symbols; as "
"SQLAlchemy in many cases generates bound parameter names based on the "
"name of a column, the presence of these characters in a column name can "
"lead to problems."
msgstr "psycopg2方言のデフォルトのパラメータスタイルは\ &quot;pyformat \&quot;です。SQLは ``％（paramname）s``スタイルでレンダリングされます。この形式には、実際にパーセント記号や括弧記号が含まれているような特殊な場合には対応していないという制約があります。多くの場合、SQLAlchemyは列の名前に基づいてバインドされたパラメータ名を生成するため、列名にこれらの文字が存在すると問題が発生する可能性があります。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:209
msgid ""
"There are two solutions to the issue of a :class:`.schema.Column` that "
"contains one of these characters in its name.  One is to specify the "
":paramref:`.schema.Column.key` for columns that have such names::"
msgstr "問題の解決策は2つあります：class： `.schema.Column`には、名前にこれらの文字の1つが含まれています。一つは、そのような名前を持つカラムに対して：paramref： `.schema.Column.key`を指定することです::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:217
msgid ""
"Above, an INSERT statement such as ``measurement.insert()`` will use "
"``size_meters`` as the parameter name, and a SQL expression such as "
"``measurement.c.size_meters > 10`` will derive the bound parameter name "
"from the ``size_meters`` key as well."
msgstr "上記のように、 `` measurement.insert（） ``のようなINSERT文は、パラメータ名として `` size_meters``を使用し、 `` measurement.c.size_meters&gt; 10``のようなSQL式は、 nameを `` size_meters``キーから取得します。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:222
msgid ""
"- SQL expressions will use :attr:`.Column.key` as the source of naming "
"when anonymous bound parameters are created in SQL expressions; "
"previously, this behavior only applied to :meth:`.Table.insert` and "
":meth:`.Table.update` parameter names."
msgstr "-  SQL式では、匿名バインドされたパラメータがSQL式で作成されるときに、名前付けのソースとしてattr： `.Column.key`が使用されます。以前は、この動作は：meth： `.Table.insert`と：meth：` .Table.update`のパラメータ名にのみ適用されていました。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:227
msgid ""
"The other solution is to use a positional format; psycopg2 allows use of "
"the \"format\" paramstyle, which can be passed to "
":paramref:`.create_engine.paramstyle`::"
msgstr "もう1つの解決方法は、定位フォーマットを使用することです。 psycopg2は\ &quot;format \&quot; paramstyleを使用できます。これは次のように渡すことができます：paramref： `.create_engine.paramstyle` ::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:234
msgid "With the above engine, instead of a statement like::"
msgstr "上記のエンジンでは、::のようなステートメントの代わりに"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:239
msgid "we instead see::"
msgstr "私たちは代わりに::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:244
msgid ""
"Where above, the dictionary style is converted into a tuple with "
"positional style."
msgstr "上記の場合、辞書スタイルは位置スタイルを持つタプルに変換されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:249
msgid "Transactions"
msgstr "トランザクション"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:251
msgid ""
"The psycopg2 dialect fully supports SAVEPOINT and two-phase commit "
"operations."
msgstr "psycopg2ダイアレクトは、SAVEPOINTと2フェーズコミット操作を完全にサポートしています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:256
msgid "Psycopg2 Transaction Isolation Level"
msgstr "Psycopg2トランザクション分離レベル"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:258
msgid ""
"As discussed in :ref:`postgresql_isolation_level`, all PostgreSQL "
"dialects support setting of transaction isolation level both via the "
"``isolation_level`` parameter passed to :func:`.create_engine`, as well "
"as the ``isolation_level`` argument used by "
":meth:`.Connection.execution_options`.  When using the psycopg2 dialect, "
"these options make use of psycopg2's ``set_isolation_level()`` connection"
" method, rather than emitting a PostgreSQL directive; this is because "
"psycopg2's API-level setting is always emitted at the start of each "
"transaction in any case."
msgstr "：ref： `postgresql_isolation_level`で説明したように、PostgreSQLのすべての方言は：func：` .create_engine`に渡される `` isolation_level``パラメータと `` isolation_level``引数の両方によってトランザクション分離レベルの設定をサポートします。 ：meth： `.Connection.execution_options`。 psycopg2方言を使用する場合、これらのオプションはPostgreSQLディレクティブを発行するのではなく、psycopg2の `` set_isolation_level（） ``接続メソッドを使用します。これは、いずれの場合でもpsycopg2のAPIレベルの設定が常に各トランザクションの開始時に発行されるためです。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:268
msgid "The psycopg2 dialect supports these constants for isolation level:"
msgstr "psycopg2方言は、分離レベルのために次の定数をサポートしています。"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:45
#: sqlalchemy.dialects.postgresql.psycopg2:274
msgid "``AUTOCOMMIT``"
msgstr "`` AUTOCOMMIT``"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:276
msgid "support for AUTOCOMMIT isolation level when using psycopg2."
msgstr "psycopg2を使用する場合のAUTOCOMMIT分離レベルのサポート"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:287
msgid "NOTICE logging"
msgstr "通知ログ"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:289
msgid ""
"The psycopg2 dialect will log PostgreSQL NOTICE messages via the "
"``sqlalchemy.dialects.postgresql`` logger::"
msgstr "psycopg2方言は、 `` sqlalchemy.dialects.postgresql``ロガー経由でPostgreSQL NOTICEメッセージをロギングします::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:298
msgid "HSTORE type"
msgstr "HSTOREタイプ"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:300
msgid ""
"The ``psycopg2`` DBAPI includes an extension to natively handle "
"marshalling of the HSTORE type.   The SQLAlchemy psycopg2 dialect will "
"enable this extension by default when psycopg2 version 2.4 or greater is "
"used, and it is detected that the target database has the HSTORE type set"
" up for use. In other words, when the dialect makes the first connection,"
" a sequence like the following is performed:"
msgstr "`` psycopg2``のDBAPIには、HSTORE型のマーシャリングをネイティブに処理する拡張機能が含まれています。 SQLAlchemy psycopg2方言は、psycopg2バージョン2.4以上が使用されている場合、デフォルトでこの拡張を有効にし、ターゲットデータベースが使用のために設定されたHSTOREタイプを持っていることが検出されます。言い換えれば、方言が最初に接続すると、次のようなシーケンスが実行されます。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:307
msgid ""
"Request the available HSTORE oids using "
"``psycopg2.extras.HstoreAdapter.get_oids()``. If this function returns a "
"list of HSTORE identifiers, we then determine that the ``HSTORE`` "
"extension is present. This function is **skipped** if the version of "
"psycopg2 installed is less than version 2.4."
msgstr "`` psycopg2.extras.HstoreAdapter.get_oids（） ``を使って利用可能なHSTOREのoidを要求してください。この関数がHSTORE識別子のリストを返した場合、 `` HSTORE``拡張が存在すると判断します。この機能は、インストールされたpsycopg2のバージョンがバージョン2.4未満の場合は**スキップされます**。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:314
msgid ""
"If the ``use_native_hstore`` flag is at its default of ``True``, and "
"we've detected that ``HSTORE`` oids are available, the "
"``psycopg2.extensions.register_hstore()`` extension is invoked for all "
"connections."
msgstr "`` use_native_hstore``フラグがデフォルトの `` True``で、 `` HSTORE``が利用可能であることが検出された場合、 `` psycopg2.extensions.register_hstore（） ``拡張が呼び出されますすべての接続。"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:319
msgid ""
"The ``register_hstore()`` extension has the effect of **all Python "
"dictionaries being accepted as parameters regardless of the type of "
"target column in SQL**. The dictionaries are converted by this extension "
"into a textual HSTORE expression.  If this behavior is not desired, "
"disable the use of the hstore extension by setting ``use_native_hstore`` "
"to ``False`` as follows::"
msgstr "`` register_hstore（） ``拡張は、SQL **の対象カラムのタイプにかかわらず、すべてのPython辞書がパラメータとして受け入れられるという効果があります。辞書は、この拡張によってテキストのHSTORE式に変換されます。この動作が望ましくない場合は、次のように `` use_native_hstore``を `` False``に設定してhstore拡張機能の使用を無効にしてください::"

#: ../../docstring of sqlalchemy.dialects.postgresql.psycopg2:329
msgid ""
"The ``HSTORE`` type is **still supported** when the "
"``psycopg2.extensions.register_hstore()`` extension is not used.  It "
"merely means that the coercion between Python dictionaries and the HSTORE"
" string format, on both the parameter side and the result side, will take"
" place within SQLAlchemy's own marshalling logic, and not that of "
"``psycopg2`` which may be more performant."
msgstr "`` psycopg2.extensions.register_hstore（） ``拡張子が使われていない場合、 `` HSTORE``型は**まだサポートされています**。これは、パラメータ側と結果側の両方でPython辞書とHSTORE文字列形式の間の強制が、SQLAlchemy独自のマーシャリングロジック内で行われ、より性能の高い「psycopg2」ではなく行われることを意味します。"

#: ../../dialects/postgresql.rst:195
msgid "pg8000"
msgstr "pg8000"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:11
msgid "Unicode"
msgstr "Unicode"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:13
msgid ""
"pg8000 will encode / decode string values between it and the server using"
" the PostgreSQL ``client_encoding`` parameter; by default this is the "
"value in the ``postgresql.conf`` file, which often defaults to "
"``SQL_ASCII``. Typically, this can be changed to ``utf-8``, as a more "
"useful default::"
msgstr "pg8000は、PostgreSQLの `` client_encoding``パラメータを使用して、サーバとの間で文字列値をエンコード/デコードします。デフォルトではこれは `` postgresql.conf``ファイルの値です。デフォルトでは `` SQL_ASCII``がデフォルトです。典型的には、これはより有用なデフォルトとして `` utf-8``に変更することができます::"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:22
msgid ""
"The ``client_encoding`` can be overridden for a session by executing the "
"SQL:"
msgstr "`` client_encoding``は、SQLを実行してセッションに対してオーバーライドすることができます："

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:24
msgid "SET CLIENT_ENCODING TO 'utf8';"
msgstr "SET CLIENT_ENCODING TO &#39;utf8&#39;;"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:26
msgid ""
"SQLAlchemy will execute this SQL on all new connections based on the "
"value passed to :func:`.create_engine` using the ``client_encoding`` "
"parameter::"
msgstr "SQLAlchemyは `` client_encoding``パラメータを使って：func： `.create_engine`に渡された値に基づいて、この新しいSQLをすべての新しい接続で実行します::"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:36
msgid "pg8000 Transaction Isolation Level"
msgstr "pg8000トランザクション分離レベル"

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:38
msgid ""
"The pg8000 dialect offers the same isolation level settings as that of "
"the :ref:`psycopg2 <psycopg2_isolation_level>` dialect:"
msgstr "pg8000ダイアレクトは、：ref： `psycopg2 <psycopg2_isolation_level> `方言："

#: ../../docstring of sqlalchemy.dialects.postgresql.pg8000:47
msgid "support for AUTOCOMMIT isolation level when using pg8000."
msgstr "pg8000を使用する場合のAUTOCOMMIT分離レベルのサポート"

#: ../../dialects/postgresql.rst:200
msgid "psycopg2cffi"
msgstr "psycopg2cffi"

#: of sqlalchemy.dialects.postgresql.psycopg2cffi:7
msgid ""
"``psycopg2cffi`` is an adaptation of ``psycopg2``, using CFFI for the C "
"layer. This makes it suitable for use in e.g. PyPy. Documentation is as "
"per ``psycopg2``."
msgstr "`` psycopg2cffi``は、C層にCFFIを使う `` psycopg2``の適応です。これはPyPyなどでの使用に適しています。ドキュメンテーションは `` psycopg2``の通りです。"

#: of sqlalchemy.dialects.postgresql.psycopg2cffi:15
msgid ":mod:`sqlalchemy.dialects.postgresql.psycopg2`"
msgstr "：mod： `sqlalchemy.dialects.postgresql.psycopg2`"

#: ../../dialects/postgresql.rst:205
msgid "py-postgresql"
msgstr "py-postgresql"

#: ../../dialects/postgresql.rst:212
msgid "pygresql"
msgstr "pygresql"

#: ../../dialects/postgresql.rst:217
msgid "zxjdbc"
msgstr "zxjdbc"

