# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../dialects/mysql.rst:4
msgid "MySQL"
msgstr "MySQL"

#: ../../docstring of sqlalchemy.dialects.mysql.base:5
msgid "Supported Versions and Features"
msgstr "サポートされているバージョンと機能"

#: ../../docstring of sqlalchemy.dialects.mysql.base:7
msgid ""
"SQLAlchemy supports MySQL starting with version 4.1 through modern "
"releases. However, no heroic measures are taken to work around major "
"missing SQL features - if your server version does not support sub-"
"selects, for example, they won't work in SQLAlchemy either."
msgstr "SQLAlchemyはMySQLをバージョン4.1から現代版までサポートしています。しかし、主要な欠落したSQL機能を回避するための英雄対策は講じられていません。サーバーバージョンがサブ選択をサポートしていない場合、SQLAlchemyでは機能しません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:12
msgid ""
"See the official MySQL documentation for detailed information about "
"features supported in any given server release."
msgstr "特定のサーバリリースでサポートされている機能の詳細については、公式MySQLのマニュアルを参照してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:18
msgid "Connection Timeouts and Disconnects"
msgstr "接続タイムアウトと切断"

#: ../../docstring of sqlalchemy.dialects.mysql.base:20
msgid ""
"MySQL features an automatic connection close behavior, for connections "
"that have been idle for a fixed period of time, defaulting to eight "
"hours. To circumvent having this issue, use the "
":paramref:`.create_engine.pool_recycle` option which ensures that a "
"connection will be discarded and replaced with a new one if it has been "
"present in the pool for a fixed number of seconds::"
msgstr "MySQLには、一定時間アイドル状態になっているコネクション（デフォルトは8時間）の自動接続クローズ動作があります。この問題を回避するには、：paramref： `.create_engine.pool_recycle`オプションを使用してください。接続が破棄され、プールに一定秒間存在していれば新しいものに置き換えられます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:29
msgid ""
"For more comprehensive disconnect detection of pooled connections, "
"including accommodation of  server restarts and network issues, a pre-"
"ping approach may be employed.  See :ref:`pool_disconnects` for current "
"approaches."
msgstr "サーバーの再起動やネットワークの問題を含む、プールされた接続のより包括的な切断検出のために、事前pingアプローチを使用することができます。現在のアプローチについては：ref： `pool_disconnects`を参照してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:35
msgid ""
":ref:`pool_disconnects` - Background on several techniques for dealing "
"with timed out connections as well as database restarts."
msgstr "：ref： `pool_disconnects`  - タイムアウトした接続やデータベースの再起動を扱ういくつかのテクニックの背景。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:41
msgid "CREATE TABLE arguments including Storage Engines"
msgstr "ストレージエンジンを含むCREATE TABLEの引数"

#: ../../docstring of sqlalchemy.dialects.mysql.base:43
msgid ""
"MySQL's CREATE TABLE syntax includes a wide array of special options, "
"including ``ENGINE``, ``CHARSET``, ``MAX_ROWS``, ``ROW_FORMAT``, "
"``INSERT_METHOD``, and many more. To accommodate the rendering of these "
"arguments, specify the form ``mysql_argument_name=\"value\"``.  For "
"example, to specify a table with ``ENGINE`` of ``InnoDB``, ``CHARSET`` of"
" ``utf8mb4``, and ``KEY_BLOCK_SIZE`` of ``1024``::"
msgstr "MySQLのCREATE TABLE構文には、 `` ENGINE``、 `` CHARSET``、 `` MAX_ROWS``、 `` ROW_FORMAT``、INSERT_METHOD`などの幅広い特別なオプションがあります。これらの引数のレンダリングに対応するには、 `` mysql_argument_name = \ &quot;value \&quot; ``の形式を指定します。たとえば、 `` InnoDB``、 `` CHARSET``、 `` utf8mb4``、 `` KEY_BLOCK_SIZE``の `` 1024`` ::のENGINE``で表を指定するには、"

#: ../../docstring of sqlalchemy.dialects.mysql.base:58
msgid ""
"The MySQL dialect will normally transfer any keyword specified as "
"``mysql_keyword_name`` to be rendered as ``KEYWORD_NAME`` in the ``CREATE"
" TABLE`` statement.  A handful of these names will render with a space "
"instead of an underscore; to support this, the MySQL dialect has "
"awareness of these particular names, which include ``DATA DIRECTORY`` "
"(e.g. ``mysql_data_directory``), ``CHARACTER SET`` (e.g. "
"``mysql_character_set``) and ``INDEX DIRECTORY`` (e.g. "
"``mysql_index_directory``)."
msgstr "MySQLの方言は通常、 `` mysql_keyword_name``で指定されたキーワードを `` CREATE TABLE``文で `` KEYWORD_NAME``としてレンダリングします。これらの名前のほんの一握りは、アンダースコアの代わりにスペースで表示されます。これをサポートするために、MySQLの方言は、 &quot;DATA DIRECTORY&quot;（例えば `` mysql_data_directory``）、 `` CHARACTER SET``（例えば `` mysql_character_set``）、 `` INDEX DIRECTORY ``（例えば、 `` mysql_index_directory``）。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:67
msgid ""
"The most common argument is ``mysql_engine``, which refers to the storage"
" engine for the table.  Historically, MySQL server installations would "
"default to ``MyISAM`` for this value, although newer versions may be "
"defaulting to ``InnoDB``.  The ``InnoDB`` engine is typically preferred "
"for its support of transactions and foreign keys."
msgstr "最も一般的な引数は `` mysql_engine``です。これはテーブルのストレージエンジンを参照します。歴史的には、MySQLサーバのインストールはデフォルトで `` MyISAM``になりますが、新しいバージョンは `` InnoDB``にデフォルト設定されているかもしれません。 `` InnoDB``エンジンは通常、トランザクションと外部キーのサポートのために好まれます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:73
msgid ""
"A :class:`.Table` that is created in a MySQL database with a storage "
"engine of ``MyISAM`` will be essentially non-transactional, meaning any "
"INSERT/UPDATE/DELETE statement referring to this table will be invoked as"
" autocommit.   It also will have no support for foreign key constraints; "
"while the ``CREATE TABLE`` statement accepts foreign key options, when "
"using the ``MyISAM`` storage engine these arguments are discarded.  "
"Reflecting such a table will also produce no foreign key constraint "
"information."
msgstr "A：class： `.Table`は、MySQLデータベース内で&quot; MyISAM &quot;というストレージエンジンを使用して作成されたもので、基本的にトランザクションではないため、このテーブルを参照するINSERT / UPDATE / DELETE文は自動コミットとして呼び出されます。また、外部キーの制約をサポートしません。 `` CREATE TABLE``ステートメントは外部キーオプションを受け入れますが、 `` MyISAM``ストレージエンジンを使うときは、これらの引数は破棄されます。このような表を反映することで、外部キー制約情報も生成されません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:81
msgid ""
"For fully atomic transactions as well as support for foreign key "
"constraints, all participating ``CREATE TABLE`` statements must specify a"
" transactional engine, which in the vast majority of cases is ``InnoDB``."
msgstr "完全なアトミックトランザクションと外部キー制約のサポートのためには、参加する `` CREATE TABLE``ステートメントはトランザクションエンジンを指定しなければなりません。大部分のケースでは `` InnoDB``です。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:87
msgid ""
"`The InnoDB Storage Engine <http://dev.mysql.com/doc/refman/5.0/en"
"/innodb-storage-engine.html>`_ - on the MySQL website."
msgstr "InnoDBストレージエンジン<http://dev.mysql.com/doc/refman/5.0/en/innodb-storage-engine.html> `_  -  MySQLのウェブサイトにあります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:92
msgid "Case Sensitivity and Table Reflection"
msgstr "大文字小文字の区別とテーブルのリフレクション"

#: ../../docstring of sqlalchemy.dialects.mysql.base:94
msgid ""
"MySQL has inconsistent support for case-sensitive identifier names, "
"basing support on specific details of the underlying operating system. "
"However, it has been observed that no matter what case sensitivity "
"behavior is present, the names of tables in foreign key declarations are "
"*always* received from the database as all-lower case, making it "
"impossible to accurately reflect a schema where inter-related tables use "
"mixed-case identifier names."
msgstr "MySQLでは、大文字と小文字を区別する識別子名が一貫していないため、基盤となるオペレーティングシステムの特定の詳細をサポートしています。しかし、どのような大文字小文字の区別があっても、外部キー宣言のテーブル名はすべて小文字でデータベースから受信されるため、関連するスキーマを正確に反映することは不可能であることが確認されていますテーブルは大文字と小文字の区別した識別子名を使用します"

#: ../../docstring of sqlalchemy.dialects.mysql.base:102
msgid ""
"Therefore it is strongly advised that table names be declared as all "
"lower case both within SQLAlchemy as well as on the MySQL database "
"itself, especially if database reflection features are to be used."
msgstr "したがって、特にデータベースリフレクション機能を使用する場合は、SQLAlchemyとMySQLデータベースの両方でテーブル名をすべて小文字で宣言することを強くお勧めします。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:110
msgid "Transaction Isolation Level"
msgstr "トランザクション分離レベル"

#: ../../docstring of sqlalchemy.dialects.mysql.base:112
msgid ""
"All MySQL dialects support setting of transaction isolation level both "
"via a dialect-specific parameter "
":paramref:`.create_engine.isolation_level` accepted by "
":func:`.create_engine`, as well as the "
":paramref:`.Connection.execution_options.isolation_level` argument as "
"passed to :meth:`.Connection.execution_options`. This feature works by "
"issuing the command ``SET SESSION TRANSACTION ISOLATION LEVEL <level>`` "
"for each new connection.  For the special AUTOCOMMIT isolation level, "
"DBAPI-specific techniques are used."
msgstr "すべてのMySQLダイアレクトは、：paramref： `.Connection.execution_options.isolation_level`と同様に、ダイアレクト特有のパラメータ：paramref：` .create_engine.isolation_level`：func： `.create_engine`を介してトランザクション分離レベルの設定をサポートします。引数は：meth： `.Connection.execution_options`に渡されます。この機能は、コマンド `` SET SESSION TRANSACTION ISOLATION LEVEL <level> ``新しい接続ごとに。特殊なAUTOCOMMIT分離レベルの場合は、DBAPI固有のテクニックが使用されます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:122
msgid "To set isolation level using :func:`.create_engine`::"
msgstr "func： `.create_engine` ::を使って隔離レベルを設定する"

#: ../../docstring of sqlalchemy.dialects.mysql.base:129
msgid "To set using per-connection execution options::"
msgstr "接続ごとの実行オプションを使用して設定するには::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:136
msgid "Valid values for ``isolation_level`` include:"
msgstr "`` isolation_level``に有効な値は次のとおりです："

#: ../../docstring of sqlalchemy.dialects.mysql.base:138
msgid "``READ COMMITTED``"
msgstr "`` READ COMMITTED``"

#: ../../docstring of sqlalchemy.dialects.mysql.base:139
msgid "``READ UNCOMMITTED``"
msgstr "`` READ UNCOMMITTED``"

#: ../../docstring of sqlalchemy.dialects.mysql.base:140
msgid "``REPEATABLE READ``"
msgstr "`` REPEATABLE READ``"

#: ../../docstring of sqlalchemy.dialects.mysql.base:141
msgid "``SERIALIZABLE``"
msgstr "``シリアル化可能 ``"

#: ../../docstring of sqlalchemy.dialects.mysql.base:142
msgid "``AUTOCOMMIT``"
msgstr "`` AUTOCOMMIT``"

#: ../../docstring of sqlalchemy.dialects.mysql.base:144
msgid ""
"The special ``AUTOCOMMIT`` value makes use of the various \"autocommit\" "
"attributes provided by specific DBAPIs, and is currently supported by "
"MySQLdb, MySQL-Client, MySQL-Connector Python, and PyMySQL.   Using it, "
"the MySQL connection will return true for the value of ``SELECT "
"@@autocommit;``."
msgstr "特別な `` AUTOCOMMIT``値は、特定のDBAPIによって提供される様々な\ &quot;autocommit \&quot;属性を利用し、現在MySQLdb、MySQL-Client、MySQL-Connector Python、PyMySQLでサポートされています。これを使用すると、MySQL接続は `` SELECT @@ autocommit; ``の値に対してtrueを返します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:150
msgid "- added support for the AUTOCOMMIT isolation level."
msgstr "-  AUTOCOMMIT分離レベルのサポートが追加されました。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:153
msgid "AUTO_INCREMENT Behavior"
msgstr "AUTO_INCREMENTの動作"

#: ../../docstring of sqlalchemy.dialects.mysql.base:155
msgid ""
"When creating tables, SQLAlchemy will automatically set "
"``AUTO_INCREMENT`` on the first :class:`.Integer` primary key column "
"which is not marked as a foreign key::"
msgstr "テーブルを作成するとき、SQLAlchemyは外部キーとしてマークされていない最初の：class： `.Integer`プライマリキーカラムに自動的に` `AUTO_INCREMENT``を設定します::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:168
msgid ""
"You can disable this behavior by passing ``False`` to the "
":paramref:`~.Column.autoincrement` argument of :class:`.Column`.  This "
"flag can also be used to enable auto-increment on a secondary column in a"
" multi-column key for some storage engines::"
msgstr "：class： `.Column`の：paramref：`〜.Column.autoincrement`引数に `` False``を渡すことでこの動作を無効にすることができます。このフラグを使用して、一部のストレージエンジンの複数列キーの2次列で自動インクリメントを有効にすることもできます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:181
#: sqlalchemy.dialects.mysql.mysqldb:33
msgid "Server Side Cursors"
msgstr "サーバー側のカーソル"

#: ../../docstring of sqlalchemy.dialects.mysql.base:183
msgid ""
"Server-side cursor support is available for the MySQLdb and PyMySQL "
"dialects. From a MySQL point of view this means that the "
"``MySQLdb.cursors.SSCursor`` or ``pymysql.cursors.SSCursor`` class is "
"used when building up the cursor which will receive results.  The most "
"typical way of invoking this feature is via the "
":paramref:`.Connection.execution_options.stream_results` connection "
"execution option.   Server side cursors can also be enabled for all "
"SELECT statements unconditionally by passing ``server_side_cursors=True``"
" to :func:`.create_engine`."
msgstr "サーバ側のカーソルサポートは、MySQLdbとPyMySQLの方言で利用できます。 MySQLの観点からは、結果を受け取るカーソルを構築するときに `` MySQLdb.cursors.SSCursor``または `` pymysql.cursors.SSCursor``クラスが使用されることを意味します。この機能を呼び出す最も一般的な方法は、：paramref： `.Connection.execution_options.stream_results`接続実行オプションです。サーバー側のカーソルは、 `` server_side_cursors = True``を：func： `.create_engine`に渡すことによって、無条件にすべてのSELECTステートメントに対して有効にすることもできます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:192
msgid "- added server-side cursor support."
msgstr "- サーバー側のカーソルサポートが追加されました。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:197
#: sqlalchemy.dialects.mysql.mysqldb:10 sqlalchemy.dialects.mysql.oursql:8
#: sqlalchemy.dialects.mysql.pymysql:8
msgid "Unicode"
msgstr "Unicode"

#: ../../docstring of sqlalchemy.dialects.mysql.base:200
msgid "Charset Selection"
msgstr "文字セットの選択"

#: ../../docstring of sqlalchemy.dialects.mysql.base:202
msgid ""
"Most MySQL DBAPIs offer the option to set the client character set for a "
"connection.   This is typically delivered using the ``charset`` parameter"
" in the URL, such as::"
msgstr "ほとんどのMySQL DBAPIは、接続のクライアント文字セットを設定するオプションを提供します。これは通常、次のようにURLの `` charset``パラメータを使って行われます："

#: ../../docstring of sqlalchemy.dialects.mysql.base:209
msgid ""
"This charset is the **client character set** for the connection.  Some "
"MySQL DBAPIs will default this to a value such as ``latin1``, and some "
"will make use of the ``default-character-set`` setting in the ``my.cnf`` "
"file as well.   Documentation for the DBAPI in use should be consulted "
"for specific behavior."
msgstr "この文字セットは、接続の**クライアント文字セット**です。 MySQL DBAPIの中には、これを `` latin1``のような値に設定するものもあれば、 `` my.cnf``ファイルの `` default-character-set``の設定を使うものもあります。特定の動作については、使用中のDBAPIのドキュメントを参照する必要があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:215
msgid ""
"The encoding used for Unicode has traditionally been ``'utf8'``.  "
"However, for MySQL versions 5.5.3 on forward, a new MySQL-specific "
"encoding ``'utf8mb4'`` has been introduced, and as of MySQL 8.0 a warning"
" is emitted by the server if plain ``utf8`` is specified within any "
"server-side directives, replaced with ``utf8mb3``.   The rationale for "
"this new encoding is due to the fact that MySQL's legacy utf-8 encoding "
"only supports codepoints up to three bytes instead of four.  Therefore, "
"when communicating with a MySQL database that includes codepoints more "
"than three bytes in size, this new charset is preferred, if supported by "
"both the database as well as the client DBAPI, as in::"
msgstr "Unicodeに使用されるエンコーディングは、伝統的に `` utf8``です。しかし、MySQLバージョン5.5.3のフォワードでは、新しいMySQL固有のエンコーディング `` &#39;utf8mb4&#39;``が導入されました。MySQL 8.0では、 `` utf8``が指定されていれば警告がサーバから発行されます`` utf8mb3``に置き換えられたサーバ側の指令。この新しいエンコーディングの根拠は、MySQLのレガシーutf-8エンコーディングがコードポイントを4つではなく3バイトまでしかサポートしていないことによるものです。したがって、サイズが3バイトを超えるコードポイントを含むMySQLデータベースと通信する場合、次のようにデータベースとクライアントDBAPIの両方でサポートされている場合は、この新しい文字セットが優先されます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:230
msgid "All modern DBAPIs should support the ``utf8mb4`` charset."
msgstr "現代のDBAPIはすべて、 `` utf8mb4``文字セットをサポートする必要があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:232
msgid ""
"In order to use ``utf8mb4`` encoding for a schema that was created with  "
"legacy ``utf8``, changes to the MySQL schema and/or server configuration "
"may be required."
msgstr "従来の `` utf8``で作成されたスキーマに `` utf8mb4``エンコーディングを使用するには、MySQLスキーマやサーバー設定の変更が必要な場合があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:238
msgid ""
"`The utf8mb4 Character Set \\ <http://dev.mysql.com/doc/refman/5.5/en"
"/charset-unicode-utf8mb4.html>`_ - \\ in the MySQL documentation"
msgstr "`utf8mb4文字セット\\ <http://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html> MySQLドキュメントの `_  -  \\"

#: ../../docstring of sqlalchemy.dialects.mysql.base:245
msgid "Dealing with Binary Data Warnings and Unicode"
msgstr "バイナリデータの警告とUnicodeの処理"

#: ../../docstring of sqlalchemy.dialects.mysql.base:247
msgid ""
"MySQL versions 5.6, 5.7 and later (not MariaDB at the time of this "
"writing) now emit a warning when attempting to pass binary data to the "
"database, while a character set encoding is also in place, when the "
"binary data itself is not valid for that encoding::"
msgstr "バイナリデータそのものが有効でないときに、キャラクタセットエンコーディングが実行されている間に、バイナリデータをデータベースに渡そうとすると、MySQLバージョン5.6,5. 7以降（この時点ではMariaDBではなく）に警告が表示されるようになりました。そのエンコーディング::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:255
msgid ""
"This warning is due to the fact that the MySQL client library is "
"attempting to interpret the binary string as a unicode object even if a "
"datatype such as :class:`.LargeBinary` is in use.   To resolve this, the "
"SQL statement requires a binary \"character set introducer\" be present "
"before any non-NULL value that renders like this::"
msgstr "この警告は、MySQLクライアントライブラリが：class： `.LargeBinary`のようなデータ型が使用されていても、バイナリ文字列をユニコードオブジェクトとして解釈しようとしているためです。これを解決するには、次のようにレンダリングするNULL以外の値の前に、SQLステートメントでバイナリ\ &quot;文字セット導入者\&quot;が存在する必要があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:263
msgid ""
"These character set introducers are provided by the DBAPI driver, "
"assuming the use of mysqlclient or PyMySQL (both of which are "
"recommended).  Add the query string parameter ``binary_prefix=true`` to "
"the URL to repair this warning::"
msgstr "これらのキャラクタ・セット・イントロダクタは、mysqlclientまたはPyMySQL（いずれも推奨）を使用することを前提にDBAPIドライバによって提供されます。この警告を修復するには、クエリ文字列パラメータ `` binary_prefix = true``をURLに追加してください::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:273
msgid ""
"The ``binary_prefix`` flag may or may not be supported by other MySQL "
"drivers."
msgstr "`` binary_prefix``フラグは、他のMySQLドライバでサポートされている場合とされていない場合があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:275
msgid ""
"SQLAlchemy itself cannot render this ``_binary`` prefix reliably, as it "
"does not work with the NULL value, which is valid to be sent as a bound "
"parameter. As the MySQL driver renders parameters directly into the SQL "
"string, it's the most efficient place for this additional keyword to be "
"passed."
msgstr "SQLAlchemyは、この `` _binary``接頭辞を確実に出力することはできません。なぜなら、バインドされたパラメータとして送信されるのに有効なNULL値では機能しないからです。 MySQLドライバはSQL文字列に直接パラメータをレンダリングするので、この追加キーワードを渡すための最も効率的な場所です。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:282
msgid ""
"`Character set introducers <https://dev.mysql.com/doc/refman/5.7/en"
"/charset-introducer.html>`_ - on the MySQL website"
msgstr "`文字セット導入者<https://dev.mysql.com/doc/refman/5.7/en/charset-introducer.html> `_  -  MySQLのウェブサイト"

#: ../../docstring of sqlalchemy.dialects.mysql.base:286
msgid "Ansi Quoting Style"
msgstr "アンシ引用文"

#: ../../docstring of sqlalchemy.dialects.mysql.base:288
msgid ""
"MySQL features two varieties of identifier \"quoting style\", one using "
"backticks and the other using quotes, e.g. ```some_identifier```  vs. "
"``\"some_identifier\"``.   All MySQL dialects detect which version is in "
"use by checking the value of ``sql_mode`` when a connection is first "
"established with a particular :class:`.Engine`.  This quoting style comes"
" into play when rendering table and column names as well as when "
"reflecting existing database structures.  The detection is entirely "
"automatic and no special configuration is needed to use either quoting "
"style."
msgstr "MySQLは2つの変数\ &quot;クォートスタイル\&quot;を使用し、一方はバッククイックを使用し、もう一方は引用符を使用します。例えば、 `` `some_identifier```と` `\&quot; some_identifier \ &quot;` `。すべてのMySQL方言は、特定の：class： `.Engine`で最初に接続が確立されたときに、` `sql_mode``の値をチェックすることによってどのバージョンが使用中であるかを検出します。この引用スタイルは、既存のデータベース構造を反映するときだけでなく、テーブル名とカラム名を表示する際に役立ちます。検出は完全に自動であり、引用方式を使用するための特別な設定は必要ありません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:297
msgid ""
"detection of ANSI quoting style is entirely automatic, there's no longer "
"any end-user ``create_engine()`` options in this regard."
msgstr "ANSI引用スタイルの検出は完全に自動であり、この点に関しては、もはやエンドユーザの `` create_engine（） ``オプションは存在しません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:301
msgid "MySQL SQL Extensions"
msgstr "MySQL SQL拡張"

#: ../../docstring of sqlalchemy.dialects.mysql.base:303
msgid ""
"Many of the MySQL SQL extensions are handled through SQLAlchemy's generic"
" function and operator support::"
msgstr "MySQLのSQL拡張の多くは、SQLAlchemyの汎用関数と演算子のサポートによって処理されます::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:309
msgid ""
"And of course any valid MySQL statement can be executed as a string as "
"well."
msgstr "もちろん、任意の有効なMySQLステートメントを文字列として実行することもできます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:311
msgid ""
"Some limited direct support for MySQL extensions to SQL is currently "
"available."
msgstr "SQLへのMySQL拡張のためのいくつかの限られた直接サポートが現在利用可能です。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:314
msgid ""
"INSERT..ON DUPLICATE KEY UPDATE:  See "
":ref:`mysql_insert_on_duplicate_key_update`"
msgstr "INSERT..ON DUPLICATE KEY UPDATE：参照：ref： `mysql_insert_on_duplicate_key_update`"

#: ../../docstring of sqlalchemy.dialects.mysql.base:316
msgid "SELECT pragma::"
msgstr "SELECTプラグマ::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:320
msgid "UPDATE with LIMIT::"
msgstr "LIMITによる更新::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:327
msgid "INSERT...ON DUPLICATE KEY UPDATE (Upsert)"
msgstr "INSERT ...重複キー更新（Upsert）"

#: ../../docstring of sqlalchemy.dialects.mysql.base:329
msgid ""
"MySQL allows \"upserts\" (update or insert) of rows into a table via the "
"``ON DUPLICATE KEY UPDATE`` clause of the ``INSERT`` statement.  A "
"candidate row will only be inserted if that row does not match an "
"existing primary or unique key in the table; otherwise, an UPDATE will be"
" performed.   The statement allows for separate specification of the "
"values to INSERT versus the values for UPDATE."
msgstr "MySQLは、 `` INSERT``ステートメントの `` ON DUPLICATE KEY UPDATE``節を介してテーブルへの行のアップサンプト（更新または挿入）を許可します。候補行は、その行が既存の表内の主キーまたは一意キーと一致しない場合にのみ挿入されます。それ以外の場合は、UPDATEが実行されます。このステートメントでは、INSERTとUPDATEの値を別々に指定することができます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:336
msgid ""
"SQLAlchemy provides ``ON DUPLICATE KEY UPDATE`` support via the MySQL-"
"specific :func:`.mysql.dml.insert()` function, which provides the "
"generative method :meth:`~.mysql.dml.Insert.on_duplicate_key_update`::"
msgstr "SQLAlchemyは生成するメソッドを提供するMySQL固有の：func： `.mysql.dml.insert（）`関数を介して `` DUPLICATE KEY UPDATE``をサポートしています：meth： `〜.mysql.dml.Insert.on_duplicate_key_update` ::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:353
msgid ""
"Unlike Postgresql's \"ON CONFLICT\" phrase, the \"ON DUPLICATE KEY "
"UPDATE\" phrase will always match on any primary key or unique key, and "
"will always perform an UPDATE if there's a match; there are no options "
"for it to raise an error or to skip performing an UPDATE."
msgstr "Postgresqlの\ &quot;ON CONFLICT \&quot;というフレーズとは異なり、\ &quot;ON DUPLICATE KEY UPDATE \&quot;というフレーズは常にプライマリキーまたはユニークキーと一致し、一致する場合は常にUPDATEを実行します。エラーを発生させるか、またはUPDATEの実行をスキップするオプションはありません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:358
msgid ""
"``ON DUPLICATE KEY UPDATE`` is used to perform an update of the already "
"existing row, using any combination of new values as well as values from "
"the proposed insertion.   These values are normally specified using "
"keyword arguments passed to the "
":meth:`~.mysql.dml.Insert.on_duplicate_key_update` given column key "
"values (usually the name of the column, unless it specifies "
":paramref:`.Column.key`) as keys and literal or SQL expressions as "
"values::"
msgstr "`` ON DUPLICATE KEY UPDATE``は、新しい値と提案された挿入からの値の任意の組み合わせを使用して、すでに存在する行の更新を実行するために使用されます。これらの値は通常、：meth： `〜.mysql.dml.Insert.on_duplicate_key_update`与えられた列のキー値（通常は列の名前で、paramref：` .Column.key`を指定しない限り）に渡されるキーワード引数を使って指定されます。キーとしてリテラルまたはSQL式を値として使用する::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:372
msgid ""
"In a manner similar to that of :meth:`.UpdateBase.values`, other "
"parameter forms are accepted, including a single dictionary::"
msgstr "：meth： `.UpdateBase.values`と同様の方法で、単一の辞書::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:379
msgid ""
"as well as a list of 2-tuples, which will automatically provide a "
"parameter-ordered UPDATE statement in a manner similar to that described "
"at :ref:`updates_order_parameters`.  Unlike the :class:`.Update` object, "
"no special flag is needed to specify the intent since the argument form "
"is this context is unambiguous::"
msgstr "：ref： `updates_order_parameters`で説明したのと同様の方法で、パラメタ順のUPDATE文を自動的に提供する2つのタプルのリストがあります。 ：class： `.Update`オブジェクトとは異なり、引数フォームはこのコンテキストが曖昧ではないので、意図を指定する特別なフラグは必要ありません::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:392
msgid ""
"support for parameter-ordered UPDATE clause within MySQL ON DUPLICATE KEY"
" UPDATE"
msgstr "MySQL内のパラメータ順UPDATE句のサポート重複キー更新"

#: ../../docstring of sqlalchemy.dialects.mysql.base:397
msgid ""
"The :meth:`.Insert.on_duplicate_key_update` method does **not** take into"
" account Python-side default UPDATE values or generation functions, e.g. "
"e.g. those specified using :paramref:`.Column.onupdate`. These values "
"will not be exercised for an ON DUPLICATE KEY style of UPDATE, unless "
"they are manually specified explicitly in the parameters."
msgstr "：meth： `.Insert.on_duplicate_key_update`メソッドは、Python側のデフォルトのUPDATE値や生成関数を考慮せず、paramref：` .Column.onupdate`を使って指定したものを考慮しません。これらの値は、UPDATEのON DUPLICATE KEYスタイルに対しては、パラメーターで明示的に明示的に指定されていない限り、行使されません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:405
msgid ""
"In order to refer to the proposed insertion row, the special alias "
":attr:`~.mysql.dml.Insert.inserted` is available as an attribute on the "
":class:`.mysql.dml.Insert` object; this object is a "
":class:`.ColumnCollection` which contains all columns of the target "
"table::"
msgstr "提案された挿入行を参照するために、特殊な別名：attr： `〜.mysql.dml.Insert.inserted`は：class：` .mysql.dml.Insert`オブジェクトの属性として利用できます。このオブジェクトは：class： `.ColumnCollection`です。これには、ターゲットテーブルのすべてのカラムが含まれます::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:423
msgid ""
"When rendered, the \"inserted\" namespace will produce the expression "
"``VALUES(<columnname>)``."
msgstr "レンダリングされると、\ &quot;inserted \&quot;名前空間は、式 `` VALUES（ <columnname> ） ``。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:426
msgid "Added support for MySQL ON DUPLICATE KEY UPDATE clause"
msgstr "MySQL ON DUPLICATE KEY UPDATE句に対するサポートの追加"

#: ../../docstring of sqlalchemy.dialects.mysql.base:431
msgid "rowcount Support"
msgstr "行数サポート"

#: ../../docstring of sqlalchemy.dialects.mysql.base:433
msgid ""
"SQLAlchemy standardizes the DBAPI ``cursor.rowcount`` attribute to be the"
" usual definition of \"number of rows matched by an UPDATE or DELETE\" "
"statement. This is in contradiction to the default setting on most MySQL "
"DBAPI drivers, which is \"number of rows actually modified/deleted\".  "
"For this reason, the SQLAlchemy MySQL dialects always add the "
"``constants.CLIENT.FOUND_ROWS`` flag, or whatever is equivalent for the "
"target dialect, upon connection. This setting is currently hardcoded."
msgstr "SQLAlchemyは、DBAPIの `` cursor.rowcount``属性を、 &quot;UPDATEまたはDELETEによって一致する行数&quot;という通常の定義に統一します。これは、ほとんどのMySQL DBAPIドライバのデフォルト設定と矛盾しています。これは「実際に変更/削除された行数」です。このため、SQLAlchemyのMySQLダイアレクトでは、常に接続時に `` constants.CLIENT.FOUND_ROWS``フラグ、またはターゲットの方言に相当するものが追加されます。この設定は現在ハードコードされています。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:443
msgid ":attr:`.ResultProxy.rowcount`"
msgstr "：attr： `.ResultProxy.rowcount`"

#: ../../docstring of sqlalchemy.dialects.mysql.base:447
msgid "CAST Support"
msgstr "CASTのサポート"

#: ../../docstring of sqlalchemy.dialects.mysql.base:449
msgid ""
"MySQL documents the CAST operator as available in version 4.0.2.  When "
"using the SQLAlchemy :func:`.cast` function, SQLAlchemy will not render "
"the CAST token on MySQL before this version, based on server version "
"detection, instead rendering the internal expression directly."
msgstr "MySQLは、バージョン4.0.2で使用可能なCAST演算子を文書化しています。 SQLAlchemy：func： `.cast`関数を使用すると、SQLAlchemyはサーババージョン検出に基づいてこのバージョンより前にMySQLのCASTトークンをレンダリングせず、内部式を直接レンダリングします。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:454
msgid ""
"CAST may still not be desirable on an early MySQL version post-4.0.2, as "
"it didn't add all datatype support until 4.1.1.   If your application "
"falls into this narrow area, the behavior of CAST can be controlled using"
" the :ref:`sqlalchemy.ext.compiler_toplevel` system, as per the recipe "
"below::"
msgstr "4.1.1まではすべてのデータ型サポートを追加していなかったので、4.0.2より前のMySQLバージョンではCASTは依然として望ましくないかもしれません。アプリケーションがこの狭い領域に該当する場合、以下のレシピに従って、：ref： `sqlalchemy.ext.compiler_toplevel`システムを使用してCASTの動作を制御できます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:469
msgid ""
"The above function, which only needs to be declared once within an "
"application, overrides the compilation of the :func:`.cast` construct to "
"check for version 4.1.0 before fully rendering CAST; else the internal "
"element of the construct is rendered directly."
msgstr "上記の関数は、アプリケーション内で一度だけ宣言する必要があります。完全にCASTをレンダリングする前に：func： `.cast`コンストラクトのコンパイルをオーバーライドしてバージョン4.1.0を確認します。それ以外の場合は、コンストラクトの内部要素が直接レンダリングされます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:479
msgid "MySQL Specific Index Options"
msgstr "MySQL固有のインデックスオプション"

#: ../../docstring of sqlalchemy.dialects.mysql.base:481
msgid "MySQL-specific extensions to the :class:`.Index` construct are available."
msgstr "：class： `.Index`構造に対するMySQL固有の拡張が利用可能です。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:484
msgid "Index Length"
msgstr "インデックスの長さ"

#: ../../docstring of sqlalchemy.dialects.mysql.base:486
msgid ""
"MySQL provides an option to create index entries with a certain length, "
"where \"length\" refers to the number of characters or bytes in each "
"value which will become part of the index. SQLAlchemy provides this "
"feature via the ``mysql_length`` parameter::"
msgstr "MySQLは、ある長さのインデックスエントリを作成するオプションを提供します。\ &quot;長さ\&quot;は、インデックスの一部となる各値の文字数またはバイト数を表します。 SQLAlchemyは `` mysql_length``パラメータでこの機能を提供しています::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:496
msgid ""
"Prefix lengths are given in characters for nonbinary string types and in "
"bytes for binary string types. The value passed to the keyword argument "
"*must* be either an integer (and, thus, specify the same prefix length "
"value for all columns of the index) or a dict in which keys are column "
"names and values are prefix length values for corresponding columns. "
"MySQL only allows a length for a column of an index if it is for a CHAR, "
"VARCHAR, TEXT, BINARY, VARBINARY and BLOB."
msgstr "接頭辞の長さは、非バイナリ文字列型の場合は文字で、バイナリ文字列型の場合はバイトで与えられます。キーワード引数*に渡される値は、整数でなければなりません（インデックスのすべての列に同じプレフィックス長の値を指定する）か、キーが列名であり、値が対応する列の接頭辞の長さの値でなければなりません。 MySQLは、インデックスがCHAR、VARCHAR、TEXT、BINARY、VARBINARY、およびBLOBの場合は、インデックスの列の長さのみを許可します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:504
msgid ""
"``mysql_length`` may now be specified as a dictionary for use with "
"composite indexes."
msgstr "`` mysql_length``は複合インデックスで使用する辞書として指定できるようになりました。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:508
msgid "Index Prefixes"
msgstr "インデックス接頭辞"

#: ../../docstring of sqlalchemy.dialects.mysql.base:510
msgid ""
"MySQL storage engines permit you to specify an index prefix when creating"
" an index. SQLAlchemy provides this feature via the ``mysql_prefix`` "
"parameter on :class:`.Index`::"
msgstr "MySQLストレージエンジンでは、インデックスの作成時にインデックスプレフィックスを指定することができます。 SQLAlchemyはこの機能を `` mysql_prefix``パラメータで提供しています：class： `.Index` ::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:516
msgid ""
"The value passed to the keyword argument will be simply passed through to"
" the underlying CREATE INDEX, so it *must* be a valid index prefix for "
"your MySQL storage engine."
msgstr "キーワード引数に渡される値は、基本となるCREATE INDEXに渡されるだけなので、MySQLストレージエンジンの有効なインデックスプレフィックスでなければなりません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:524
msgid ""
"`CREATE INDEX <http://dev.mysql.com/doc/refman/5.0/en/create-"
"index.html>`_ - \\ MySQL documentation"
msgstr "`CREATE INDEX <http://dev.mysql.com/doc/refman/5.0/en/create-index.html> `_  -  \\ MySQLのドキュメント"

#: ../../docstring of sqlalchemy.dialects.mysql.base:528
msgid "Index Types"
msgstr "インデックスの種類"

#: ../../docstring of sqlalchemy.dialects.mysql.base:530
msgid ""
"Some MySQL storage engines permit you to specify an index type when "
"creating an index or primary key constraint. SQLAlchemy provides this "
"feature via the ``mysql_using`` parameter on :class:`.Index`::"
msgstr "一部のMySQLストレージエンジンでは、インデックスまたはプライマリキー制約を作成するときにインデックスタイプを指定できます。 SQLAlchemyは、この機能を `` mysql_using``パラメータで提供しています：class： `.Index` ::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:536
msgid ""
"As well as the ``mysql_using`` parameter on "
":class:`.PrimaryKeyConstraint`::"
msgstr "`` mysql_using``パラメータと同様に：class： `.PrimaryKeyConstraint` ::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:540
msgid ""
"The value passed to the keyword argument will be simply passed through to"
" the underlying CREATE INDEX or PRIMARY KEY clause, so it *must* be a "
"valid index type for your MySQL storage engine."
msgstr "キーワード引数に渡される値は、基本となるCREATE INDEXまたはPRIMARY KEY句に渡されるだけなので、MySQLストレージエンジンの有効なインデックスタイプでなければなりません。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:544
msgid "More information can be found at:"
msgstr "詳細は次のサイトを参照してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:546
msgid "http://dev.mysql.com/doc/refman/5.0/en/create-index.html"
msgstr "http://dev.mysql.com/doc/refman/5.0/en/create-index.html"

#: ../../docstring of sqlalchemy.dialects.mysql.base:548
msgid "http://dev.mysql.com/doc/refman/5.0/en/create-table.html"
msgstr "http://dev.mysql.com/doc/refman/5.0/en/create-table.html"

#: ../../docstring of sqlalchemy.dialects.mysql.base:551
msgid "Index Parsers"
msgstr "インデックスパーサー"

#: ../../docstring of sqlalchemy.dialects.mysql.base:553
msgid ""
"CREATE FULLTEXT INDEX in MySQL also supports a \"WITH PARSER\" option.  "
"This is available using the keyword argument ``mysql_with_parser``::"
msgstr "MySQLのCREATE FULLTEXT INDEXは\ &quot;WITH PARSER \&quot;オプションもサポートしています。これは、キーワード引数 `` mysql_with_parser`` ::を使用して利用できます"

#: ../../docstring of sqlalchemy.dialects.mysql.base:566
msgid "MySQL Foreign Keys"
msgstr "MySQLの外部キー"

#: ../../docstring of sqlalchemy.dialects.mysql.base:568
msgid "MySQL's behavior regarding foreign keys has some important caveats."
msgstr "外部キーに関するMySQLの動作にはいくつかの注意点があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:571
msgid "Foreign Key Arguments to Avoid"
msgstr "避けるべき外部キー引数"

#: ../../docstring of sqlalchemy.dialects.mysql.base:573
msgid ""
"MySQL does not support the foreign key arguments \"DEFERRABLE\", "
"\"INITIALLY\", or \"MATCH\".  Using the ``deferrable`` or ``initially`` "
"keyword argument with :class:`.ForeignKeyConstraint` or "
":class:`.ForeignKey` will have the effect of these keywords being "
"rendered in a DDL expression, which will then raise an error on MySQL.  "
"In order to use these keywords on a foreign key while having them ignored"
" on a MySQL backend, use a custom compile rule::"
msgstr "MySQLは外部キー引数\ &quot;DEFERRABLE \&quot;、\ &quot;INITIALLY \&quot;、または\ &quot;MATCH \&quot;をサポートしていません。 ：class： `.ForeignKeyConstraint`または：class：` .ForeignKey`で `` deferrable`または `` beginning``キーワード引数を使用すると、DDL式でレンダリングされるこれらのキーワードの効果が得られます。 MySQLのエラー。外部キーでこれらのキーワードを使用するには、MySQLバックエンドで無視されるようにカスタムのコンパイルルールを使用します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:588
msgid ""
"- the MySQL backend no longer silently ignores the ``deferrable`` or "
"``initially`` keyword arguments of :class:`.ForeignKeyConstraint` and "
":class:`.ForeignKey`."
msgstr "-  MySQLバックエンドは、class： `.ForeignKeyConstraint`と：class：` .ForeignKey`の `` deferrable``または `` beginning``キーワード引数を黙って無視しなくなりました。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:592
msgid ""
"The \"MATCH\" keyword is in fact more insidious, and is explicitly "
"disallowed by SQLAlchemy in conjunction with the MySQL backend.  This "
"argument is silently ignored by MySQL, but in addition has the effect of "
"ON UPDATE and ON DELETE options also being ignored by the backend.   "
"Therefore MATCH should never be used with the MySQL backend; as is the "
"case with DEFERRABLE and INITIALLY, custom compilation rules can be used "
"to correct a MySQL ForeignKeyConstraint at DDL definition time."
msgstr "\ &quot;MATCH \&quot;キーワードは実際にはより狡猾であり、MySQLバックエンドと組み合わせてSQLAlchemyによって明示的に許可されていません。この引数はMySQLによって黙って無視されますが、ON UPDATEオプションとON DELETEオプションの影響もバックエンドによって無視されます。したがって、MySQLのバックエンドでMATCHを使用するべきではありません。 DEFERRABLEとINITIALLYの場合と同様に、カスタムコンパイルルールを使用してDDL定義時にMySQL ForeignKeyConstraintを修正することができます。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:600
msgid ""
"- the MySQL backend will raise a :class:`.CompileError` when the "
"``match`` keyword is used with :class:`.ForeignKeyConstraint` or "
":class:`.ForeignKey`."
msgstr "-  MySQLのバックエンドは：class： `.ForeignKeyConstraint`または：class：` .ForeignKey`で `` match``キーワードを使用するとclass： `.CompileError`を送出します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:605
msgid "Reflection of Foreign Key Constraints"
msgstr "外部キー制約の反映"

#: ../../docstring of sqlalchemy.dialects.mysql.base:607
msgid ""
"Not all MySQL storage engines support foreign keys.  When using the very "
"common ``MyISAM`` MySQL storage engine, the information loaded by table "
"reflection will not include foreign keys.  For these tables, you may "
"supply a :class:`~sqlalchemy.ForeignKeyConstraint` at reflection time::"
msgstr "すべてのMySQLストレージエンジンが外部キーをサポートしているわけではありません。非常に一般的な `` MyISAM`` MySQLストレージエンジンを使用する場合、テーブルリフレクションによってロードされる情報には外部キーは含まれません。これらのテーブルの場合、リフレクション時に：class： `〜sqlalchemy.ForeignKeyConstraint`を指定することができます::"

#: ../../docstring of sqlalchemy.dialects.mysql.base:619
msgid ":ref:`mysql_storage_engines`"
msgstr "：ref： `mysql_storage_engines`"

#: ../../docstring of sqlalchemy.dialects.mysql.base:624
msgid "MySQL Unique Constraints and Reflection"
msgstr "MySQL固有の制約とリフレクション"

#: ../../docstring of sqlalchemy.dialects.mysql.base:626
msgid ""
"SQLAlchemy supports both the :class:`.Index` construct with the flag "
"``unique=True``, indicating a UNIQUE index, as well as the "
":class:`.UniqueConstraint` construct, representing a UNIQUE constraint. "
"Both objects/syntaxes are supported by MySQL when emitting DDL to create "
"these constraints.  However, MySQL does not have a unique constraint "
"construct that is separate from a unique index; that is, the \"UNIQUE\" "
"constraint on MySQL is equivalent to creating a \"UNIQUE INDEX\"."
msgstr "SQLAlchemyはUNIQUEインデックスを示す `` unique = True``フラグとUNIQUE制約を表す：class： `.UniqueConstraint`構文を持つ：class：` .Index`構造体の両方をサポートしています。これらの制約を作成するためにDDLを発行する際には、両方のオブジェクト/構文がMySQLによってサポートされています。ただし、MySQLにはユニークなインデックスとは別のユニークな制約構造がありません。つまり、MySQLの\ &quot;UNIQUE \&quot;制約は\ &quot;ユニークインデックス\&quot;の作成と同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:634
msgid ""
"When reflecting these constructs, the :meth:`.Inspector.get_indexes` and "
"the :meth:`.Inspector.get_unique_constraints` methods will **both** "
"return an entry for a UNIQUE index in MySQL.  However, when performing "
"full table reflection using ``Table(..., autoload=True)``, the "
":class:`.UniqueConstraint` construct is **not** part of the fully "
"reflected :class:`.Table` construct under any circumstances; this "
"construct is always represented by a :class:`.Index` with the "
"``unique=True`` setting present in the :attr:`.Table.indexes` collection."
msgstr "これらの構文を反映すると、：meth： `.Inspector.get_indexes`メソッドと：meth：` .Inspector.get_unique_constraints`メソッドは両方ともMySQLのUNIQUEインデックスのエントリを返します**。しかし、 `` Table（...、autoload = True） ``を使ってテーブル全体のリフレクションを実行すると、：class： `.UniqueConstraint`構造体は**完全に反映されていません**：class：` .Table`いかなる状況下でも構築する。この構造体は常に：class： `.Index`で表現され、：attr：` .Table.indexes`コレクションに `` unique = True``設定があります。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:648
msgid "TIMESTAMP Columns and NULL"
msgstr "TIMESTAMP列とNULL"

#: ../../docstring of sqlalchemy.dialects.mysql.base:650
msgid ""
"MySQL historically enforces that a column which specifies the TIMESTAMP "
"datatype implicitly includes a default value of CURRENT_TIMESTAMP, even "
"though this is not stated, and additionally sets the column as NOT NULL, "
"the opposite behavior vs. that of all other datatypes::"
msgstr "MySQLは歴史的に、TIMESTAMPデータ型を指定するカラムにCURRENT_TIMESTAMPというデフォルト値が暗黙的に含まれていることを明記していますが、このカラムはNOT NULL、その他のデータ型とは逆の動作に設定されています。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:676
msgid ""
"Above, we see that an INTEGER column defaults to NULL, unless it is "
"specified with NOT NULL.   But when the column is of type TIMESTAMP, an "
"implicit default of CURRENT_TIMESTAMP is generated which also coerces the"
" column to be a NOT NULL, even though we did not specify it as such."
msgstr "上記のように、INTEGERカラムは、NOT NULLで指定されていない限り、デフォルトでNULLになっています。しかし、列の型がTIMESTAMPの場合、CURRENT_TIMESTAMPの暗黙的なデフォルトが生成されます。これは、列をNOT NULLに強制します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:681
msgid ""
"This behavior of MySQL can be changed on the MySQL side using the "
"`explicit_defaults_for_timestamp <http://dev.mysql.com/doc/refman/5.6/en"
"/server-system-variables.html #sysvar_explicit_defaults_for_timestamp>`_ "
"configuration flag introduced in MySQL 5.6.  With this server setting "
"enabled, TIMESTAMP columns behave like any other datatype on the MySQL "
"side with regards to defaults and nullability."
msgstr "このMySQLの動作は、MySQL側で `explicit_defaults_for_timestamp <http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html #sysvar_explicit_defaults_for_timestamp> `_設定フラグはMySQL 5.6で導入されました。このサーバ設定を有効にすると、TIMESTAMPカラムは、MySQL側の他のデータ型と同じように動作します。"

#: ../../docstring of sqlalchemy.dialects.mysql.base:688
msgid ""
"However, to accommodate the vast majority of MySQL databases that do not "
"specify this new flag, SQLAlchemy emits the \"NULL\" specifier explicitly"
" with any TIMESTAMP column that does not specify ``nullable=False``.   In"
" order to accommodate newer databases that specify "
"``explicit_defaults_for_timestamp``, SQLAlchemy also emits NOT NULL for "
"TIMESTAMP columns that do specify ``nullable=False``.   The following "
"example illustrates::"
msgstr "しかし、この新しいフラグを指定していない大部分のMySQLデータベースに対応するために、SQLAlchemyは `` nullable = False``を指定していないTIMESTAMPカラムを明示的に\ &quot;NULL \&quot;指定子として出力します。 `` explicit_defaults_for_timestamp``を指定する新しいデータベースに対応するために、SQLAlchemyは `` nullable = False``を指定するTIMESTAMPカラムに対してもNOT NULLを出力します。次の例は、"

#: ../../docstring of sqlalchemy.dialects.mysql.base:711
msgid "output::"
msgstr "出力：："

#: ../../docstring of sqlalchemy.dialects.mysql.base:720
msgid ""
"- SQLAlchemy now renders NULL or NOT NULL in all cases for TIMESTAMP "
"columns, to accommodate ``explicit_defaults_for_timestamp``.  Prior to "
"this version, it will not render \"NOT NULL\" for a TIMESTAMP column that"
" is ``nullable=False``."
msgstr "-  SQLAlchemyは、 `` explicit_defaults_for_timestamp``に対応するために、TIMESTAMPカラムのすべての場合にNULLまたはNOT NULLをレンダリングするようになりました。このバージョンより前のバージョンでは、 `` nullable = False``のTIMESTAMPカラムには\ &quot;NOT NULL \&quot;を表示しません。"

#: ../../dialects/mysql.rst:9
msgid "MySQL Data Types"
msgstr "MySQLデータ型"

#: ../../dialects/mysql.rst:11
msgid ""
"As with all SQLAlchemy dialects, all UPPERCASE types that are known to be"
" valid with MySQL are importable from the top level dialect::"
msgstr "すべてのSQLAlchemy方言と同様に、MySQLで有効であると知られているすべての大文字の型は、最上位の方言からインポート可能です::"

#: ../../dialects/mysql.rst:21
msgid ""
"Types which are specific to MySQL, or have MySQL-specific construction "
"arguments, are as follows:"
msgstr "MySQL固有の型、またはMySQL固有の構築引数を持つ型は、次のとおりです。"

#: of sqlalchemy.dialects.mysql.BIGINT:1
msgid "MySQL BIGINTEGER type."
msgstr "MySQL BIGINTEGERタイプ。"

#: of sqlalchemy.dialects.mysql.BIGINT.__init__:1
msgid "Construct a BIGINTEGER."
msgstr "BIGINTEGERを構築します。"

#: ../../docstring of sqlalchemy.dialects.mysql.BIGINT.__init__
#: sqlalchemy.dialects.mysql.BIT.__init__
#: sqlalchemy.dialects.mysql.BLOB.__init__
#: sqlalchemy.dialects.mysql.BOOLEAN.__init__
#: sqlalchemy.dialects.mysql.CHAR.__init__
#: sqlalchemy.dialects.mysql.DATETIME.__init__
#: sqlalchemy.dialects.mysql.DECIMAL.__init__
#: sqlalchemy.dialects.mysql.DOUBLE.__init__
#: sqlalchemy.dialects.mysql.ENUM.__init__
#: sqlalchemy.dialects.mysql.FLOAT.__init__
#: sqlalchemy.dialects.mysql.INTEGER.__init__
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__
#: sqlalchemy.dialects.mysql.MEDIUMINT.__init__
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__
#: sqlalchemy.dialects.mysql.NCHAR.__init__
#: sqlalchemy.dialects.mysql.NUMERIC.__init__
#: sqlalchemy.dialects.mysql.NVARCHAR.__init__
#: sqlalchemy.dialects.mysql.REAL.__init__
#: sqlalchemy.dialects.mysql.SET.__init__
#: sqlalchemy.dialects.mysql.SMALLINT.__init__
#: sqlalchemy.dialects.mysql.TEXT.__init__
#: sqlalchemy.dialects.mysql.TIME.__init__
#: sqlalchemy.dialects.mysql.TIMESTAMP.__init__
#: sqlalchemy.dialects.mysql.TINYINT.__init__
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__
#: sqlalchemy.dialects.mysql.VARCHAR.__init__
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update
msgid "パラメータ"
msgstr "パラメータ"

#: of sqlalchemy.dialects.mysql.BIGINT.__init__:3
#: sqlalchemy.dialects.mysql.INTEGER.__init__:3
#: sqlalchemy.dialects.mysql.MEDIUMINT.__init__:3
#: sqlalchemy.dialects.mysql.SMALLINT.__init__:3
#: sqlalchemy.dialects.mysql.TINYINT.__init__:3
msgid "Optional, maximum display width for this number."
msgstr "オプションで、この数値の最大表示幅。"

#: of sqlalchemy.dialects.mysql.BIGINT.__init__:5
#: sqlalchemy.dialects.mysql.DECIMAL.__init__:8
#: sqlalchemy.dialects.mysql.DOUBLE.__init__:16
#: sqlalchemy.dialects.mysql.FLOAT.__init__:8
#: sqlalchemy.dialects.mysql.INTEGER.__init__:5
#: sqlalchemy.dialects.mysql.MEDIUMINT.__init__:5
#: sqlalchemy.dialects.mysql.NUMERIC.__init__:8
#: sqlalchemy.dialects.mysql.REAL.__init__:16
#: sqlalchemy.dialects.mysql.SMALLINT.__init__:5
#: sqlalchemy.dialects.mysql.TINYINT.__init__:5
msgid "a boolean, optional."
msgstr "boolean、オプション。"

#: of sqlalchemy.dialects.mysql.BIGINT.__init__:7
#: sqlalchemy.dialects.mysql.DECIMAL.__init__:10
#: sqlalchemy.dialects.mysql.DOUBLE.__init__:18
#: sqlalchemy.dialects.mysql.FLOAT.__init__:10
#: sqlalchemy.dialects.mysql.INTEGER.__init__:7
#: sqlalchemy.dialects.mysql.MEDIUMINT.__init__:7
#: sqlalchemy.dialects.mysql.NUMERIC.__init__:10
#: sqlalchemy.dialects.mysql.REAL.__init__:18
#: sqlalchemy.dialects.mysql.SMALLINT.__init__:7
#: sqlalchemy.dialects.mysql.TINYINT.__init__:7
msgid ""
"Optional. If true, values will be stored as strings left-padded with "
"zeros. Note that this does not effect the values returned by the "
"underlying database API, which continue to be numeric."
msgstr "オプション。 trueの場合、値は左にゼロで埋められた文字列として格納されます。これは、基礎となるデータベースAPIによって返される値には影響しないことに注意してください。"

#: of sqlalchemy.dialects.mysql.BINARY:1
msgid "The SQL BINARY type."
msgstr "SQL BINARY型。"

#: of sqlalchemy.dialects.mysql.BIT:1
msgid "MySQL BIT type."
msgstr "MySQL BITタイプ。"

#: of sqlalchemy.dialects.mysql.BIT:3
msgid ""
"This type is for MySQL 5.0.3 or greater for MyISAM, and 5.0.5 or greater "
"for MyISAM, MEMORY, InnoDB and BDB.  For older versions, use a "
"MSTinyInteger() type."
msgstr "このタイプはMyISAMではMySQL 5.0.3以上、MyISAM、MEMORY、InnoDB、BDBでは5.0.5以上です。古いバージョンの場合は、MSTinyInteger（）型を使用します。"

#: of sqlalchemy.dialects.mysql.BIT.__init__:1
msgid "Construct a BIT."
msgstr "BITを構築します。"

#: of sqlalchemy.dialects.mysql.BIT.__init__:3
msgid "Optional, number of bits."
msgstr "オプションで、ビット数。"

#: of sqlalchemy.dialects.mysql.BLOB:1
msgid "The SQL BLOB type."
msgstr "SQL BLOB型。"

#: of sqlalchemy.dialects.mysql.BLOB.__init__:1
msgid "Construct a LargeBinary type."
msgstr "LargeBinary型を構築します。"

#: of sqlalchemy.dialects.mysql.BLOB.__init__:3
msgid ""
"optional, a length for the column for use in DDL statements, for those "
"binary types that accept a length, such as the MySQL BLOB type."
msgstr "オプションで、長さを受け入れるバイナリ型（MySQL BLOB型など）のDDL文で使用する列の長さ。"

#: of sqlalchemy.dialects.mysql.BOOLEAN:1
msgid "The SQL BOOLEAN type."
msgstr "SQL BOOLEAN型。"

#: of sqlalchemy.dialects.mysql.BOOLEAN.__init__:1
msgid "Construct a Boolean."
msgstr "Booleanを構築します。"

#: of sqlalchemy.dialects.mysql.BOOLEAN.__init__:3
msgid ""
"defaults to True.  If the boolean is generated as an int/smallint, also "
"create a CHECK constraint on the table that ensures 1 or 0 as a value."
msgstr "デフォルトはTrueです。ブール値がint / smallintとして生成された場合は、値として1または0を保証するCHECK制約もテーブルに作成します。"

#: of sqlalchemy.dialects.mysql.BOOLEAN.__init__:7
msgid "if a CHECK constraint is generated, specify the name of the constraint."
msgstr "CHECK制約が生成された場合は、その制約の名前を指定します。"

#: of sqlalchemy.dialects.mysql.CHAR:1
msgid "MySQL CHAR type, for fixed-length character data."
msgstr "固定長文字データ用のMySQL CHAR型。"

#: of sqlalchemy.dialects.mysql.CHAR.__init__:1
msgid "Construct a CHAR."
msgstr "CHARを構築します。"

#: of sqlalchemy.dialects.mysql.CHAR.__init__:3
#: sqlalchemy.dialects.mysql.NCHAR.__init__:3
#: sqlalchemy.dialects.mysql.NVARCHAR.__init__:3
msgid "Maximum data length, in characters."
msgstr "最大データ長（文字数）。"

#: of sqlalchemy.dialects.mysql.CHAR.__init__:5
#: sqlalchemy.dialects.mysql.NCHAR.__init__:5
#: sqlalchemy.dialects.mysql.NVARCHAR.__init__:5
msgid ""
"Optional, use the default binary collation for the national character "
"set.  This does not affect the type of data stored, use a BINARY type for"
" binary data."
msgstr "オプションで、各国語キャラクタ・セットのデフォルトのバイナリ照合を使用します。これは、格納されるデータのタイプには影響しません。バイナリデータにはBINARYタイプを使用します。"

#: of sqlalchemy.dialects.mysql.CHAR.__init__:9
#: sqlalchemy.dialects.mysql.NCHAR.__init__:9
#: sqlalchemy.dialects.mysql.NVARCHAR.__init__:9
msgid ""
"Optional, request a particular collation.  Must be compatible with the "
"national character set."
msgstr "オプションで、特定の照合をリクエストします。国別文字セットと互換性がなければなりません。"

#: of sqlalchemy.dialects.mysql.DATE:1
msgid "The SQL DATE type."
msgstr "SQL DATE型。"

#: of sqlalchemy.dialects.mysql.DATE.__init__:1
msgid "Initialize self.  See help(type(self)) for accurate signature."
msgstr "自己を初期化する。正確な署名については、help（type（self））を参照してください。"

#: of sqlalchemy.dialects.mysql.DATETIME:1
msgid "MySQL DATETIME type."
msgstr "MySQL DATETIME型。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:1
msgid "Construct a MySQL DATETIME type."
msgstr "MySQL DATETIME型を構築します。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:3
#: sqlalchemy.dialects.mysql.TIME.__init__:3
#: sqlalchemy.dialects.mysql.TIMESTAMP.__init__:3
msgid "not used by the MySQL dialect."
msgstr "MySQLの方言では使用されません。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6.4 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" DATETIME type.  .. note::     DBAPI driver support for fractional "
"seconds may    be limited; current support includes    MySQL "
"Connector/Python."
msgstr "分数秒の精度値。 MySQL 5.6.4では、分数秒のストレージがサポートされています。このパラメータは、DATETIME型のDDLを発行するときに使用されます。 .. note ::分数秒のDBAPIドライバのサポートは制限されているかもしれません。現在のサポートには、MySQL Connector / Pythonが含まれます。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6.4 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" DATETIME type."
msgstr "分数秒の精度値。 MySQL 5.6.4では、分数秒のストレージがサポートされています。このパラメータは、DATETIME型のDDLを発行するときに使用されます。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:11
#: sqlalchemy.dialects.mysql.TIME.__init__:11
#: sqlalchemy.dialects.mysql.TIMESTAMP.__init__:11
msgid ""
"DBAPI driver support for fractional seconds may be limited; current "
"support includes MySQL Connector/Python."
msgstr "分数秒間のDBAPIドライバのサポートは制限されている可能性があります。現在のサポートには、MySQL Connector / Pythonが含まれます。"

#: of sqlalchemy.dialects.mysql.DATETIME.__init__:15
msgid ""
"Added MySQL-specific :class:`.mysql.DATETIME` with fractional seconds "
"support."
msgstr "MySQL特有の：クラス： `.mysql.DATETIME`を秒単位でサポートしました。"

#: of sqlalchemy.dialects.mysql.DECIMAL:1
msgid "MySQL DECIMAL type."
msgstr "MySQL DECIMAL型。"

#: of sqlalchemy.dialects.mysql.DECIMAL.__init__:1
msgid "Construct a DECIMAL."
msgstr "DECIMALを構築します。"

#: of sqlalchemy.dialects.mysql.DECIMAL.__init__:3
#: sqlalchemy.dialects.mysql.DOUBLE.__init__:11
#: sqlalchemy.dialects.mysql.FLOAT.__init__:3
#: sqlalchemy.dialects.mysql.NUMERIC.__init__:3
#: sqlalchemy.dialects.mysql.REAL.__init__:11
msgid ""
"Total digits in this number.  If scale and precision are both None, "
"values are stored to limits allowed by the server."
msgstr "この数字の合計桁数。 scaleとprecisionが両方ともNoneの場合、値はサーバーで許容される制限値に格納されます。"

#: of sqlalchemy.dialects.mysql.DECIMAL.__init__:6
#: sqlalchemy.dialects.mysql.DOUBLE.__init__:14
#: sqlalchemy.dialects.mysql.FLOAT.__init__:6
#: sqlalchemy.dialects.mysql.NUMERIC.__init__:6
#: sqlalchemy.dialects.mysql.REAL.__init__:14
msgid "The number of digits after the decimal point."
msgstr "小数点以下の桁数です。"

#: of sqlalchemy.dialects.mysql.DOUBLE:1
msgid "MySQL DOUBLE type."
msgstr "MySQL DOUBLEタイプ。"

#: of sqlalchemy.dialects.mysql.DOUBLE.__init__:1
msgid "Construct a DOUBLE."
msgstr "DOUBLEを構築します。"

#: of sqlalchemy.dialects.mysql.DOUBLE.__init__:5
msgid ""
"The :class:`.DOUBLE` type by default converts from float to Decimal, "
"using a truncation that defaults to 10 digits. Specify either ``scale=n``"
" or ``decimal_return_scale=n`` in order to change this scale, or "
"``asdecimal=False`` to return values directly as Python floating points."
msgstr "：class： `.DOUBLE`型は、デフォルトで10桁の切り捨てを使って、デフォルトでfloatからDecimalに変換されます。このスケールを変更するには `` scale = n``または `` decimal_return_scale = n``を指定するか、Python浮動小数点として直接値を返すよう `` asdecimal = False``を指定してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM:1
msgid "MySQL ENUM type."
msgstr "MySQL ENUMタイプ。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:1
msgid "Construct an ENUM."
msgstr "ENUMを構築します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:3
#: sqlalchemy.dialects.mysql.SET.__init__:3
msgid "E.g.::"
msgstr "例えば：："

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:7
msgid ""
"The range of valid values for this ENUM.  Values will be quoted when "
"generating the schema according to the quoting flag (see below).  This "
"object may also be a PEP-435-compliant enumerated type.  .. versionadded:"
" 1.1 added support for PEP-435-compliant enumerated    types."
msgstr "このENUMの有効な値の範囲。引用フラグ（下記参照）に従ってスキーマを生成するときに、値が引用されます。このオブジェクトは、PEP-435準拠の列挙型でもあります。 .. versionadded：1.1では、PEP-435に準拠した列挙型のサポートが追加されました。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:7
msgid ""
"The range of valid values for this ENUM.  Values will be quoted when "
"generating the schema according to the quoting flag (see below).  This "
"object may also be a PEP-435-compliant enumerated type."
msgstr "このENUMの有効な値の範囲。引用フラグ（下記参照）に従ってスキーマを生成するときに、値が引用されます。このオブジェクトは、PEP-435準拠の列挙型でもあります。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:15
msgid ""
"This flag has no effect.  .. versionchanged:: The MySQL ENUM type as well"
" as the base Enum    type now validates all Python data values."
msgstr "このフラグは効果がありません。 .. versionchanged :: MySQL ENUM型と基本Enum型はすべてのPythonデータ値を検証するようになりました。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:15
msgid "This flag has no effect."
msgstr "このフラグは効果がありません。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:17
msgid ""
"MySQL ENUM type as well as the base Enum type now validates all Python "
"data values."
msgstr "MySQL ENUM型と基本Enum型はすべてのPythonデータ値を検証します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:20
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__:3
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:3
#: sqlalchemy.dialects.mysql.TEXT.__init__:7
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:3
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:3
msgid ""
"Optional, a column-level character set for this string value.  Takes "
"precedence to 'ascii' or 'unicode' short-hand."
msgstr "オプションで、この文字列値の列レベルの文字セット。 &#39;ascii&#39;または &#39;unicode&#39; short-handに優先します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:23
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__:6
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:6
#: sqlalchemy.dialects.mysql.TEXT.__init__:10
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:6
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:6
msgid ""
"Optional, a column-level collation for this string value.  Takes "
"precedence to 'binary' short-hand."
msgstr "オプションで、この文字列値の列レベルの照合。 &#39;バイナリ&#39;ショートハンドよりも優先されます。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:26
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__:9
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:9
#: sqlalchemy.dialects.mysql.TEXT.__init__:13
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:9
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:9
msgid ""
"Defaults to False: short-hand for the ``latin1`` character set, generates"
" ASCII in schema."
msgstr "デフォルトはFalseです： `` latin1``キャラクタセットの短縮形は、スキーマにASCIIを生成します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:29
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__:12
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:12
#: sqlalchemy.dialects.mysql.TEXT.__init__:16
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:12
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:12
msgid ""
"Defaults to False: short-hand for the ``ucs2`` character set, generates "
"UNICODE in schema."
msgstr "デフォルトはFalseです： `` ucs2``文字集合の略語は、スキーマにUNICODEを生成します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:32
#: sqlalchemy.dialects.mysql.LONGTEXT.__init__:18
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:18
#: sqlalchemy.dialects.mysql.TEXT.__init__:22
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:18
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:18
msgid ""
"Defaults to False: short-hand, pick the binary collation type that "
"matches the column's character set.  Generates BINARY in schema.  This "
"does not affect the type of data stored, only the collation of character "
"data."
msgstr "既定値はFalseです。短く、列の文字セットに一致するバイナリ照合タイプを選択します。スキーマにBINARYを生成します。これは、格納されるデータのタイプには影響せず、文字データの照合だけに影響します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:37
msgid ""
"Defaults to 'auto': automatically determine enum value quoting.  If all "
"enum values are surrounded by the same quoting character, then use "
"'quoted' mode.  Otherwise, use 'unquoted' mode.  'quoted': values in "
"enums are already quoted, they will be used directly when generating the "
"schema - this usage is deprecated.  'unquoted': values in enums are not "
"quoted, they will be escaped and surrounded by single quotes when "
"generating the schema.  Previous versions of this type always required "
"manually quoted values to be supplied; future versions will always quote "
"the string literals for you.  This is a transitional option."
msgstr "デフォルトは &#39;auto&#39;：列挙値の引用を自動的に決定します。すべてのenum値が同じ引用文字で囲まれている場合は、引用符付きのモードを使用します。それ以外の場合は、引用符で囲まれていないモードを使用します。 &#39;quoted&#39;：enumの値はすでに引用されており、スキーマの生成時に直接使用されます。この使用法は推奨されていません。 &#39;unquoted&#39;：enumの値は引用符で囲まれません。スキーマを生成するときには、エスケープされ、単一引用符で囲まれます。このタイプの以前のバージョンでは、常に手動で引用された値を指定する必要がありました。将来のバージョンは常にあなたのために文字列リテラルを引用します。これは過渡的な選択肢です。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:37
msgid ""
"Defaults to 'auto': automatically determine enum value quoting.  If all "
"enum values are surrounded by the same quoting character, then use "
"'quoted' mode.  Otherwise, use 'unquoted' mode."
msgstr "デフォルトは &#39;auto&#39;：列挙値の引用を自動的に決定します。すべてのenum値が同じ引用文字で囲まれている場合は、引用符付きのモードを使用します。それ以外の場合は、引用符で囲まれていないモードを使用します。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:41
#: sqlalchemy.dialects.mysql.SET.__init__:31
msgid ""
"'quoted': values in enums are already quoted, they will be used directly "
"when generating the schema - this usage is deprecated."
msgstr "&#39;quoted&#39;：enumの値はすでに引用されており、スキーマの生成時に直接使用されます。この使用法は推奨されていません。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:44
#: sqlalchemy.dialects.mysql.SET.__init__:34
msgid ""
"'unquoted': values in enums are not quoted, they will be escaped and "
"surrounded by single quotes when generating the schema."
msgstr "&#39;unquoted&#39;：enumの値は引用符で囲まれません。スキーマを生成するときには、エスケープされ、単一引用符で囲まれます。"

#: ../../docstring of sqlalchemy.dialects.mysql.ENUM.__init__:47
#: sqlalchemy.dialects.mysql.SET.__init__:37
msgid ""
"Previous versions of this type always required manually quoted values to "
"be supplied; future versions will always quote the string literals for "
"you.  This is a transitional option."
msgstr "このタイプの以前のバージョンでは、常に手動で引用された値を指定する必要がありました。将来のバージョンは常にあなたのために文字列リテラルを引用します。これは過渡的な選択肢です。"

#: of sqlalchemy.dialects.mysql.FLOAT:1
msgid "MySQL FLOAT type."
msgstr "MySQLのFLOAT型。"

#: of sqlalchemy.dialects.mysql.FLOAT.__init__:1
msgid "Construct a FLOAT."
msgstr "FLOATを構築します。"

#: of sqlalchemy.dialects.mysql.INTEGER:1
msgid "MySQL INTEGER type."
msgstr "MySQLのINTEGER型。"

#: of sqlalchemy.dialects.mysql.INTEGER.__init__:1
msgid "Construct an INTEGER."
msgstr "INTEGERを構築します。"

#: ../../docstring of sqlalchemy.dialects.mysql.JSON:1
msgid "MySQL JSON type."
msgstr "MySQL JSONタイプ。"

#: ../../docstring of sqlalchemy.dialects.mysql.JSON:3
msgid ""
"MySQL supports JSON as of version 5.7.  Note that MariaDB does **not** "
"support JSON at the time of this writing."
msgstr "MySQLはバージョン5.7からJSONをサポートしています。 MariaDBは本書の執筆時点でJSONをサポートしていません**。"

#: ../../docstring of sqlalchemy.dialects.mysql.JSON:6
msgid ""
"The :class:`.mysql.JSON` type supports persistence of JSON values as well"
" as the core index operations provided by :class:`.types.JSON` datatype, "
"by adapting the operations to render the ``JSON_EXTRACT`` function at the"
" database level."
msgstr "：class： `.mysql.JSON`型は：class：` .types.JSON`データ型で提供されるコアインデックス操作と同様に、JSON値の永続性をサポートします。これは、 `` JSON_EXTRACT``関数をデータベースレベル。"

#: of sqlalchemy.dialects.mysql.LONGBLOB:1
msgid "MySQL LONGBLOB type, for binary data up to 2^32 bytes."
msgstr "2 ^ 32バイトまでのバイナリデータ用のMySQL LONGBLOB型。"

#: of sqlalchemy.dialects.mysql.LONGTEXT:1
msgid "MySQL LONGTEXT type, for text up to 2^32 characters."
msgstr "MySQL LONGTEXTタイプ（最大2文字の32文字）。"

#: of sqlalchemy.dialects.mysql.LONGTEXT.__init__:1
msgid "Construct a LONGTEXT."
msgstr "LONGTEXTを構築します。"

#: of sqlalchemy.dialects.mysql.LONGTEXT.__init__:15
#: sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:15
#: sqlalchemy.dialects.mysql.TEXT.__init__:19
#: sqlalchemy.dialects.mysql.TINYTEXT.__init__:15
#: sqlalchemy.dialects.mysql.VARCHAR.__init__:15
msgid "Optional. If true, use the server's configured national character set."
msgstr "オプション。 trueの場合は、サーバーの構成済みの各国語キャラクタ・セットを使用します。"

#: of sqlalchemy.dialects.mysql.MEDIUMBLOB:1
msgid "MySQL MEDIUMBLOB type, for binary data up to 2^24 bytes."
msgstr "MySQL MEDIUMBLOBタイプ.2 ^ 24バイトまでのバイナリデータ用です。"

#: of sqlalchemy.dialects.mysql.MEDIUMINT:1
msgid "MySQL MEDIUMINTEGER type."
msgstr "MySQLのMEDIUMINTEGERタイプ。"

#: of sqlalchemy.dialects.mysql.MEDIUMINT.__init__:1
msgid "Construct a MEDIUMINTEGER"
msgstr "MEDIUMINTEGERを構築する"

#: of sqlalchemy.dialects.mysql.MEDIUMTEXT:1
msgid "MySQL MEDIUMTEXT type, for text up to 2^24 characters."
msgstr "MySQL MEDIUMTEXTタイプ（最大2 ^ 24文字のテキスト用）。"

#: of sqlalchemy.dialects.mysql.MEDIUMTEXT.__init__:1
msgid "Construct a MEDIUMTEXT."
msgstr "MEDIUMTEXTを作成します。"

#: of sqlalchemy.dialects.mysql.NCHAR:1
msgid "MySQL NCHAR type."
msgstr "MySQL NCHAR型。"

#: of sqlalchemy.dialects.mysql.NCHAR:3
msgid ""
"For fixed-length character data in the server's configured national "
"character set."
msgstr "サーバーの構成済みの各国語文字セットの固定長文字データの場合。"

#: of sqlalchemy.dialects.mysql.NCHAR.__init__:1
msgid "Construct an NCHAR."
msgstr "NCHARを構築します。"

#: of sqlalchemy.dialects.mysql.NUMERIC:1
msgid "MySQL NUMERIC type."
msgstr "MySQL NUMERIC型。"

#: of sqlalchemy.dialects.mysql.NUMERIC.__init__:1
msgid "Construct a NUMERIC."
msgstr "数値を作成します。"

#: of sqlalchemy.dialects.mysql.NVARCHAR:1
msgid "MySQL NVARCHAR type."
msgstr "MySQLのNVARCHAR型。"

#: of sqlalchemy.dialects.mysql.NVARCHAR:3
msgid ""
"For variable-length character data in the server's configured national "
"character set."
msgstr "サーバーの構成済みの各国語キャラクタ・セット内の可変長文字データ用。"

#: of sqlalchemy.dialects.mysql.NVARCHAR.__init__:1
msgid "Construct an NVARCHAR."
msgstr "NVARCHARを構築します。"

#: of sqlalchemy.dialects.mysql.REAL:1
msgid "MySQL REAL type."
msgstr "MySQL REALタイプ。"

#: of sqlalchemy.dialects.mysql.REAL.__init__:1
msgid "Construct a REAL."
msgstr "REALを構築します。"

#: of sqlalchemy.dialects.mysql.REAL.__init__:5
msgid ""
"The :class:`.REAL` type by default converts from float to Decimal, using "
"a truncation that defaults to 10 digits. Specify either ``scale=n`` or "
"``decimal_return_scale=n`` in order to change this scale, or "
"``asdecimal=False`` to return values directly as Python floating points."
msgstr "：class： `.REAL`型はデフォルトでfloatからDecimalに変換され、デフォルトは10桁です。このスケールを変更するには `` scale = n``または `` decimal_return_scale = n``を指定するか、Python浮動小数点として直接値を返すよう `` asdecimal = False``を指定してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET:1
msgid "MySQL SET type."
msgstr "MySQL SETタイプ。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:1
msgid "Construct a SET."
msgstr "SETを作成します。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:8
msgid ""
"The list of potential values is required in the case that this set will "
"be used to generate DDL for a table, or if the "
":paramref:`.SET.retrieve_as_bitwise` flag is set to True."
msgstr "潜在的な値のリストは、このセットがテーブルのDDLを生成するために使用される場合、または：paramref： `.SET.retrieve_as_bitwise`フラグがTrueに設定されている場合に必要です。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:12
msgid "The range of valid values for this SET."
msgstr "このSETの有効な値の範囲。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:14
msgid "Same flag as that of :paramref:`.String.convert_unicode`."
msgstr "：paramref： `.String.convert_unicode`と同じフラグです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:17
msgid "same as that of :paramref:`.String.collation`"
msgstr "paramref： `.String.collat​​ion`のものと同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:19
msgid "same as that of :paramref:`.VARCHAR.charset`."
msgstr "paramref： `.VARCHAR.charset`と同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:21
msgid "same as that of :paramref:`.VARCHAR.ascii`."
msgstr "paramref： `.VARCHAR.ascii`と同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:23
msgid "same as that of :paramref:`.VARCHAR.unicode`."
msgstr "paramref： `.VARCHAR.unicode`と同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:25
msgid "same as that of :paramref:`.VARCHAR.binary`."
msgstr "paramref： `.VARCHAR.binary`と同じです。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:27
msgid ""
"Defaults to 'auto': automatically determine set value quoting.  If all "
"values are surrounded by the same quoting character, then use 'quoted' "
"mode.  Otherwise, use 'unquoted' mode.  'quoted': values in enums are "
"already quoted, they will be used directly when generating the schema - "
"this usage is deprecated.  'unquoted': values in enums are not quoted, "
"they will be escaped and surrounded by single quotes when generating the "
"schema.  Previous versions of this type always required manually quoted "
"values to be supplied; future versions will always quote the string "
"literals for you.  This is a transitional option.  .. versionadded:: "
"0.9.0"
msgstr "デフォルトは &#39;auto&#39;：設定値の引用を自動的に決定します。すべての値が同じ引用文字で囲まれている場合は、引用符付きのモードを使用します。それ以外の場合は、引用符で囲まれていないモードを使用します。 &#39;quoted&#39;：enumの値はすでに引用されており、スキーマの生成時に直接使用されます。この使用法は推奨されていません。 &#39;unquoted&#39;：enumの値は引用符で囲まれません。スキーマを生成するときには、エスケープされ、単一引用符で囲まれます。このタイプの以前のバージョンでは、常に手動で引用された値を指定する必要がありました。将来のバージョンは常にあなたのために文字列リテラルを引用します。これは過渡的な選択肢です。 .. versionadded :: 0.9.0"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:27
msgid ""
"Defaults to 'auto': automatically determine set value quoting.  If all "
"values are surrounded by the same quoting character, then use 'quoted' "
"mode.  Otherwise, use 'unquoted' mode."
msgstr "デフォルトは &#39;auto&#39;：設定値の引用を自動的に決定します。すべての値が同じ引用文字で囲まれている場合は、引用符付きのモードを使用します。それ以外の場合は、引用符で囲まれていないモードを使用します。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:43
msgid ""
"if True, the data for the set type will be persisted and selected using "
"an integer value, where a set is coerced into a bitwise mask for "
"persistence.  MySQL allows this mode which has the advantage of being "
"able to store values unambiguously, such as the blank string ``''``.   "
"The datatype will appear as the expression ``col + 0`` in a SELECT "
"statement, so that the value is coerced into an integer value in result "
"sets. This flag is required if one wishes to persist a set that can store"
" the blank string ``''`` as a value.  .. warning::    When using "
":paramref:`.mysql.SET.retrieve_as_bitwise`, it is   essential that the "
"list of set values is expressed in the   **exact same order** as exists "
"on the MySQL database.  .. versionadded:: 1.0.0"
msgstr "Trueの場合、セット型のデータは永続化され、整数値を使用して選択されます。この場合、セットは永続性のためにビット単位のマスクに変換されます。 MySQLでは、空の文字列 `` &#39;&#39; ``のように明白に値を格納できるという利点があります。データ型は、SELECT文に式 `` col + 0``として現れるので、値は結果セットの整数値に変換されます。このフラグは空文字列 `` &#39;&#39; ``を値として格納できるセットを保持したい場合に必要です。 .. warning :: paramref： `.mysql.SET.retrieve_as_bitwise`を使用する場合、設定値のリストは、MySQLデータベースと同じ**同じ順序**で表現することが不可欠です。 .. versionadded :: 1.0.0"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:43
msgid ""
"if True, the data for the set type will be persisted and selected using "
"an integer value, where a set is coerced into a bitwise mask for "
"persistence.  MySQL allows this mode which has the advantage of being "
"able to store values unambiguously, such as the blank string ``''``.   "
"The datatype will appear as the expression ``col + 0`` in a SELECT "
"statement, so that the value is coerced into an integer value in result "
"sets. This flag is required if one wishes to persist a set that can store"
" the blank string ``''`` as a value."
msgstr "Trueの場合、セット型のデータは永続化され、整数値を使用して選択されます。この場合、セットは永続性のためにビット単位のマスクに変換されます。 MySQLでは、空の文字列 `` &#39;&#39; ``のように明白に値を格納できるという利点があります。データ型は、SELECT文に式 `` col + 0``として現れるので、値は結果セットの整数値に変換されます。このフラグは空文字列 `` &#39;&#39; ``を値として格納できるセットを保持したい場合に必要です。"

#: ../../docstring of sqlalchemy.dialects.mysql.SET.__init__:55
msgid ""
"When using :paramref:`.mysql.SET.retrieve_as_bitwise`, it is essential "
"that the list of set values is expressed in the **exact same order** as "
"exists on the MySQL database."
msgstr "：paramref： `.mysql.SET.retrieve_as_bitwise`を使用する場合、設定された値のリストはMySQLデータベースと同じ**同じ順序**で表現されることが不可欠です。"

#: of sqlalchemy.dialects.mysql.SMALLINT:1
msgid "MySQL SMALLINTEGER type."
msgstr "MySQLのSMALLINTEGER型。"

#: of sqlalchemy.dialects.mysql.SMALLINT.__init__:1
msgid "Construct a SMALLINTEGER."
msgstr "SMALLINTEGERを構築します。"

#: of sqlalchemy.dialects.mysql.TEXT:1
msgid "MySQL TEXT type, for text up to 2^16 characters."
msgstr "MySQL TEXTタイプ（最大2 ^ 16文字のテキスト用）。"

#: of sqlalchemy.dialects.mysql.TEXT.__init__:1
msgid "Construct a TEXT."
msgstr "TEXTを作成します。"

#: of sqlalchemy.dialects.mysql.TEXT.__init__:3
msgid ""
"Optional, if provided the server may optimize storage by substituting the"
" smallest TEXT type sufficient to store ``length`` characters."
msgstr "オプションで、サーバが `` length``文字を格納するのに十分な最小TEXT型に置き換えることによって、サーバを最適化することができます。"

#: of sqlalchemy.dialects.mysql.TIME:1
msgid "MySQL TIME type."
msgstr "MySQLのTIMEタイプ。"

#: of sqlalchemy.dialects.mysql.TIME.__init__:1
msgid "Construct a MySQL TIME type."
msgstr "MySQL TIME型を構築します。"

#: of sqlalchemy.dialects.mysql.TIME.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" TIME type.  .. note::     DBAPI driver support for fractional seconds "
"may    be limited; current support includes    MySQL Connector/Python."
msgstr "分数秒の精度値。 MySQL 5.6では分数秒のストレージがサポートされています。このパラメータは、TIMEタイプのDDLを発行するときに使用されます。 .. note ::分数秒のDBAPIドライバのサポートは制限されているかもしれません。現在のサポートには、MySQL Connector / Pythonが含まれます。"

#: of sqlalchemy.dialects.mysql.TIME.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" TIME type."
msgstr "分数秒の精度値。 MySQL 5.6では分数秒のストレージがサポートされています。このパラメータは、TIMEタイプのDDLを発行するときに使用されます。"

#: of sqlalchemy.dialects.mysql.TIME.__init__:15
msgid "The MySQL-specific TIME type as well as fractional seconds support."
msgstr "MySQL固有のTIME型および分数秒のサポート。"

#: of sqlalchemy.dialects.mysql.TIMESTAMP:1
msgid "MySQL TIMESTAMP type."
msgstr "MySQLのTIMESTAMP型。"

#: of sqlalchemy.dialects.mysql.TIMESTAMP.__init__:1
msgid "Construct a MySQL TIMESTAMP type."
msgstr "MySQL TIMESTAMP型を構築します。"

#: of sqlalchemy.dialects.mysql.TIMESTAMP.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6.4 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" TIMESTAMP type.  .. note::     DBAPI driver support for fractional "
"seconds may    be limited; current support includes    MySQL "
"Connector/Python."
msgstr "分数秒の精度値。 MySQL 5.6.4では、分数秒のストレージがサポートされています。このパラメーターは、TIMESTAMPタイプのDDLを発行するときに使用されます。 .. note ::分数秒のDBAPIドライバのサポートは制限されているかもしれません。現在のサポートには、MySQL Connector / Pythonが含まれます。"

#: of sqlalchemy.dialects.mysql.TIMESTAMP.__init__:4
msgid ""
"fractional seconds precision value. MySQL 5.6.4 supports storage of "
"fractional seconds; this parameter will be used when emitting DDL for the"
" TIMESTAMP type."
msgstr "分数秒の精度値。 MySQL 5.6.4では、分数秒のストレージがサポートされています。このパラメーターは、TIMESTAMPタイプのDDLを発行するときに使用されます。"

#: of sqlalchemy.dialects.mysql.TIMESTAMP.__init__:15
msgid ""
"Added MySQL-specific :class:`.mysql.TIMESTAMP` with fractional seconds "
"support."
msgstr "MySQL特有の：class： `.mysql.TIMESTAMP`を分数秒でサポートしました。"

#: of sqlalchemy.dialects.mysql.TINYBLOB:1
msgid "MySQL TINYBLOB type, for binary data up to 2^8 bytes."
msgstr "MySQL TINYBLOBタイプ。最大2 ^ 8バイトのバイナリデータ用。"

#: of sqlalchemy.dialects.mysql.TINYINT:1
msgid "MySQL TINYINT type."
msgstr "MySQLのTINYINT型。"

#: of sqlalchemy.dialects.mysql.TINYINT.__init__:1
msgid "Construct a TINYINT."
msgstr "TINYINTを構築します。"

#: of sqlalchemy.dialects.mysql.TINYTEXT:1
msgid "MySQL TINYTEXT type, for text up to 2^8 characters."
msgstr "MySQL TINYTEXT型、最大2 ^ 8文字のテキスト。"

#: of sqlalchemy.dialects.mysql.TINYTEXT.__init__:1
msgid "Construct a TINYTEXT."
msgstr "TINYTEXTを構築します。"

#: of sqlalchemy.dialects.mysql.VARBINARY:1
msgid "The SQL VARBINARY type."
msgstr "SQL VARBINARY型。"

#: of sqlalchemy.dialects.mysql.VARCHAR:1
msgid "MySQL VARCHAR type, for variable-length character data."
msgstr "可変長文字データ用のMySQL VARCHAR型。"

#: of sqlalchemy.dialects.mysql.VARCHAR.__init__:1
msgid "Construct a VARCHAR."
msgstr "VARCHARを構築します。"

#: of sqlalchemy.dialects.mysql.YEAR:1
msgid "MySQL YEAR type, for single byte storage of years 1901-2155."
msgstr "1901-2155年の1バイトの記憶域のMySQL YEAR型。"

#: ../../dialects/mysql.rst:160
msgid "MySQL DML Constructs"
msgstr "MySQL DMLコンストラクト"

#: of sqlalchemy.dialects.mysql.dml.insert:1
msgid "Construct a new :class:`.Insert` object."
msgstr "新しい：class： `.Insert`オブジェクトを作成します。"

#: of sqlalchemy.dialects.mysql.dml.insert:3
msgid ""
"This constructor is mirrored as a public API function; see "
":func:`~.expression.insert` for a full usage and argument description."
msgstr "このコンストラクタはパブリックAPI関数としてミラー化されています。完全な使い方と引数の説明については：func： `〜.expression.insert`を参照してください。"

#: ../../docstring of sqlalchemy.dialects.mysql.dml.Insert:1
msgid "MySQL-specific implementation of INSERT."
msgstr "INSERTのMySQL固有の実装。"

#: ../../docstring of sqlalchemy.dialects.mysql.dml.Insert:3
msgid "Adds methods for MySQL-specific syntaxes such as ON DUPLICATE KEY UPDATE."
msgstr "ON DUPLICATE KEY UPDATEなどのMySQL固有の構文のメソッドを追加します。"

#: ../../docstring of sqlalchemy.dialects.mysql.dml.Insert.inserted:1
msgid ""
"Provide the \"inserted\" namespace for an ON DUPLICATE KEY UPDATE "
"statement"
msgstr "ON DUPLICATE KEY UPDATE文に\ &quot;inserted \&quot;名前空間を提供する"

#: ../../docstring of sqlalchemy.dialects.mysql.dml.Insert.inserted:3
msgid ""
"MySQL's ON DUPLICATE KEY UPDATE clause allows reference to the row that "
"would be inserted, via a special function called ``VALUES()``. This "
"attribute provides all columns in this row to be referenaceable such that"
" they will render within a ``VALUES()`` function inside the ON DUPLICATE "
"KEY UPDATE clause.    The attribute is named ``.inserted`` so as not to "
"conflict with the existing :meth:`.Insert.values` method."
msgstr "MySQLのON DUPLICATE KEY UPDATE節は、挿入される行を、 `` VALUES（） ``と呼ばれる特別な関数を介して参照させます。この属性は、ON DUPLICATE KEY UPDATE句の中の `` VALUES（） ``関数内でレンダリングされるように、この行のすべてのカラムを参照できるようにします。属性は、既存の：meth： `.Insert.values`メソッドと衝突しないように、` `.inserted``という名前になっています。"

#: ../../docstring of sqlalchemy.dialects.mysql.dml.Insert.inserted:12
msgid ""
":ref:`mysql_insert_on_duplicate_key_update` - example of how to use "
":attr:`.Insert.inserted`"
msgstr "：ref： `mysql_insert_on_duplicate_key_update`  - 使用方法の例：attr：` .Insert.inserted`"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:1
msgid "Specifies the ON DUPLICATE KEY UPDATE clause."
msgstr "ON DUPLICATE KEY UPDATE句を指定します。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:3
msgid ""
"Column keys linked to UPDATE values.  The values may be any SQL "
"expression or supported literal Python values."
msgstr "列のキーはUPDATE値にリンクされています。値は、任意のSQL式またはサポートされているリテラルPython値です。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:7
msgid ""
"This dictionary does **not** take into account Python-specified default "
"UPDATE values or generation functions, e.g. those specified using "
":paramref:`.Column.onupdate`. These values will not be exercised for an "
"ON DUPLICATE KEY UPDATE style of UPDATE, unless values are manually "
"specified here."
msgstr "この辞書は** Pythonで指定されたデフォルトのUPDATE値や生成関数を考慮していません**例えば：paramref： `.Column.onupdate`を使って指定したものです。 UPDATEのON DUPLICATE KEY UPDATEスタイルでは、値を手動で指定しない限り、これらの値は使用されません。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:13
msgid ""
"As an alternative to passing key/value parameters, a dictionary or list "
"of 2-tuples can be passed as a single positional argument.  Passing a "
"single dictionary is equivalent to the keyword argument form::     "
"insert().on_duplicate_key_update({\"name\": \"some name\"})  Passing a "
"list of 2-tuples indicates that the parameter assignments in the UPDATE "
"clause should be ordered as sent, in a manner similar to that described "
"for the :class:`.Update` contruct overall in "
":ref:`updates_order_parameters`::     insert().on_duplicate_key_update("
"        [(\"name\": \"some name\"), (\"value\", \"some value\")])  .. "
"versionchanged:: 1.3 parameters can be specified as a dictionary    or "
"list of 2-tuples; the latter form provides for parameter    ordering."
msgstr "キー/値パラメータを渡す代わりに、辞書または2タプルのリストを単一の位置引数として渡すことができます。 1つの辞書を渡すことは、キーワード引数:: insert（）。on_duplicate_key_update（{\ &quot;name \&quot;：\ &quot;some name \&quot;}）と同じです。2タプルのリストを渡すと、UPDATE句は、：ref： `updates_order_parameters` :: insert（）。on_duplicate_key_update（[（\&quot; name \ &quot;：\&quot; some）]：class： `.Update`コンストラクトで説明したのと同様の方法で、 versionchanged :: 1.3パラメータは辞書または2タプルのリストとして指定することができます。後者の形式はパラメータの順序付けを提供する。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:13
msgid ""
"As an alternative to passing key/value parameters, a dictionary or list "
"of 2-tuples can be passed as a single positional argument."
msgstr "キー/値パラメータを渡す代わりに、辞書または2タプルのリストを単一の位置引数として渡すことができます。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:17
msgid "Passing a single dictionary is equivalent to the keyword argument form::"
msgstr "1つの辞書に合格することは、キーワード引数フォーム::"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:22
msgid ""
"Passing a list of 2-tuples indicates that the parameter assignments in "
"the UPDATE clause should be ordered as sent, in a manner similar to that "
"described for the :class:`.Update` contruct overall in "
":ref:`updates_order_parameters`::"
msgstr "2タプルのリストを渡すと、UPDATE句のパラメータ割り当ては、：class： `.Update`コンストラクトで説明されているのと同様の仕方で、送信されたものとして順序付けされるべきであることを示します：ref：` updates_order_parameters` ::"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:30
msgid ""
"parameters can be specified as a dictionary or list of 2-tuples; the "
"latter form provides for parameter ordering."
msgstr "パラメータは辞書または2タプルのリストとして指定できます。後者の形式はパラメータの順序付けを提供する。"

#: ../../docstring of
#: sqlalchemy.dialects.mysql.dml.Insert.on_duplicate_key_update:39
msgid ":ref:`mysql_insert_on_duplicate_key_update`"
msgstr "：ref： `mysql_insert_on_duplicate_key_update`"

#: ../../dialects/mysql.rst:170
msgid "MySQL-Python"
msgstr "MySQL-Python"

#: ../../docstring of sqlalchemy.dialects.mysql.mysqldb:12
#: sqlalchemy.dialects.mysql.oursql:10 sqlalchemy.dialects.mysql.pymysql:10
msgid ""
"Please see :ref:`mysql_unicode` for current recommendations on unicode "
"handling."
msgstr "Unicode処理に関する現在の推奨事項については、ref： `mysql_unicode`を参照してください。"

#: of sqlalchemy.dialects.mysql.mysqldb:16
msgid "Py3K Support"
msgstr "Py3Kのサポート"

#: of sqlalchemy.dialects.mysql.mysqldb:18
msgid ""
"Currently, MySQLdb only runs on Python 2 and development has been "
"stopped. `mysqlclient`_ is fork of MySQLdb and provides Python 3 support "
"as well as some bugfixes."
msgstr "現在、MySQLdbはPython 2でのみ動作し、開発は中止されています。 `mysqlclient`_はMySQLdbのforkで、Python 3のサポートといくつかのバグ修正を提供します。"

#: of sqlalchemy.dialects.mysql.mysqldb:25
msgid "Using MySQLdb with Google Cloud SQL"
msgstr "Google Cloud SQLでMySQLdbを使用する"

#: of sqlalchemy.dialects.mysql.mysqldb:27
msgid ""
"Google Cloud SQL now recommends use of the MySQLdb dialect.  Connect "
"using a URL like the following::"
msgstr "Google Cloud SQLでは、MySQLdbの方言の使用を推奨しています。次のようなURLを使用して接続します。"

#: of sqlalchemy.dialects.mysql.mysqldb:35
msgid ""
"The mysqldb dialect supports server-side cursors. See "
":ref:`mysql_ss_cursors`."
msgstr "mysqldbの方言は、サーバ側のカーソルをサポートしています。参照：ref： `mysql_ss_cursors`を参照してください。"

#: ../../dialects/mysql.rst:175
msgid "pymysql"
msgstr "pymysql"

#: ../../docstring of sqlalchemy.dialects.mysql.pymysql:14
msgid "MySQL-Python Compatibility"
msgstr "MySQLとPythonの互換性"

#: ../../docstring of sqlalchemy.dialects.mysql.pymysql:16
#, python-format
msgid ""
"The pymysql DBAPI is a pure Python port of the MySQL-python (MySQLdb) "
"driver, and targets 100% compatibility.   Most behavioral notes for "
"MySQL-python apply to the pymysql driver as well."
msgstr "pymysql DBAPIはMySQL-python（MySQLdb）ドライバの純粋なPythonポートで、100％の互換性をターゲットとしています。 MySQL-pythonのほとんどの行動ノートは、pymysqlドライバにも適用されます。"

#: ../../dialects/mysql.rst:180
msgid "MySQL-Connector"
msgstr "MySQLコネクタ"

#: of sqlalchemy.dialects.mysql.mysqlconnector:9
msgid "Current Issues"
msgstr "現在の課題"

#: of sqlalchemy.dialects.mysql.mysqlconnector:11
msgid ""
"The mysqlconnector driver has many issues that have gone unresolved for "
"many years and it recommended that mysqlclient or pymysql be used if "
"possible; as of June 27, 2018:"
msgstr "mysqlconnectorドライバには何年も解決されていない多くの問題があります。可能であればmysqlclientまたはpymysqlを使用することを推奨します。 2018年6月27日現在："

#: of sqlalchemy.dialects.mysql.mysqlconnector:15
msgid ""
"the values in cursor.description are randomly sent as either bytes or "
"text with no discernible pattern, so the dialect must test these "
"individually and attempt to decode"
msgstr "cursor.descriptionの値は、認識可能なパターンのないバイトまたはテキストとしてランダムに送信されるため、ダイアレクトはこれらを個別にテストしてデコードを試みる必要があります"

#: of sqlalchemy.dialects.mysql.mysqlconnector:19
msgid ""
"has been observed to leak interpreter memory (likely at the C code level)"
" under scenarios that do not leak memory when using mysqlclient"
msgstr "mysqlclientを使用しているときにメモリがリークしないシナリオでインタプリタメモリ（Cコードレベルの可能性が高い）がリークすることが観察されています"

#: of sqlalchemy.dialects.mysql.mysqlconnector:22
msgid ""
"Under Python 2, the driver does not support SQL statements that contain "
"non-ascii characters within the SQL text, making it impossible to support"
" schema objects with non-ascii names; an ascii encoding error is raised."
msgstr "Python 2では、ドライバはSQLテキスト内に非ASCII文字を含むSQL文をサポートしていないため、非ASCII名のスキーマオブジェクトをサポートすることはできません。 ASCIIエンコーディングエラーが発生します。"

#: of sqlalchemy.dialects.mysql.mysqlconnector:26
msgid ""
"additional random bytes-returned issues occur when running under MySQL "
"8.0 only"
msgstr "追加のランダムバイト - 返される問題は、MySQL 8.0のみで実行されているときに発生します"

#: of sqlalchemy.dialects.mysql.mysqlconnector:29
msgid ""
"The driver does not accept the \"utf8mb4\" or \"utf8mb3\" charset "
"parameters, only \"utf8\", even though MySQL itself has deprecated this "
"symbol"
msgstr "ドライバは\ &quot;utf8mb4 \&quot;または\ &quot;utf8mb3 \&quot;のcharsetパラメータを受け入れませんが、MySQL自体はこのシンボルを非推奨にしていますが、\ &quot;utf8 \&quot;"

#: of sqlalchemy.dialects.mysql.mysqlconnector:32
msgid ""
"The driver produces deadlocks when trying to make use of SELECT..FOR "
"UPDATE, the reason is unknown."
msgstr "SELECT..FOR UPDATEを使用しようとすると、ドライバがデッドロックを生成します。その理由は不明です。"

#: of sqlalchemy.dialects.mysql.mysqlconnector:35
msgid ""
"This list should be updated as these issues are resolved either in the "
"upstream mysql-connector-python driver or if appropriate usage patterns "
"are contributed to SQLAlchemy."
msgstr "これらの問題は上流のmysql-connector-pythonドライバで解決されるか、または適切な使用パターンがSQLAlchemyに提供された場合、このリストは更新されるべきです。"

#: ../../dialects/mysql.rst:185
msgid "cymysql"
msgstr "cymysql"

#: ../../dialects/mysql.rst:190
msgid "OurSQL"
msgstr "OurSQL"

#: ../../dialects/mysql.rst:195
msgid "Google App Engine"
msgstr "Google App Engine"

#: ../../docstring of sqlalchemy.dialects.mysql.gaerdbms:21
msgid "Pooling"
msgstr "プール"

#: ../../docstring of sqlalchemy.dialects.mysql.gaerdbms:23
msgid ""
"Google App Engine connections appear to be randomly recycled, so the "
"dialect does not pool connections.  The :class:`.NullPool` implementation"
" is installed within the :class:`.Engine` by default."
msgstr "Google App Engineの接続はランダムにリサイクルされているように見えるため、方言は接続をプールしません。 ：class： `.NullPool`実装は、デフォルトで：class：` .Engine`の中にインストールされています。"

#: ../../dialects/mysql.rst:200
msgid "pyodbc"
msgstr "pyodbc"

#: ../../dialects/mysql.rst:205
msgid "zxjdbc"
msgstr "zxjdbc"

#: ../../docstring of sqlalchemy.dialects.mysql.zxjdbc:11
msgid "Character Sets"
msgstr "文字セット"

#: ../../docstring of sqlalchemy.dialects.mysql.zxjdbc:13
msgid ""
"SQLAlchemy zxjdbc dialects pass unicode straight through to the "
"zxjdbc/JDBC layer. To allow multiple character sets to be sent from the "
"MySQL Connector/J JDBC driver, by default SQLAlchemy sets its "
"``characterEncoding`` connection property to ``UTF-8``. It may be "
"overridden via a ``create_engine`` URL parameter."
msgstr "SQLAlchemyのzxjdbc方言は、zxjdbc / JDBCレイヤーにUnicodeを直接渡します。複数の文字セットをMySQL Connector / J JDBCドライバから送信できるようにするため、デフォルトではSQLAlchemyは `` characterEncoding``接続プロパティを `` UTF-8``に設定します。これは、 `` create_engine`` URLパラメータでオーバーライドすることができます。"

