# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/inspection.rst:5
msgid "Runtime Inspection API"
msgstr ""

#: of sqlalchemy.inspection:1
msgid ""
"The inspection module provides the :func:`.inspect` function, which "
"delivers runtime information about a wide variety of SQLAlchemy objects, "
"both within the Core as well as the ORM."
msgstr ""

#: of sqlalchemy.inspection:6
msgid ""
"The :func:`.inspect` function is the entry point to SQLAlchemy's public "
"API for viewing the configuration and construction of in-memory objects."
"   Depending on the type of object passed to :func:`.inspect`, the return"
" value will either be a related object which provides a known interface, "
"or in many cases it will return the object itself."
msgstr ""

#: of sqlalchemy.inspection:13
msgid ""
"The rationale for :func:`.inspect` is twofold.  One is that it replaces "
"the need to be aware of a large variety of \"information getting\" "
"functions in SQLAlchemy, such as :meth:`.Inspector.from_engine`, "
":func:`.orm.attributes.instance_state`, :func:`.orm.class_mapper`, and "
"others.    The other is that the return value of :func:`.inspect` is "
"guaranteed to obey a documented API, thus allowing third party tools "
"which build on top of SQLAlchemy configurations to be constructed in a "
"forwards-compatible way."
msgstr ""

#: of sqlalchemy.inspection:22
msgid "The :func:`.inspect` system is introduced as of version 0.8."
msgstr ""

#: of sqlalchemy.inspection.inspect:1
msgid "Produce an inspection object for the given target."
msgstr ""

#: of sqlalchemy.inspection.inspect:3
msgid ""
"The returned value in some cases may be the same object as the one given,"
" such as if a :class:`.Mapper` object is passed.   In other cases, it "
"will be an instance of the registered inspection type for the given "
"object, such as if an :class:`.engine.Engine` is passed, an "
":class:`.Inspector` object is returned."
msgstr ""

#: of sqlalchemy.inspection.inspect
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.inspection.inspect:11
msgid "the subject to be inspected."
msgstr ""

#: of sqlalchemy.inspection.inspect:12
msgid ""
"When ``True``, if the given subject does not correspond to a known "
"SQLAlchemy inspected type, :class:`sqlalchemy.exc.NoInspectionAvailable` "
"is raised.  If ``False``, ``None`` is returned."
msgstr ""

#: ../../core/inspection.rst:11
msgid "Available Inspection Targets"
msgstr ""

#: ../../core/inspection.rst:13
msgid "Below is a listing of many of the most common inspection targets."
msgstr ""

#: ../../core/inspection.rst:15
msgid ""
":class:`.Connectable` (i.e. :class:`.Engine`, :class:`.Connection`) - "
"returns an :class:`.Inspector` object."
msgstr ""

#: ../../core/inspection.rst:17
msgid ""
":class:`.ClauseElement` - all SQL expression components, including "
":class:`.Table`, :class:`.Column`, serve as their own inspection objects,"
" meaning any of these objects passed to :func:`.inspect` return "
"themselves."
msgstr ""

#: ../../core/inspection.rst:20
msgid ""
"``object`` - an object given will be checked by the ORM for a mapping - "
"if so, an :class:`.InstanceState` is returned representing the mapped "
"state of the object.  The :class:`.InstanceState` also provides access to"
" per attribute state via the :class:`.AttributeState` interface as well "
"as the per-flush \"history\" of any attribute via the :class:`.History` "
"object."
msgstr ""

#: ../../core/inspection.rst:26
msgid ""
"``type`` (i.e. a class) - a class given will be checked by the ORM for a "
"mapping - if so, a :class:`.Mapper` for that class is returned."
msgstr ""

#: ../../core/inspection.rst:28
msgid ""
"mapped attribute - passing a mapped attribute to :func:`.inspect`, such "
"as ``inspect(MyClass.some_attribute)``, returns a "
":class:`.QueryableAttribute` object, which is the :term:`descriptor` "
"associated with a mapped class. This descriptor refers to a "
":class:`.MapperProperty`, which is usually an instance of "
":class:`.ColumnProperty` or :class:`.RelationshipProperty`, via its "
":attr:`.QueryableAttribute.property` attribute."
msgstr ""

#: ../../core/inspection.rst:35
msgid ":class:`.AliasedClass` - returns an :class:`.AliasedInsp` object."
msgstr ""

