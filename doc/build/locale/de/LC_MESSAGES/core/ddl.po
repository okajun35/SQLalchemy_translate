# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/ddl.rst:6
msgid "Customizing DDL"
msgstr ""

#: ../../core/ddl.rst:8
msgid ""
"In the preceding sections we've discussed a variety of schema constructs "
"including :class:`~sqlalchemy.schema.Table`, "
":class:`~sqlalchemy.schema.ForeignKeyConstraint`, "
":class:`~sqlalchemy.schema.CheckConstraint`, and "
":class:`~sqlalchemy.schema.Sequence`. Throughout, we've relied upon the "
"``create()`` and :func:`~sqlalchemy.schema.MetaData.create_all` methods "
"of :class:`~sqlalchemy.schema.Table` and "
":class:`~sqlalchemy.schema.MetaData` in order to issue data definition "
"language (DDL) for all constructs. When issued, a pre-determined order of"
" operations is invoked, and DDL to create each table is created "
"unconditionally including all constraints and other objects associated "
"with it. For more complex scenarios where database-specific DDL is "
"required, SQLAlchemy offers two techniques which can be used to add any "
"DDL based on any condition, either accompanying the standard generation "
"of tables or by itself."
msgstr ""

#: ../../core/ddl.rst:24
msgid "Custom DDL"
msgstr ""

#: ../../core/ddl.rst:26
msgid ""
"Custom DDL phrases are most easily achieved using the "
":class:`~sqlalchemy.schema.DDL` construct. This construct works like all "
"the other DDL elements except it accepts a string which is the text to be"
" emitted:"
msgstr ""

#: ../../core/ddl.rst:40
msgid ""
"A more comprehensive method of creating libraries of DDL constructs is to"
" use custom compilation - see :ref:`sqlalchemy.ext.compiler_toplevel` for"
" details."
msgstr ""

#: ../../core/ddl.rst:48
msgid "Controlling DDL Sequences"
msgstr ""

#: ../../core/ddl.rst:50
msgid ""
"The :class:`~.schema.DDL` construct introduced previously also has the "
"ability to be invoked conditionally based on inspection of the database."
"  This feature is available using the :meth:`.DDLElement.execute_if` "
"method.  For example, if we wanted to create a trigger but only on the "
"PostgreSQL backend, we could invoke this as::"
msgstr ""

#: ../../core/ddl.rst:73
msgid ""
"The :paramref:`.DDLElement.execute_if.dialect` keyword also accepts a "
"tuple of string dialect names::"
msgstr ""

#: ../../core/ddl.rst:87
msgid ""
"The :meth:`.DDLElement.execute_if` method can also work against a "
"callable function that will receive the database connection in use.  In "
"the example below, we use this to conditionally create a CHECK "
"constraint, first looking within the PostgreSQL catalogs to see if it "
"exists:"
msgstr ""

#: ../../core/ddl.rst:135
msgid "Using the built-in DDLElement Classes"
msgstr ""

#: ../../core/ddl.rst:137
msgid ""
"The ``sqlalchemy.schema`` package contains SQL expression constructs that"
" provide DDL expressions. For example, to produce a ``CREATE TABLE`` "
"statement:"
msgstr ""

#: ../../core/ddl.rst:153
msgid ""
"Above, the :class:`~sqlalchemy.schema.CreateTable` construct works like "
"any other expression construct (such as ``select()``, ``table.insert()``,"
" etc.). All of SQLAlchemy's DDL oriented constructs are subclasses of the"
" :class:`.DDLElement` base class; this is the base of all the objects "
"corresponding to CREATE and DROP as well as ALTER, not only in SQLAlchemy"
" but in Alembic Migrations as well. A full reference of available "
"constructs is in :ref:`schema_api_ddl`."
msgstr ""

#: ../../core/ddl.rst:161
msgid ""
"User-defined DDL constructs may also be created as subclasses of "
":class:`.DDLElement` itself.   The documentation in "
":ref:`sqlalchemy.ext.compiler_toplevel` has several examples of this."
msgstr ""

#: ../../core/ddl.rst:165
msgid ""
"The event-driven DDL system described in the previous section "
":ref:`schema_ddl_sequences` is available with other :class:`.DDLElement` "
"objects as well.  However, when dealing with the built-in constructs such"
" as :class:`.CreateIndex`, :class:`.CreateSequence`, etc, the event "
"system is of **limited** use, as methods like :meth:`.Table.create` and "
":meth:`.MetaData.create_all` will invoke these constructs "
"unconditionally. In a future SQLAlchemy release, the DDL event system "
"including conditional execution will taken into account for built-in "
"constructs that currently invoke in all cases."
msgstr ""

#: ../../core/ddl.rst:175
msgid ""
"We can illustrate an event-driven example with the "
":class:`.AddConstraint` and :class:`.DropConstraint` constructs, as the "
"event-driven system will work for CHECK and UNIQUE constraints, using "
"these as we did in our previous example of "
":meth:`.DDLElement.execute_if`:"
msgstr ""

#: ../../core/ddl.rst:218
msgid ""
"While the above example is against the built-in :class:`.AddConstraint` "
"and :class:`.DropConstraint` objects, the main usefulness of DDL events "
"for now remains focused on the use of the :class:`.DDL` construct itself,"
" as well as with user-defined subclasses of :class:`.DDLElement` that "
"aren't already part of the :meth:`.MetaData.create_all`, "
":meth:`.Table.create`, and corresponding \"drop\" processes."
msgstr ""

#: ../../core/ddl.rst:228
msgid "DDL Expression Constructs API"
msgstr ""

#: of sqlalchemy.schema.sort_tables:1
msgid "sort a collection of :class:`.Table` objects based on dependency."
msgstr ""

#: of sqlalchemy.schema.sort_tables:3
msgid ""
"This is a dependency-ordered sort which will emit :class:`.Table` objects"
" such that they will follow their dependent :class:`.Table` objects. "
"Tables are dependent on another based on the presence of "
":class:`.ForeignKeyConstraint` objects as well as explicit dependencies "
"added by :meth:`.Table.add_is_dependent_on`."
msgstr ""

#: of sqlalchemy.schema.sort_tables:11
msgid ""
"The :func:`.sort_tables` function cannot by itself accommodate automatic "
"resolution of dependency cycles between tables, which are usually caused "
"by mutually dependent foreign key constraints. To resolve these cycles, "
"either the :paramref:`.ForeignKeyConstraint.use_alter` parameter may be "
"appled to those constraints, or use the "
":func:`.sql.sort_tables_and_constraints` function which will break out "
"foreign key constraints involved in cycles separately."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute
#: sqlalchemy.schema.DDLElement.execute_at
#: sqlalchemy.schema.DDLElement.execute_if sqlalchemy.schema.sort_tables
#: sqlalchemy.schema.sort_tables_and_constraints
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.schema.sort_tables:20
#: sqlalchemy.schema.sort_tables_and_constraints:18
msgid "a sequence of :class:`.Table` objects."
msgstr ""

#: of sqlalchemy.schema.sort_tables:22
msgid ""
"optional callable which will be passed a :class:`.ForeignKey` object; if "
"it returns True, this constraint will not be considered as a dependency."
"  Note this is **different** from the same parameter in "
":func:`.sort_tables_and_constraints`, which is instead passed the owning "
":class:`.ForeignKeyConstraint` object."
msgstr ""

#: of sqlalchemy.schema.sort_tables:29
#: sqlalchemy.schema.sort_tables_and_constraints:29
msgid ""
"a sequence of 2-tuples of tables which will also be considered as "
"dependent on each other."
msgstr ""

#: of sqlalchemy.schema.sort_tables:34
msgid ":func:`.sort_tables_and_constraints`"
msgstr ""

#: of sqlalchemy.schema.sort_tables:36
msgid ":meth:`.MetaData.sorted_tables` - uses this function to sort"
msgstr ""

#: of sqlalchemy.schema.sort_tables_and_constraints:1
msgid ""
"sort a collection of :class:`.Table`  / :class:`.ForeignKeyConstraint` "
"objects."
msgstr ""

#: of sqlalchemy.schema.sort_tables_and_constraints:4
msgid ""
"This is a dependency-ordered sort which will emit tuples of ``(Table, "
"[ForeignKeyConstraint, ...])`` such that each :class:`.Table` follows its"
" dependent :class:`.Table` objects. Remaining "
":class:`.ForeignKeyConstraint` objects that are separate due to "
"dependency rules not satisfied by the sort are emitted afterwards as "
"``(None, [ForeignKeyConstraint ...])``."
msgstr ""

#: of sqlalchemy.schema.sort_tables_and_constraints:11
msgid ""
"Tables are dependent on another based on the presence of "
":class:`.ForeignKeyConstraint` objects, explicit dependencies added by "
":meth:`.Table.add_is_dependent_on`, as well as dependencies stated here "
"using the :paramref:`~.sort_tables_and_constraints.skip_fn` and/or "
":paramref:`~.sort_tables_and_constraints.extra_dependencies` parameters."
msgstr ""

#: of sqlalchemy.schema.sort_tables_and_constraints:20
msgid ""
"optional callable which will be passed a :class:`.ForeignKeyConstraint` "
"object, and returns a value based on whether this constraint should "
"definitely be included or excluded as an inline constraint, or neither."
"   If it returns False, the constraint will definitely be included as a "
"dependency that cannot be subject to ALTER; if True, it will **only** be "
"included as an ALTER result at the end.   Returning None means the "
"constraint is included in the table-based result unless it is detected as"
" part of a dependency cycle."
msgstr ""

#: of sqlalchemy.schema.sort_tables_and_constraints:36
msgid ":func:`.sort_tables`"
msgstr ""

#: of sqlalchemy.schema.DDLElement:1
msgid "Base class for DDL expression constructs."
msgstr ""

#: of sqlalchemy.schema.DDLElement:3
msgid ""
"This class is the base for the general purpose :class:`.DDL` class, as "
"well as the various create/drop clause constructs such as "
":class:`.CreateTable`, :class:`.DropTable`, :class:`.AddConstraint`, etc."
msgstr ""

#: of sqlalchemy.schema.DDLElement:8
msgid ""
":class:`.DDLElement` integrates closely with SQLAlchemy events, "
"introduced in :ref:`event_toplevel`.  An instance of one is itself an "
"event receiving callable::"
msgstr ""

#: of sqlalchemy.schema.DDLElement:20
msgid ":class:`.DDL`"
msgstr ""

#: of sqlalchemy.schema.DDLElement:22
#: sqlalchemy.schema.DDLElement.execute_if:59
msgid ":class:`.DDLEvents`"
msgstr ""

#: of sqlalchemy.schema.DDLElement:24
#: sqlalchemy.schema.DDLElement.execute_if:61
msgid ":ref:`event_toplevel`"
msgstr ""

#: of sqlalchemy.schema.DDLElement:26
msgid ":ref:`schema_ddl_sequences`"
msgstr ""

#: of sqlalchemy.schema.DDLElement.against:1
msgid "Return a copy of this DDL against a specific schema item."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute:1
msgid "Execute this DDL immediately."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute:3
msgid ""
"Executes the DDL statement in isolation using the supplied "
":class:`.Connectable` or :class:`.Connectable` assigned to the ``.bind`` "
"property, if not supplied. If the DDL has a conditional ``on`` criteria, "
"it will be invoked with None as the event."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute:9
msgid ""
"Optional, an ``Engine`` or ``Connection``. If not supplied, a valid "
":class:`.Connectable` must be present in the ``.bind`` property."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute:14
msgid ""
"Optional, defaults to None.  The target SchemaItem for the execute call."
"  Will be passed to the ``on`` callable if any, and may also provide "
"string expansion data for the statement. See ``execute_at`` for more "
"information."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:1
msgid "Link execution of this DDL to the DDL lifecycle of a SchemaItem."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:3
msgid "See :class:`.DDLEvents`, as well as :meth:`.DDLElement.execute_if`."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:5
msgid ""
"Links this ``DDLElement`` to a ``Table`` or ``MetaData`` instance, "
"executing it when that schema item is created or dropped. The DDL "
"statement will be executed using the same Connection and transactional "
"context as the Table create/drop itself. The ``.bind`` property of this "
"statement is ignored."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:11
msgid ""
"One of the events defined in the schema item's ``.ddl_events``; e.g. "
"'before-create', 'after-create', 'before-drop' or 'after-drop'"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:15
msgid ""
"The Table or MetaData instance for which this DDLElement will be "
"associated with."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:19
msgid "A DDLElement instance can be linked to any number of schema items."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:21
msgid ""
"``execute_at`` builds on the ``append_ddl_listener`` interface of "
":class:`.MetaData` and :class:`.Table` objects."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_at:24
msgid ""
"Caveat: Creating or dropping a Table in isolation will also trigger any "
"DDL set to ``execute_at`` that Table's MetaData.  This may change in a "
"future release."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:1
msgid "Return a callable that will execute this DDLElement conditionally."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:4
msgid "Used to provide a wrapper for event listening::"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:12
msgid ""
"May be a string, tuple or a callable predicate.  If a string, it will be "
"compared to the name of the executing database dialect::    "
"DDL('something').execute_if(dialect='postgresql')  If a tuple, specifies "
"multiple dialect names::    "
"DDL('something').execute_if(dialect=('postgresql', 'mysql'))"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:12
msgid ""
"May be a string, tuple or a callable predicate.  If a string, it will be "
"compared to the name of the executing database dialect::"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:18
msgid "If a tuple, specifies multiple dialect names::"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:22
msgid ""
"A callable, which will be invoked with four positional arguments as well "
"as optional keyword arguments:    :ddl:     This DDL element.    :target:"
"     The :class:`.Table` or :class:`.MetaData` object which is the     "
"target of this event. May be None if the DDL is executed     explicitly."
"    :bind:     The :class:`.Connection` being used for DDL execution    "
":tables:     Optional keyword argument - a list of Table objects which "
"are to     be created/ dropped within a MetaData.create_all() or "
"drop_all()     method call.    :state:     Optional keyword argument - "
"will be the ``state`` argument     passed to this function.    "
":checkfirst:    Keyword argument, will be True if the 'checkfirst' flag "
"was    set during the call to ``create()``, ``create_all()``,    "
"``drop()``, ``drop_all()``.  If the callable returns a true value, the "
"DDL statement will be executed."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:22
msgid ""
"A callable, which will be invoked with four positional arguments as well "
"as optional keyword arguments:"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "ddl"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:27
msgid "This DDL element."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "target"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:30
msgid ""
"The :class:`.Table` or :class:`.MetaData` object which is the target of "
"this event. May be None if the DDL is executed explicitly."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "bind"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:35
msgid "The :class:`.Connection` being used for DDL execution"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "tables"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:38
msgid ""
"Optional keyword argument - a list of Table objects which are to be "
"created/ dropped within a MetaData.create_all() or drop_all() method "
"call."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "state"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:43
msgid ""
"Optional keyword argument - will be the ``state`` argument passed to this"
" function."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if
msgid "checkfirst"
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:47
msgid ""
"Keyword argument, will be True if the 'checkfirst' flag was set during "
"the call to ``create()``, ``create_all()``, ``drop()``, ``drop_all()``."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:51
msgid "If the callable returns a true value, the DDL statement will be executed."
msgstr ""

#: of sqlalchemy.schema.DDLElement.execute_if:54
msgid ""
"any value which will be passed to the callable\\_ as the ``state`` "
"keyword argument."
msgstr ""

#: of sqlalchemy.schema.DDL:1
msgid "A literal DDL statement."
msgstr ""

#: of sqlalchemy.schema.DDL:3
msgid ""
"Specifies literal SQL DDL to be executed by the database.  DDL objects "
"function as DDL event listeners, and can be subscribed to those events "
"listed in :class:`.DDLEvents`, using either :class:`.Table` or "
":class:`.MetaData` objects as targets.   Basic templating support allows "
"a single DDL instance to handle repetitive tasks for multiple tables."
msgstr ""

#: of sqlalchemy.schema.DDL:9
msgid "Examples::"
msgstr ""

#: of sqlalchemy.schema.DDL:22
msgid ""
"When operating on Table events, the following ``statement`` string "
"substitions are available::"
msgstr ""

#: of sqlalchemy.schema.DDL:29
msgid ""
"The DDL's \"context\", if any, will be combined with the standard "
"substitutions noted above.  Keys present in the context will override the"
" standard substitutions."
msgstr ""

#: of sqlalchemy.schema._CreateDropBase:1
msgid ""
"Base class for DDL constructs that represent CREATE and DROP or "
"equivalents."
msgstr ""

#: of sqlalchemy.schema._CreateDropBase:4
msgid ""
"The common theme of _CreateDropBase is a single ``element`` attribute "
"which refers to the element to be created or dropped."
msgstr ""

#: of sqlalchemy.schema.CreateTable:1
msgid "Represent a CREATE TABLE statement."
msgstr ""

#: of sqlalchemy.schema.DropTable:1
msgid "Represent a DROP TABLE statement."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:1
msgid ""
"Represent a :class:`.Column` as rendered in a CREATE TABLE statement, via"
" the :class:`.CreateTable` construct."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:4
msgid ""
"This is provided to support custom column DDL within the generation of "
"CREATE TABLE statements, by using the compiler extension documented in "
":ref:`sqlalchemy.ext.compiler_toplevel` to extend :class:`.CreateColumn`."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:9
msgid ""
"Typical integration is to examine the incoming :class:`.Column` object, "
"and to redirect compilation if a particular flag or condition is found::"
msgstr ""

#: of sqlalchemy.schema.CreateColumn:40
msgid "The above construct can be applied to a :class:`.Table` as follows::"
msgstr ""

#: of sqlalchemy.schema.CreateColumn:55
msgid ""
"Above, the directives we've added to the :attr:`.Column.info` collection "
"will be detected by our custom compilation scheme::"
msgstr ""

#: of sqlalchemy.schema.CreateColumn:65
msgid ""
"The :class:`.CreateColumn` construct can also be used to skip certain "
"columns when producing a ``CREATE TABLE``.  This is accomplished by "
"creating a compilation rule that conditionally returns ``None``. This is "
"essentially how to produce the same effect as using the ``system=True`` "
"argument on :class:`.Column`, which marks a column as an implicitly-"
"present \"system\" column."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:72
msgid ""
"For example, suppose we wish to produce a :class:`.Table` which skips "
"rendering of the PostgreSQL ``xmin`` column against the PostgreSQL "
"backend, but on other backends does render it, in anticipation of a "
"triggered rule.  A conditional compilation rule could skip this name only"
" on PostgreSQL::"
msgstr ""

#: of sqlalchemy.schema.CreateColumn:93
msgid ""
"Above, a :class:`.CreateTable` construct will generate a ``CREATE TABLE``"
" which only includes the ``id`` column in the string; the ``xmin`` column"
" will be omitted, but only against the PostgreSQL backend."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:97
msgid ""
"The :class:`.CreateColumn` construct supports skipping of columns by "
"returning ``None`` from a custom compilation rule."
msgstr ""

#: of sqlalchemy.schema.CreateColumn:101
msgid ""
"The :class:`.CreateColumn` construct was added to support custom column "
"creation styles."
msgstr ""

#: of sqlalchemy.schema.CreateSequence:1
msgid "Represent a CREATE SEQUENCE statement."
msgstr ""

#: of sqlalchemy.schema.DropSequence:1
msgid "Represent a DROP SEQUENCE statement."
msgstr ""

#: of sqlalchemy.schema.CreateIndex:1
msgid "Represent a CREATE INDEX statement."
msgstr ""

#: of sqlalchemy.schema.DropIndex:1
msgid "Represent a DROP INDEX statement."
msgstr ""

#: of sqlalchemy.schema.AddConstraint:1
msgid "Represent an ALTER TABLE ADD CONSTRAINT statement."
msgstr ""

#: of sqlalchemy.schema.DropConstraint:1
msgid "Represent an ALTER TABLE DROP CONSTRAINT statement."
msgstr ""

#: of sqlalchemy.schema.CreateSchema:1
msgid "Represent a CREATE SCHEMA statement."
msgstr ""

#: of sqlalchemy.schema.CreateSchema:5 sqlalchemy.schema.DropSchema:3
msgid "The argument here is the string name of the schema."
msgstr ""

#: of sqlalchemy.schema.DropSchema:1
msgid "Represent a DROP SCHEMA statement."
msgstr ""

