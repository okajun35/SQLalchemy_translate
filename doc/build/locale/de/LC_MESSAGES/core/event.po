# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/event.rst:4
msgid "Events"
msgstr ""

#: ../../core/event.rst:6
msgid ""
"SQLAlchemy includes an event API which publishes a wide variety of hooks "
"into the internals of both SQLAlchemy Core and ORM."
msgstr ""

#: ../../core/event.rst:9
msgid ""
"The system supersedes the previous system of \"extension\", \"proxy\", "
"and \"listener\" classes."
msgstr ""

#: ../../core/event.rst:14
msgid "Event Registration"
msgstr ""

#: ../../core/event.rst:16
msgid ""
"Subscribing to an event occurs through a single API point, the "
":func:`.listen` function, or alternatively the :func:`.listens_for` "
"decorator.   These functions accept a target, a string identifier which "
"identifies the event to be intercepted, and a user-defined listening "
"function.  Additional positional and keyword arguments to these two "
"functions may be supported by specific types of events, which may specify"
" alternate interfaces for the given event function, or provide "
"instructions regarding secondary event targets based on the given target."
msgstr ""

#: ../../core/event.rst:24
msgid ""
"The name of an event and the argument signature of a corresponding "
"listener function is derived from a class bound specification method, "
"which exists bound to a marker class that's described in the "
"documentation. For example, the documentation for "
":meth:`.PoolEvents.connect` indicates that the event name is "
"``\"connect\"`` and that a user-defined listener function should receive "
"two positional arguments::"
msgstr ""

#: ../../core/event.rst:37
msgid "To listen with the :func:`.listens_for` decorator looks like::"
msgstr ""

#: ../../core/event.rst:47
msgid "Named Argument Styles"
msgstr ""

#: ../../core/event.rst:49
msgid ""
"There are some varieties of argument styles which can be accepted by "
"listener functions.  Taking the example of :meth:`.PoolEvents.connect`, "
"this function is documented as receiving ``dbapi_connection`` and "
"``connection_record`` arguments. We can opt to receive these arguments by"
" name, by establishing a listener function that accepts ``**keyword`` "
"arguments, by passing ``named=True`` to either :func:`.listen` or "
":func:`.listens_for`::"
msgstr ""

#: ../../core/event.rst:63
msgid ""
"When using named argument passing, the names listed in the function "
"argument specification will be used as keys in the dictionary."
msgstr ""

#: ../../core/event.rst:66
msgid ""
"Named style passes all arguments by name regardless of the function "
"signature, so specific arguments may be listed as well, in any order, as "
"long as the names match up::"
msgstr ""

#: ../../core/event.rst:78
msgid ""
"Above, the presence of ``**kw`` tells :func:`.listens_for` that arguments"
" should be passed to the function by name, rather than positionally."
msgstr ""

#: ../../core/event.rst:81
msgid "Added optional ``named`` argument dispatch to event calling."
msgstr ""

#: ../../core/event.rst:85
msgid "Targets"
msgstr ""

#: ../../core/event.rst:87
msgid ""
"The :func:`.listen` function is very flexible regarding targets.  It "
"generally accepts classes, instances of those classes, and related "
"classes or objects from which the appropriate target can be derived. For "
"example, the above mentioned ``\"connect\"`` event accepts "
":class:`.Engine` classes and objects as well as :class:`.Pool` classes "
"and objects::"
msgstr ""

#: ../../core/event.rst:120
msgid "Modifiers"
msgstr ""

#: ../../core/event.rst:122
msgid ""
"Some listeners allow modifiers to be passed to :func:`.listen`.  These "
"modifiers sometimes provide alternate calling signatures for listeners.  "
"Such as with ORM events, some event listeners can have a return value "
"which modifies the subsequent handling.   By default, no listener ever "
"requires a return value, but by passing ``retval=True`` this value can be"
" supported::"
msgstr ""

#: ../../core/event.rst:139
msgid "Event Reference"
msgstr ""

#: ../../core/event.rst:141
msgid ""
"Both SQLAlchemy Core and SQLAlchemy ORM feature a wide variety of event "
"hooks:"
msgstr ""

#: ../../core/event.rst:143
msgid ""
"**Core Events** - these are described in :ref:`core_event_toplevel` and "
"include event hooks specific to connection pool lifecycle, SQL statement "
"execution, transaction lifecycle, and schema creation and teardown."
msgstr ""

#: ../../core/event.rst:148
msgid ""
"**ORM Events** - these are described in :ref:`orm_event_toplevel`, and "
"include event hooks specific to class and attribute instrumentation, "
"object initialization hooks, attribute on-change hooks, session state, "
"flush, and commit hooks, mapper initialization, object/result population,"
" and per-instance persistence hooks."
msgstr ""

#: ../../core/event.rst:156
msgid "API Reference"
msgstr ""

#: of sqlalchemy.event.listen:1
msgid "Register a listener function for the given target."
msgstr ""

#: of sqlalchemy.event.listen:3 sqlalchemy.event.listens_for:3
#: sqlalchemy.event.remove:8
msgid "e.g.::"
msgstr ""

#: of sqlalchemy.event.listen:19 sqlalchemy.event.listens_for:15
msgid ""
"A given function can also be invoked for only the first invocation of the"
" event using the ``once`` argument::"
msgstr ""

#: of sqlalchemy.event.listen:27 sqlalchemy.event.listens_for:23
msgid ""
"Added ``once=True`` to :func:`.event.listen` and "
":func:`.event.listens_for`."
msgstr ""

#: of sqlalchemy.event.listen:32
msgid ""
"The :func:`.listen` function cannot be called at the same time that the "
"target event is being run.   This has implications for thread safety, and"
" also means an event cannot be added from inside the listener function "
"for itself.  The list of events to be run are present inside of a mutable"
" collection that can't be changed during iteration."
msgstr ""

#: of sqlalchemy.event.listen:39 sqlalchemy.event.remove:33
msgid ""
"Event registration and removal is not intended to be a \"high velocity\" "
"operation; it is a configurational operation.  For systems that need to "
"quickly associate and deassociate with events at high scale, use a "
"mutable structure that is handled from inside of a single listener."
msgstr ""

#: of sqlalchemy.event.listen:45 sqlalchemy.event.remove:39
msgid ""
"- a ``collections.deque()`` object is now used as the container for the "
"list of events, which explicitly disallows collection mutation while the "
"collection is being iterated."
msgstr ""

#: of sqlalchemy.event.listen:52
msgid ":func:`.listens_for`"
msgstr ""

#: of sqlalchemy.event.listen:54
msgid ":func:`.remove`"
msgstr ""

#: of sqlalchemy.event.listens_for:1
msgid "Decorate a function as a listener for the given target + identifier."
msgstr ""

#: of sqlalchemy.event.listens_for:28
msgid ":func:`.listen` - general description of event listening"
msgstr ""

#: of sqlalchemy.event.remove:1
msgid "Remove an event listener."
msgstr ""

#: of sqlalchemy.event.remove:3
msgid ""
"The arguments here should match exactly those which were sent to "
":func:`.listen`; all the event registration which proceeded as a result "
"of this call will be reverted by calling :func:`.remove` with the same "
"arguments."
msgstr ""

#: of sqlalchemy.event.remove:18
msgid ""
"Above, the listener function associated with ``SomeMappedClass`` was also"
" propagated to subclasses of ``SomeMappedClass``; the :func:`.remove` "
"function will revert all of these operations."
msgstr ""

#: of sqlalchemy.event.remove:26
msgid ""
"The :func:`.remove` function cannot be called at the same time that the "
"target event is being run.   This has implications for thread safety, and"
" also means an event cannot be removed from inside the listener function "
"for itself.  The list of events to be run are present inside of a mutable"
" collection that can't be changed during iteration."
msgstr ""

#: of sqlalchemy.event.remove:46
msgid ":func:`.listen`"
msgstr ""

#: of sqlalchemy.event.contains:1
msgid "Return True if the given target/ident/fn is set up to listen."
msgstr ""

