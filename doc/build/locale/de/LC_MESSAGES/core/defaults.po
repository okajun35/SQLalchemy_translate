# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/defaults.rst:8
msgid "Column Insert/Update Defaults"
msgstr ""

#: ../../core/defaults.rst:10
msgid ""
"SQLAlchemy provides a very rich featureset regarding column level events "
"which take place during INSERT and UPDATE statements. Options include:"
msgstr ""

#: ../../core/defaults.rst:13
msgid "Scalar values used as defaults during INSERT and UPDATE operations"
msgstr ""

#: ../../core/defaults.rst:14
msgid "Python functions which execute upon INSERT and UPDATE operations"
msgstr ""

#: ../../core/defaults.rst:15
msgid ""
"SQL expressions which are embedded in INSERT statements (or in some cases"
" execute beforehand)"
msgstr ""

#: ../../core/defaults.rst:16
msgid "SQL expressions which are embedded in UPDATE statements"
msgstr ""

#: ../../core/defaults.rst:17
msgid "Server side default values used during INSERT"
msgstr ""

#: ../../core/defaults.rst:18
msgid "Markers for server-side triggers used during UPDATE"
msgstr ""

#: ../../core/defaults.rst:20
msgid ""
"The general rule for all insert/update defaults is that they only take "
"effect if no value for a particular column is passed as an ``execute()`` "
"parameter; otherwise, the given value is used."
msgstr ""

#: ../../core/defaults.rst:25
msgid "Scalar Defaults"
msgstr ""

#: ../../core/defaults.rst:27
msgid ""
"The simplest kind of default is a scalar value used as the default value "
"of a column::"
msgstr ""

#: ../../core/defaults.rst:33
msgid ""
"Above, the value \"12\" will be bound as the column value during an "
"INSERT if no other value is supplied."
msgstr ""

#: ../../core/defaults.rst:36
msgid ""
"A scalar value may also be associated with an UPDATE statement, though "
"this is not very common (as UPDATE statements are usually looking for "
"dynamic defaults)::"
msgstr ""

#: ../../core/defaults.rst:46
msgid "Python-Executed Functions"
msgstr ""

#: ../../core/defaults.rst:48
msgid ""
"The :paramref:`.Column.default` and :paramref:`.Column.onupdate` keyword "
"arguments also accept Python functions. These functions are invoked at "
"the time of insert or update if no other value for that column is "
"supplied, and the value returned is used for the column's value. Below "
"illustrates a crude \"sequence\" that assigns an incrementing counter to "
"a primary key column::"
msgstr ""

#: ../../core/defaults.rst:65
msgid ""
"It should be noted that for real \"incrementing sequence\" behavior, the "
"built-in capabilities of the database should normally be used, which may "
"include sequence objects or other autoincrementing capabilities. For "
"primary key columns, SQLAlchemy will in most cases use these capabilities"
" automatically. See the API documentation for "
":class:`~sqlalchemy.schema.Column` including the "
":paramref:`.Column.autoincrement` flag, as well as the section on "
":class:`~sqlalchemy.schema.Sequence` later in this chapter for background"
" on standard primary key generation techniques."
msgstr ""

#: ../../core/defaults.rst:74
msgid ""
"To illustrate onupdate, we assign the Python ``datetime`` function "
"``now`` to the :paramref:`.Column.onupdate` attribute::"
msgstr ""

#: ../../core/defaults.rst:86
msgid ""
"When an update statement executes and no value is passed for "
"``last_updated``, the ``datetime.datetime.now()`` Python function is "
"executed and its return value used as the value for ``last_updated``. "
"Notice that we provide ``now`` as the function itself without calling it "
"(i.e. there are no parenthesis following) - SQLAlchemy will execute the "
"function at the time the statement executes."
msgstr ""

#: ../../core/defaults.rst:96
msgid "Context-Sensitive Default Functions"
msgstr ""

#: ../../core/defaults.rst:98
msgid ""
"The Python functions used by :paramref:`.Column.default` and "
":paramref:`.Column.onupdate` may also make use of the current statement's"
" context in order to determine a value. The `context` of a statement is "
"an internal SQLAlchemy object which contains all information about the "
"statement being executed, including its source expression, the parameters"
" associated with it and the cursor. The typical use case for this context"
" with regards to default generation is to have access to the other values"
" being inserted or updated on the row. To access the context, provide a "
"function that accepts a single ``context`` argument::"
msgstr ""

#: ../../core/defaults.rst:116
msgid ""
"The above default generation function is applied so that it will execute "
"for all INSERT and UPDATE statements where a value for "
"``counter_plus_twelve`` was otherwise not provided, and the value will be"
" that of whatever value is present in the execution for the ``counter`` "
"column, plus the number 12."
msgstr ""

#: ../../core/defaults.rst:121
msgid ""
"For a single statement that is being executed using \"executemany\" "
"style, e.g. with multiple parameter sets passed to "
":meth:`.Connection.execute`, the user- defined function is called once "
"for each set of parameters. For the use case of a multi-valued "
":class:`.Insert` construct (e.g. with more than one VALUES clause set up "
"via the :meth:`.Insert.values` method), the user-defined function is also"
" called once for each set of parameters."
msgstr ""

#: ../../core/defaults.rst:128
msgid ""
"When the function is invoked, the special method "
":meth:`.DefaultExecutionContext.get_current_parameters` is available from"
" the context object (an subclass of :class:`.DefaultExecutionContext`).  "
"This method returns a dictionary of column-key to values that represents "
"the full set of values for the INSERT or UPDATE statement.   In the case "
"of a multi-valued INSERT construct, the subset of parameters that "
"corresponds to the individual VALUES clause is isolated from the full "
"parameter dictionary and returned alone."
msgstr ""

#: ../../core/defaults.rst:139
msgid ""
"Added :meth:`.DefaultExecutionContext.get_current_parameters` method, "
"which improves upon the still-present "
":attr:`.DefaultExecutionContext.current_parameters` attribute by offering"
" the service of organizing multiple VALUES clauses into individual "
"parameter dictionaries."
msgstr ""

#: ../../core/defaults.rst:146
msgid "Client-Invoked SQL Expressions"
msgstr ""

#: ../../core/defaults.rst:148
msgid ""
"The :paramref:`.Column.default` and :paramref:`.Column.onupdate` keywords"
" may also be passed SQL expressions, which are in most cases rendered "
"inline within the INSERT or UPDATE statement::"
msgstr ""

#: ../../core/defaults.rst:165
msgid ""
"Above, the ``create_date`` column will be populated with the result of "
"the ``now()`` SQL function (which, depending on backend, compiles into "
"``NOW()`` or ``CURRENT_TIMESTAMP`` in most cases) during an INSERT "
"statement, and the ``key`` column with the result of a SELECT subquery "
"from another table. The ``last_modified`` column will be populated with "
"the value of the SQL ``UTC_TIMESTAMP()`` MySQL function when an UPDATE "
"statement is emitted for this table."
msgstr ""

#: ../../core/defaults.rst:175
msgid ""
"When using SQL functions with the :attr:`.func` construct, we \"call\" "
"the named function, e.g. with parenthesis as in ``func.now()``.   This "
"differs from when we specify a Python callable as a default such as "
"``datetime.datetime``, where we pass the function itself, but we don't "
"invoke it ourselves.   In the case of a SQL function, invoking "
"``func.now()`` returns the SQL expression object that will render the "
"\"NOW\" function into the SQL being emitted."
msgstr ""

#: ../../core/defaults.rst:183
msgid ""
"Default and update SQL expressions specified by "
":paramref:`.Column.default` and :paramref:`.Column.onupdate` are invoked "
"explicitly by SQLAlchemy when an INSERT or UPDATE statement occurs, "
"typically rendered inline within the DML statement except in certain "
"cases listed below.   This is different than a \"server side\" default, "
"which is part of the table's DDL definition, e.g. as part of the \"CREATE"
" TABLE\" statement, which are likely more common.   For server side "
"defaults, see the next section :ref:`server_defaults`."
msgstr ""

#: ../../core/defaults.rst:191
msgid ""
"When a SQL expression indicated by :paramref:`.Column.default` is used "
"with primary key columns, there are some cases where SQLAlchemy must "
"\"pre-execute\" the default generation SQL function, meaning it is "
"invoked in a separate SELECT statement, and the resulting value is passed"
" as a parameter to the INSERT. This only occurs for primary key columns "
"for an INSERT statement that is being asked to return this primary key "
"value, where RETURNING or ``cursor.lastrowid`` may not be used.   An "
":class:`.Insert` construct that specifies the "
":paramref:`~.expression.insert.inline` flag will always render default "
"expressions inline."
msgstr ""

#: ../../core/defaults.rst:201
msgid ""
"When the statement is executed with a single set of parameters (that is, "
"it is not an \"executemany\" style execution), the returned "
":class:`~sqlalchemy.engine.ResultProxy` will contain a collection "
"accessible via :meth:`.ResultProxy.postfetch_cols` which contains a list "
"of all :class:`~sqlalchemy.schema.Column` objects which had an inline-"
"executed default. Similarly, all parameters which were bound to the "
"statement, including all Python and SQL expressions which were pre-"
"executed, are present in the :meth:`.ResultProxy.last_inserted_params` or"
" :meth:`.ResultProxy.last_updated_params` collections on "
":class:`~sqlalchemy.engine.ResultProxy`. The "
":attr:`.ResultProxy.inserted_primary_key` collection contains a list of "
"primary key values for the row inserted (a list so that single-column and"
" composite- column primary keys are represented in the same format)."
msgstr ""

#: ../../core/defaults.rst:218
msgid "Server-invoked DDL-Explicit Default Expressions"
msgstr ""

#: ../../core/defaults.rst:220
msgid ""
"A variant on the SQL expression default is the "
":paramref:`.Column.server_default`, which gets placed in the CREATE TABLE"
" statement during a :meth:`.Table.create` operation:"
msgstr ""

#: ../../core/defaults.rst:231
msgid "A create call for the above table will produce::"
msgstr ""

#: ../../core/defaults.rst:239
msgid ""
"The above example illustrates the two typical use cases for "
":paramref:`.Column.server_default`, that of the SQL function (SYSDATE in "
"the above example) as well as a server-side constant value (the integer "
"\"0\" in the above example).  It is advisable to use the :func:`.text` "
"construct for any literal SQL values as opposed to passing the raw value,"
" as SQLAlchemy does not typically perform any quoting or escaping on "
"these values."
msgstr ""

#: ../../core/defaults.rst:246
msgid ""
"Like client-generated expressions, :paramref:`.Column.server_default` can"
" accommodate SQL expressions in general, however it is expected that "
"these will usually be simple functions and expressions, and not the more "
"complex cases like an embedded SELECT."
msgstr ""

#: ../../core/defaults.rst:254
msgid "Marking Implicitly Generated Values, timestamps, and Triggered Columns"
msgstr ""

#: ../../core/defaults.rst:256
msgid ""
"Columns which generate a new value on INSERT or UPDATE based on other "
"server-side database mechanisms, such as database-specific auto-"
"generating behaviors such as seen with TIMESTAMP columns on some "
"platforms, as well as custom triggers that invoke upon INSERT or UPDATE "
"to generate a new value, may be called out using :class:`.FetchedValue` "
"as a marker::"
msgstr ""

#: ../../core/defaults.rst:268
msgid ""
"The :class:`.FetchedValue` indicator does not affect the rendered DDL for"
" the CREATE TABLE.  Instead, it marks the column as one that will have a "
"new value populated by the database during the process of an INSERT or "
"UPDATE statement, and for supporting  databases may be used to indicate "
"that the column should be part of a RETURNING or OUTPUT clause for the "
"statement.    Tools such as the SQLAlchemy ORM then make use of this "
"marker in order to know how to get at the value of the column after such "
"an operation.   In particular, the :meth:`.ValuesBase.return_defaults` "
"method can be used with an :class:`.Insert` or :class:`.Update` construct"
" to indicate that these values should be returned."
msgstr ""

#: ../../core/defaults.rst:279
msgid ""
"For details on using :class:`.FetchedValue` with the ORM, see "
":ref:`orm_server_defaults`."
msgstr ""

#: ../../core/defaults.rst:284
msgid ":ref:`orm_server_defaults`"
msgstr ""

#: ../../core/defaults.rst:288
msgid "Defining Sequences"
msgstr ""

#: ../../core/defaults.rst:290
msgid ""
"SQLAlchemy represents database sequences using the "
":class:`~sqlalchemy.schema.Sequence` object, which is considered to be a "
"special case of \"column default\". It only has an effect on databases "
"which have explicit support for sequences, which currently includes "
"PostgreSQL, Oracle, and Firebird. The "
":class:`~sqlalchemy.schema.Sequence` object is otherwise ignored."
msgstr ""

#: ../../core/defaults.rst:297
msgid ""
"The :class:`~sqlalchemy.schema.Sequence` may be placed on any column as a"
" \"default\" generator to be used during INSERT operations, and can also "
"be configured to fire off during UPDATE operations if desired. It is most"
" commonly used in conjunction with a single integer primary key column::"
msgstr ""

#: ../../core/defaults.rst:311
msgid ""
"Where above, the table \"cartitems\" is associated with a sequence named "
"\"cart_id_seq\". When INSERT statements take place for \"cartitems\", and"
" no value is passed for the \"cart_id\" column, the \"cart_id_seq\" "
"sequence will be used to generate a value.   Typically, the sequence "
"function is embedded in the INSERT statement, which is combined with "
"RETURNING so that the newly generated value can be returned to the Python"
" code::"
msgstr ""

#: ../../core/defaults.rst:322
msgid ""
"When the :class:`~sqlalchemy.schema.Sequence` is associated with a "
":class:`.Column` as its **Python-side** default generator, the "
":class:`.Sequence` will also be subject to \"CREATE SEQUENCE\" and \"DROP"
" SEQUENCE\" DDL when similar DDL is emitted for the owning "
":class:`.Table`. This is a limited scope convenience feature that does "
"not accommodate for inheritance of other aspects of the "
":class:`.MetaData`, such as the default schema.  Therefore, it is best "
"practice that for a :class:`.Sequence` which is local to a certain "
":class:`.Column` / :class:`.Table`, that it be explicitly associated with"
" the :class:`.MetaData` using the :paramref:`.Sequence.metadata` "
"parameter.  See the section :ref:`sequence_metadata` for more background "
"on this."
msgstr ""

#: ../../core/defaults.rst:335
msgid "Associating a Sequence on a SERIAL column"
msgstr ""

#: ../../core/defaults.rst:337
msgid ""
"PostgreSQL's SERIAL datatype is an auto-incrementing type that implies "
"the implicit creation of a PostgreSQL sequence when CREATE TABLE is "
"emitted. If a :class:`.Column` specifies an explicit :class:`.Sequence` "
"object which also specifies a true value for the "
":paramref:`.Sequence.optional` boolean flag, the :class:`.Sequence` will "
"not take effect under PostgreSQL, and the SERIAL datatype will proceed "
"normally.   Instead, the :class:`.Sequence` will only take effect when "
"used against other sequence-supporting databases, currently Oracle and "
"Firebird."
msgstr ""

#: ../../core/defaults.rst:347
msgid "Executing a Sequence Standalone"
msgstr ""

#: ../../core/defaults.rst:349
msgid ""
"A SEQUENCE is a first class schema object in SQL and can be used to "
"generate values independently in the database.   If you have a "
":class:`.Sequence` object, it can be invoked with its \"next value\" "
"instruction by passing it directly to a SQL execution method::"
msgstr ""

#: ../../core/defaults.rst:358
msgid ""
"In order to embed the \"next value\" function of a :class:`.Sequence` "
"inside of a SQL statement like a SELECT or INSERT, use the "
":meth:`.Sequence.next_value` method, which will render at statement "
"compilation time a SQL function that is appropriate for the target "
"backend::"
msgstr ""

#: ../../core/defaults.rst:371
msgid "Associating a Sequence with the MetaData"
msgstr ""

#: ../../core/defaults.rst:373
msgid ""
"For many years, the SQLAlchemy documentation referred to the example of "
"associating a :class:`.Sequence` with a table as follows::"
msgstr ""

#: ../../core/defaults.rst:383
msgid ""
"While the above is a prominent idiomatic pattern, it is recommended that "
"the :class:`.Sequence` in most cases be explicitly associated with the "
":class:`.MetaData`, using the :paramref:`.Sequence.metadata` parameter::"
msgstr ""

#: ../../core/defaults.rst:396
msgid ""
"The :class:`.Sequence` object is a first class schema construct that can "
"exist independently of any table in a database, and can also be shared "
"among tables.   Therefore SQLAlchemy does not implicitly modify the "
":class:`.Sequence` when it is associated with a :class:`.Column` object "
"as either the Python-side or server-side default  generator.  While the "
"CREATE SEQUENCE / DROP SEQUENCE DDL is emitted for a  :class:`.Sequence` "
"defined as a Python side generator at the same time the table itself is "
"subject to CREATE or DROP, this is a convenience feature that does not "
"imply that the :class:`.Sequence` is fully associated with the "
":class:`.MetaData` object."
msgstr ""

#: ../../core/defaults.rst:406
msgid ""
"Explicitly associating the :class:`.Sequence` with :class:`.MetaData` "
"allows for the following behaviors:"
msgstr ""

#: ../../core/defaults.rst:409
msgid ""
"The :class:`.Sequence` will inherit the :paramref:`.MetaData.schema` "
"parameter specified to the target :class:`.MetaData`, which affects the "
"production of CREATE / DROP DDL, if any."
msgstr ""

#: ../../core/defaults.rst:413
msgid ""
"The :meth:`.Sequence.create` and :meth:`.Sequence.drop` methods "
"automatically use the engine bound to the :class:`.MetaData` object, if "
"any."
msgstr ""

#: ../../core/defaults.rst:417
msgid ""
"The :meth:`.MetaData.create_all` and :meth:`.MetaData.drop_all` methods "
"will emit CREATE / DROP for this :class:`.Sequence`, even if the "
":class:`.Sequence` is not associated with any :class:`.Table` / "
":class:`.Column` that's a member of this :class:`.MetaData`."
msgstr ""

#: ../../core/defaults.rst:423
msgid ""
"Since the vast majority of cases that deal with :class:`.Sequence` expect"
" that :class:`.Sequence` to be fully \"owned\" by the assocated "
":class:`.Table` and that options like default schema are propagated, "
"setting the :paramref:`.Sequence.metadata` parameter should be considered"
" a best practice."
msgstr ""

#: ../../core/defaults.rst:429
msgid "Associating a Sequence as the Server Side Default"
msgstr ""

#: ../../core/defaults.rst:431
msgid ""
"The following technique is known to work only with the Postgresql "
"database.  It does not work with Oracle."
msgstr ""

#: ../../core/defaults.rst:434
msgid ""
"The preceding sections illustrate how to associate a :class:`.Sequence` "
"with a :class:`.Column` as the **Python side default generator**::"
msgstr ""

#: ../../core/defaults.rst:441
msgid ""
"In the above case, the :class:`.Sequence` will automatically be subject "
"to CREATE SEQUENCE / DROP SEQUENCE DDL when the related :class:`.Table` "
"is subject to CREATE / DROP.  However, the sequence will **not** be "
"present as the server-side default for the column when CREATE TABLE is "
"emitted."
msgstr ""

#: ../../core/defaults.rst:446
msgid ""
"If we want the sequence to be used as a server-side default, meaning it "
"takes place even if we emit INSERT commands to the table from the SQL "
"command line, we can use the :paramref:`.Column.server_default` parameter"
" in conjunction with the value-generation function of the sequence, "
"available from the :meth:`.Sequence.next_value` method.  Below we "
"illustrate the same :class:`.Sequence` being associated with the "
":class:`.Column` both as the Python-side default generator as well as the"
" server-side default generator::"
msgstr ""

#: ../../core/defaults.rst:464
msgid "or with the ORM::"
msgstr ""

#: ../../core/defaults.rst:476
msgid ""
"When the \"CREATE TABLE\" statement is emitted, on PostgreSQL it would be"
" emitted as::"
msgstr ""

#: ../../core/defaults.rst:486
msgid ""
"Placement of the :class:`.Sequence` in both the Python-side and server-"
"side default generation contexts ensures that the \"primary key fetch\" "
"logic works in all cases.  Typically, sequence-enabled databases also "
"support RETURNING for INSERT statements, which is used automatically by "
"SQLAlchemy when emitting this statement.  However if RETURNING is not "
"used for a particular insert, then SQLAlchemy would prefer to \"pre-"
"execute\" the sequence outside of the INSERT statement itself, which only"
" works if the sequence is included as the Python-side default generator "
"function."
msgstr ""

#: ../../core/defaults.rst:495
msgid ""
"The example also associates the :class:`.Sequence` with the enclosing "
":class:`.MetaData` directly, which again ensures that the "
":class:`.Sequence` is fully associated with the parameters of the "
":class:`.MetaData` collection including the default schema, if any."
msgstr ""

#: ../../core/defaults.rst:502
msgid ":ref:`postgresql_sequences` - in the PostgreSQL dialect documentation"
msgstr ""

#: ../../core/defaults.rst:504
msgid ":ref:`oracle_returning` - in the Oracle dialect documentation"
msgstr ""

#: ../../core/defaults.rst:507
msgid "Default Objects API"
msgstr ""

#: of sqlalchemy.schema.ColumnDefault:1
msgid "A plain default value on a column."
msgstr ""

#: of sqlalchemy.schema.ColumnDefault:3
msgid "This could correspond to a constant, a callable function, or a SQL clause."
msgstr ""

#: of sqlalchemy.schema.ColumnDefault:6
msgid ""
":class:`.ColumnDefault` is generated automatically whenever the "
"``default``, ``onupdate`` arguments of :class:`.Column` are used.  A "
":class:`.ColumnDefault` can be passed positionally as well."
msgstr ""

#: of sqlalchemy.schema.ColumnDefault:11 sqlalchemy.schema.DefaultClause:12
msgid "For example, the following::"
msgstr ""

#: of sqlalchemy.schema.ColumnDefault:15 sqlalchemy.schema.DefaultClause:16
msgid "Is equivalent to::"
msgstr ""

#: of sqlalchemy.schema.DefaultClause:1 sqlalchemy.schema.PassiveDefault:1
msgid "A DDL-specified DEFAULT column value."
msgstr ""

#: of sqlalchemy.schema.DefaultClause:3
msgid ""
":class:`.DefaultClause` is a :class:`.FetchedValue` that also generates a"
" \"DEFAULT\" clause when \"CREATE TABLE\" is emitted."
msgstr ""

#: of sqlalchemy.schema.DefaultClause:7
msgid ""
":class:`.DefaultClause` is generated automatically whenever the "
"``server_default``, ``server_onupdate`` arguments of :class:`.Column` are"
" used.  A :class:`.DefaultClause` can be passed positionally as well."
msgstr ""

#: of sqlalchemy.schema.DefaultGenerator:1
msgid "Base class for column *default* values."
msgstr ""

#: of sqlalchemy.schema.FetchedValue:1
msgid "A marker for a transparent database-side default."
msgstr ""

#: of sqlalchemy.schema.FetchedValue:3
msgid ""
"Use :class:`.FetchedValue` when the database is configured to provide "
"some automatic default for a column."
msgstr ""

#: of sqlalchemy.schema.FetchedValue:6
msgid "E.g.::"
msgstr ""

#: of sqlalchemy.schema.FetchedValue:10
msgid ""
"Would indicate that some trigger or default generator will create a new "
"value for the ``foo`` column during an INSERT."
msgstr ""

#: of sqlalchemy.schema.FetchedValue:16
msgid ":ref:`triggered_columns`"
msgstr ""

#: of sqlalchemy.schema.PassiveDefault:3
msgid ":class:`.PassiveDefault` is deprecated. Use :class:`.DefaultClause`."
msgstr ""

#: of sqlalchemy.schema.Sequence:1
msgid "Represents a named database sequence."
msgstr ""

#: of sqlalchemy.schema.Sequence:3
msgid ""
"The :class:`.Sequence` object represents the name and configurational "
"parameters of a database sequence.   It also represents a construct that "
"can be \"executed\" by a SQLAlchemy :class:`.Engine` or "
":class:`.Connection`, rendering the appropriate \"next value\" function "
"for the target database and returning a result."
msgstr ""

#: of sqlalchemy.schema.Sequence:9
msgid "The :class:`.Sequence` is typically associated with a primary key column::"
msgstr ""

#: of sqlalchemy.schema.Sequence:17
msgid ""
"When CREATE TABLE is emitted for the above :class:`.Table`, if the target"
" platform supports sequences, a CREATE SEQUENCE statement will be emitted"
" as well.   For platforms that don't support sequences, the "
":class:`.Sequence` construct is ignored."
msgstr ""

#: of sqlalchemy.schema.Sequence:24
msgid ":class:`.CreateSequence`"
msgstr ""

#: of sqlalchemy.schema.Sequence:26
msgid ":class:`.DropSequence`"
msgstr ""

#: of sqlalchemy.schema.Sequence.create:1
msgid "Creates this sequence in the database."
msgstr ""

#: of sqlalchemy.schema.Sequence.drop:1
msgid "Drops this sequence from the database."
msgstr ""

#: of sqlalchemy.schema.Sequence.next_value:1
msgid ""
"Return a :class:`.next_value` function element which will render the "
"appropriate increment function for this :class:`.Sequence` within any SQL"
" expression."
msgstr ""

