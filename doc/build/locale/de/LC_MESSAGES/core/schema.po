# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../core/schema.rst:5
msgid "Schema Definition Language"
msgstr ""

#: ../../core/schema.rst:9
msgid ""
"This section references SQLAlchemy **schema metadata**, a comprehensive "
"system of describing and inspecting database schemas."
msgstr ""

#: ../../core/schema.rst:12
msgid ""
"The core of SQLAlchemy's query and object mapping operations are "
"supported by *database metadata*, which is comprised of Python objects "
"that describe tables and other schema-level objects. These objects are at"
" the core of three major types of operations - issuing CREATE and DROP "
"statements (known as *DDL*), constructing SQL queries, and expressing "
"information about structures that already exist within the database."
msgstr ""

#: ../../core/schema.rst:19
msgid ""
"Database metadata can be expressed by explicitly naming the various "
"components and their properties, using constructs such as "
":class:`~sqlalchemy.schema.Table`, :class:`~sqlalchemy.schema.Column`, "
":class:`~sqlalchemy.schema.ForeignKey` and "
":class:`~sqlalchemy.schema.Sequence`, all of which are imported from the "
"``sqlalchemy.schema`` package. It can also be generated by SQLAlchemy "
"using a process called *reflection*, which means you start with a single "
"object such as :class:`~sqlalchemy.schema.Table`, assign it a name, and "
"then instruct SQLAlchemy to load all the additional information related "
"to that name from a particular engine source."
msgstr ""

#: ../../core/schema.rst:30
msgid ""
"A key feature of SQLAlchemy's database metadata constructs is that they "
"are designed to be used in a *declarative* style which closely resembles "
"that of real DDL. They are therefore most intuitive to those who have "
"some background in creating real schema generation scripts."
msgstr ""

