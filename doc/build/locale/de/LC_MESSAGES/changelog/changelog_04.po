# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../changelog/changelog_04.rst:4
msgid "0.4 Changelog"
msgstr ""

#: ../../changelog/changelog_04.rst:15
msgid ""
"Fixed bug regarding inherit_condition passed with \"A=B\" versus \"B=A\" "
"leading to errors"
msgstr ""

#: ../../changelog/changelog_04.rst:22
msgid ""
"Changes made to new, dirty and deleted collections in "
"SessionExtension.before_flush() will take effect for that flush."
msgstr ""

#: ../../changelog/changelog_04.rst:31
msgid ""
"Added label() method to InstrumentedAttribute to establish forwards "
"compatibility with 0.5."
msgstr ""

#: ../../changelog/changelog_04.rst:38
msgid ""
"column.in_(someselect) can now be used as a columns-clause expression "
"without the subquery bleeding into the FROM clause"
msgstr ""

#: ../../changelog/changelog_04.rst:46
msgid "Added MSMediumInteger type."
msgstr ""

#: ../../changelog/changelog_04.rst:52
msgid "Supplied a custom strftime() function which handles dates before 1900."
msgstr ""

#: ../../changelog/changelog_04.rst:59
msgid ""
"String's (and Unicode's, UnicodeText's, etc.) convert_unicode logic "
"disabled in the sqlite dialect, to adjust for pysqlite 2.5.0's new "
"requirement that only Python unicode objects are accepted; "
"http://itsystementwicklung.de/pipermail/list-"
"pysqlite/2008-March/000018.html"
msgstr ""

#: ../../changelog/changelog_04.rst:69
msgid "has_sequence() now takes schema name into account"
msgstr ""

#: ../../changelog/changelog_04.rst:75
msgid "added BFILE to the list of reflected types"
msgstr ""

#: ../../changelog/changelog_04.rst:85
msgid ""
"Added \"add()\" and \"add_all()\" to scoped_session methods.  Workaround "
"for 0.4.7::"
msgstr ""

#: ../../changelog/changelog_04.rst:96
msgid ""
"Fixed non-2.3 compatible usage of set() and generator expression within "
"relation()."
msgstr ""

#: ../../changelog/changelog_04.rst:107
msgid ""
"The contains() operator when used with many-to-many will alias() the "
"secondary (association) table so that multiple contains() calls will not "
"conflict with each other"
msgstr ""

#: ../../changelog/changelog_04.rst:116
msgid ""
"fixed bug preventing merge() from functioning in conjunction with a "
"comparable_property()"
msgstr ""

#: ../../changelog/changelog_04.rst:123
msgid ""
"the enable_typechecks=False setting on relation() now only allows "
"subtypes with inheriting mappers. Totally unrelated types, or subtypes "
"not set up with mapper inheritance against the target mapper are still "
"not allowed."
msgstr ""

#: ../../changelog/changelog_04.rst:133
msgid ""
"Added is_active flag to Sessions to detect when a transaction is in "
"progress.  This flag is always True with a \"transactional\" (in 0.5 a "
"non-\"autocommit\") Session."
msgstr ""

#: ../../changelog/changelog_04.rst:142
msgid ""
"Fixed bug when calling select([literal('foo')]) or "
"select([bindparam('foo')])."
msgstr ""

#: ../../changelog/changelog_04.rst:149
msgid ""
"create_all(), drop_all(), create(), drop() all raise an error if the "
"table name or schema name contains more characters than that dialect's "
"configured character limit.  Some DB's can handle too-long table names "
"during usage, and SQLA can handle this as well. But various reflection/ "
"checkfirst-during-create scenarios fail since we are looking for the name"
" within the DB's catalog tables."
msgstr ""

#: ../../changelog/changelog_04.rst:162
msgid ""
"The index name generated when you say \"index=True\" on a Column is "
"truncated to the length appropriate for the dialect. Additionally, an "
"Index with a too- long name cannot be explicitly dropped with "
"Index.drop(), similar to."
msgstr ""

#: ../../changelog/changelog_04.rst:185
msgid "Added 'CALL' to the list of SQL keywords which return result rows."
msgstr ""

#: ../../changelog/changelog_04.rst:192
msgid ""
"Oracle get_default_schema_name() \"normalizes\" the name before "
"returning, meaning it returns a lower-case name when the identifier is "
"detected as case insensitive."
msgstr ""

#: ../../changelog/changelog_04.rst:200
msgid ""
"creating/dropping tables takes schema name into account when searching "
"for the existing table, so that tables in other owner namespaces with the"
" same name do not conflict"
msgstr ""

#: ../../changelog/changelog_04.rst:209
msgid ""
"Cursors now have \"arraysize\" set to 50 by default on them, the value of"
" which is configurable using the \"arraysize\" argument to "
"create_engine() with the Oracle dialect.  This to account for cx_oracle's"
" default setting of \"1\", which has the effect of many round trips being"
" sent to Oracle.  This actually works well in conjunction with BLOB/CLOB-"
"bound cursors, of which there are any number available but only for the "
"life of that row request (so BufferedColumnRow is still needed, but less "
"so)."
msgstr ""

#: ../../changelog/changelog_04.rst:227
msgid "sqlite"
msgstr ""

#: ../../changelog/changelog_04.rst:225
msgid ""
"add SLFloat type, which matches the SQLite REAL type affinity.  "
"Previously, only SLNumeric was provided which fulfills NUMERIC affinity, "
"but that's not the same as REAL."
msgstr ""

#: ../../changelog/changelog_04.rst:172
msgid "Repaired server_side_cursors to properly detect text() clauses."
msgstr ""

#: ../../changelog/changelog_04.rst:179
msgid "Added PGCidr type."
msgstr ""

#: ../../changelog/changelog_04.rst:238
msgid ""
"Fix to the recent relation() refactoring which fixes exotic viewonly "
"relations which join between local and remote table multiple times, with "
"a common column shared between the joins."
msgstr ""

#: ../../changelog/changelog_04.rst:247 ../../changelog/changelog_04.rst:309
msgid ""
"Also re-established viewonly relation() configurations that join across "
"multiple tables."
msgstr ""

#: ../../changelog/changelog_04.rst:254
msgid ""
"Added experimental relation() flag to help with primaryjoins across "
"functions, etc., _local_remote_pairs=[tuples].  This complements a "
"complex primaryjoin condition allowing you to provide the individual "
"column pairs which comprise the relation's local and remote sides.  Also "
"improved lazy load SQL generation to handle placing bind params inside of"
" functions and other expressions.  (partial progress towards)"
msgstr ""

#: ../../changelog/changelog_04.rst:268
msgid ""
"repaired single table inheritance such that you can single-table inherit "
"from a joined-table inherting mapper without issue."
msgstr ""

#: ../../changelog/changelog_04.rst:276
msgid ""
"Fixed \"concatenate tuple\" bug which could occur with Query.order_by() "
"if clause adaption had taken place."
msgstr ""

#: ../../changelog/changelog_04.rst:283
msgid ""
"Removed ancient assertion that mapped selectables require \"alias names\""
" - the mapper creates its own alias now if none is present.  Though in "
"this case you need to use the class, not the mapped selectable, as the "
"source of column attributes - so a warning is still issued."
msgstr ""

#: ../../changelog/changelog_04.rst:293
msgid ""
"fixes to the \"exists\" function involving inheritance (any(), has(), "
"~contains()); the full target join will be rendered into the EXISTS "
"clause for relations that link to subclasses."
msgstr ""

#: ../../changelog/changelog_04.rst:301
msgid ""
"restored usage of append_result() extension method for primary query "
"rows, when the extension is present and only a single- entity result is "
"being returned."
msgstr ""

#: ../../changelog/changelog_04.rst:316
msgid ""
"removed ancient assertion that mapped selectables require \"alias names\""
" - the mapper creates its own alias now if none is present.  Though in "
"this case you need to use the class, not the mapped selectable, as the "
"source of column attributes - so a warning is still issued."
msgstr ""

#: ../../changelog/changelog_04.rst:326
msgid ""
"refined mapper._save_obj() which was unnecessarily calling __ne__() on "
"scalar values during flush"
msgstr ""

#: ../../changelog/changelog_04.rst:333
msgid ""
"added a feature to eager loading whereby subqueries set as "
"column_property() with explicit label names (which is not necessary, btw)"
" will have the label anonymized when the instance is part of the eager "
"join, to prevent conflicts with a subquery or column of the same name on "
"the parent object."
msgstr ""

#: ../../changelog/changelog_04.rst:344
msgid ""
"set-based collections \\|=, -=, ^= and &= are stricter about their "
"operands and only operate on sets, frozensets or subclasses of the "
"collection type. Previously, they would accept any duck-typed set."
msgstr ""

#: ../../changelog/changelog_04.rst:353
msgid ""
"added an example dynamic_dict/dynamic_dict.py, illustrating a simple way "
"to place dictionary behavior on top of a dynamic_loader."
msgstr ""

#: ../../changelog/changelog_04.rst:378
msgid ""
"Added COLLATE support via the .collate(<collation>) expression operator "
"and collate(<expr>, <collation>) sql function."
msgstr ""

#: ../../changelog/changelog_04.rst:386
msgid ""
"Fixed bug with union() when applied to non-Table connected select "
"statements"
msgstr ""

#: ../../changelog/changelog_04.rst:393
msgid ""
"improved behavior of text() expressions when used as FROM clauses, such "
"as select().select_from(text(\"sometext\"))"
msgstr ""

#: ../../changelog/changelog_04.rst:400
msgid ""
"Column.copy() respects the value of \"autoincrement\", fixes usage with "
"Migrate"
msgstr ""

#: ../../changelog/changelog_04.rst:433
msgid ""
"Added \"odbc_autotranslate\" parameter to engine / dburi parameters. Any "
"given string will be passed through to the ODBC connection string as:"
msgstr ""

#: ../../changelog/changelog_04.rst:437
#, python-format
msgid "\"AutoTranslate=%s\" % odbc_autotranslate"
msgstr ""

#: ../../changelog/changelog_04.rst:443
msgid ""
"Added \"odbc_options\" parameter to engine / dburi parameters. The given "
"string is simply appended to the SQLAlchemy-generated odbc connection "
"string."
msgstr ""

#: ../../changelog/changelog_04.rst:447
msgid ""
"This should obviate the need of adding a myriad of ODBC options in the "
"future."
msgstr ""

#: ../../changelog/changelog_04.rst:454
msgid "Handle the \"SUBSTRING(:string FROM :start FOR :length)\" builtin."
msgstr ""

#: ../../changelog/changelog_04.rst:361
msgid ""
"Joined table inheritance mappers use a slightly relaxed function to "
"create the \"inherit condition\" to the parent table, so that other "
"foreign keys to not-yet-declared Table objects don't trigger an error."
msgstr ""

#: ../../changelog/changelog_04.rst:370
msgid ""
"fixed reentrant mapper compile hang when a declared attribute is used "
"within ForeignKey, ie. ForeignKey(MyOtherClass.someattribute)"
msgstr ""

#: ../../changelog/changelog_04.rst:407
msgid ""
"Pool listeners can now be provided as a dictionary of callables or a "
"(possibly partial) duck-type of PoolListener, your choice."
msgstr ""

#: ../../changelog/changelog_04.rst:415
msgid ""
"added \"rollback_returned\" option to Pool which will disable the "
"rollback() issued when connections are returned.  This flag is only safe "
"to use with a database which does not support transactions (i.e. "
"MySQL/MyISAM)."
msgstr ""

#: ../../changelog/changelog_04.rst:424
msgid ""
"set-based association proxies \\|=, -=, ^= and &= are stricter about "
"their operands and only operate on sets, frozensets or other association "
"proxies. Previously, they would accept any duck-typed set."
msgstr ""

#: ../../changelog/changelog_04.rst:465
msgid ""
"A small change in behavior to session.merge() - existing objects are "
"checked for based on primary key attributes, not necessarily "
"_instance_key.  So the widely requested capability, that:"
msgstr ""

#: ../../changelog/changelog_04.rst:470
msgid "x = MyObject(id=1) x = sess.merge(x)"
msgstr ""

#: ../../changelog/changelog_04.rst:473
msgid ""
"will in fact load MyObject with id #1 from the database if present, is "
"now available.  merge() still copies the state of the given object to the"
" persistent one, so an example like the above would typically have copied"
" \"None\" from all attributes of \"x\" onto the persistent copy.  These "
"can be reverted using session.expire(x)."
msgstr ""

#: ../../changelog/changelog_04.rst:484
msgid ""
"Also fixed behavior in merge() whereby collection elements present on the"
" destination but not the merged collection were not being removed from "
"the destination."
msgstr ""

#: ../../changelog/changelog_04.rst:492
msgid ""
"Added a more aggressive check for \"uncompiled mappers\", helps "
"particularly with declarative layer"
msgstr ""

#: ../../changelog/changelog_04.rst:499
msgid ""
"The methodology behind \"primaryjoin\"/\"secondaryjoin\" has been "
"refactored.  Behavior should be slightly more intelligent, primarily in "
"terms of error messages which have been pared down to be more readable.  "
"In a slight number of scenarios it can better resolve the correct foreign"
" key than before."
msgstr ""

#: ../../changelog/changelog_04.rst:510
msgid ""
"Added comparable_property(), adds query Comparator behavior to regular, "
"unmanaged Python properties"
msgstr ""

#: ../../changelog/changelog_04.rst:517
msgid ""
"the functionality of query.with_polymorphic() has been added to mapper() "
"as a configuration option."
msgstr ""

#: ../../changelog/changelog_04.rst:524
msgid "It's set via several forms:"
msgstr ""

#: ../../changelog/changelog_04.rst:521
msgid ""
"with_polymorphic='*' with_polymorphic=[mappers] with_polymorphic=('*', "
"selectable) with_polymorphic=([mappers], selectable)"
msgstr ""

#: ../../changelog/changelog_04.rst:526
msgid ""
"This controls the default polymorphic loading strategy for inherited "
"mappers. When a selectable is not given, outer joins are created for all "
"joined-table inheriting mappers requested. Note that the auto-create of "
"joins is not compatible with concrete table inheritance."
msgstr ""

#: ../../changelog/changelog_04.rst:532
msgid ""
"The existing select_table flag on mapper() is now deprecated and is "
"synonymous with with_polymorphic('*', select_table).  Note that the "
"underlying \"guts\" of select_table have been completely removed and "
"replaced with the newer, more flexible approach."
msgstr ""

#: ../../changelog/changelog_04.rst:539
msgid ""
"The new approach also automatically allows eager loads to work for "
"subclasses, if they are present, for example::"
msgstr ""

#: ../../changelog/changelog_04.rst:547
msgid ""
"to load Company objects, their employees, and the 'machines' collection "
"of employees who happen to be Engineers. A \"with_polymorphic\" Query "
"option should be introduced soon as well which would allow per-Query "
"control of with_polymorphic() on relations."
msgstr ""

#: ../../changelog/changelog_04.rst:557
msgid ""
"added two \"experimental\" features to Query, \"experimental\" in that "
"their specific name/behavior is not carved in stone just yet:  _values() "
"and _from_self().  We'd like feedback on these."
msgstr ""

#: ../../changelog/changelog_04.rst:562
msgid ""
"_values(\\*columns) is given a list of column expressions, and returns a "
"new Query that only returns those columns. When evaluated, the return "
"value is a list of tuples just like when using add_column() or "
"add_entity(), the only difference is that \"entity zero\", i.e. the "
"mapped class, is not included in the results. This means it finally makes"
" sense to use group_by() and having() on Query, which have been sitting "
"around uselessly until now."
msgstr ""

#: ../../changelog/changelog_04.rst:572
msgid ""
"A future change to this method may include that its ability to join, "
"filter and allow other options not related to a \"resultset\" are "
"removed, so the feedback we're looking for is how people want to use "
"_values()...i.e. at the very end, or do people prefer to continue "
"generating after it's called."
msgstr ""

#: ../../changelog/changelog_04.rst:579
msgid ""
"_from_self() compiles the SELECT statement for the Query (minus any eager"
" loaders), and returns a new Query that selects from that SELECT. So "
"basically you can query from a Query without needing to extract the "
"SELECT statement manually. This gives meaning to operations like "
"query[3:5]._from_self().filter(some criterion). There's not much "
"controversial here except that you can quickly create highly nested "
"queries that are less efficient, and we want feedback on the naming "
"choice."
msgstr ""

#: ../../changelog/changelog_04.rst:594
msgid ""
"query.order_by() and query.group_by() will accept multiple arguments "
"using \\*args (like select() already does)."
msgstr ""

#: ../../changelog/changelog_04.rst:602
msgid ""
"Added some convenience descriptors to Query: query.statement returns the "
"full SELECT construct, query.whereclause returns just the WHERE part of "
"the SELECT construct."
msgstr ""

#: ../../changelog/changelog_04.rst:611
msgid ""
"Fixed/covered case when using a False/0 value as a polymorphic "
"discriminator."
msgstr ""

#: ../../changelog/changelog_04.rst:618
msgid ""
"Fixed bug which was preventing synonym() attributes from being used with "
"inheritance"
msgstr ""

#: ../../changelog/changelog_04.rst:625
msgid "Fixed SQL function truncation of trailing underscores"
msgstr ""

#: ../../changelog/changelog_04.rst:631
msgid ""
"When attributes are expired on a pending instance, an error will not be "
"raised when the \"refresh\" action is triggered and no result is found."
msgstr ""

#: ../../changelog/changelog_04.rst:639
msgid "Session.execute can now find binds from metadata"
msgstr ""

#: ../../changelog/changelog_04.rst:645
msgid ""
"Adjusted the definition of \"self-referential\" to be any two mappers "
"with a common parent (this affects whether or not aliased=True is "
"required when joining with Query)."
msgstr ""

#: ../../changelog/changelog_04.rst:653
msgid ""
"Made some fixes to the \"from_joinpoint\" argument to query.join() so "
"that if the previous join was aliased and this one isn't, the join still "
"happens successfully."
msgstr ""

#: ../../changelog/changelog_04.rst:677
msgid "Assorted \"cascade deletes\" fixes:"
msgstr ""

#: ../../changelog/changelog_04.rst:662
msgid ""
"Fixed \"cascade delete\" operation of dynamic relations, which had only "
"been implemented for foreign-key nulling behavior in 0.4.2 and not actual"
" cascading deletes"
msgstr ""

#: ../../changelog/changelog_04.rst:667
msgid ""
"Delete cascade without delete-orphan cascade on a many-to-one will not "
"delete orphans which were disconnected from the parent before "
"session.delete() is called on the parent (one-to-many already had this)."
msgstr ""

#: ../../changelog/changelog_04.rst:673
msgid ""
"Delete cascade with delete-orphan will delete orphans whether or not it "
"remains attached to its also-deleted parent."
msgstr ""

#: ../../changelog/changelog_04.rst:677
msgid ""
"delete-orphan casacde is properly detected on relations that are present "
"on superclasses when using inheritance."
msgstr ""

#: ../../changelog/changelog_04.rst:684
msgid ""
"Fixed order_by calculation in Query to properly alias mapper-config'ed "
"order_by when using select_from()"
msgstr ""

#: ../../changelog/changelog_04.rst:691
msgid ""
"Refactored the diffing logic that kicks in when replacing one collection "
"with another into collections.bulk_replace, useful to anyone building "
"multi-level collections."
msgstr ""

#: ../../changelog/changelog_04.rst:699
msgid ""
"Cascade traversal algorithm converted from recursive to iterative to "
"support deep object graphs."
msgstr ""

#: ../../changelog/changelog_04.rst:706
msgid ""
"schema-qualified tables now will place the schemaname ahead of the "
"tablename in all column expressions as well as when generating column "
"labels.  This prevents cross- schema name collisions in all cases"
msgstr ""

#: ../../changelog/changelog_04.rst:715
msgid ""
"can now allow selects which correlate all FROM clauses and have no FROM "
"themselves.  These are typically used in a scalar context, i.e. SELECT x,"
" (SELECT x WHERE y) FROM table.  Requires explicit correlate() call."
msgstr ""

#: ../../changelog/changelog_04.rst:724
msgid ""
"'name' is no longer a required constructor argument for Column().  It "
"(and .key) may now be deferred until the column is added to a Table."
msgstr ""

#: ../../changelog/changelog_04.rst:732
msgid ""
"like(), ilike(), contains(), startswith(), endswith() take an optional "
"keyword argument \"escape=<somestring>\", which is set as the escape "
"character using the syntax \"x LIKE y ESCAPE '<somestring>'\"."
msgstr ""

#: ../../changelog/changelog_04.rst:741
msgid ""
"random() is now a generic sql function and will compile to the database's"
" random implementation, if any."
msgstr ""

#: ../../changelog/changelog_04.rst:748
msgid "update().values() and insert().values() take keyword arguments."
msgstr ""

#: ../../changelog/changelog_04.rst:755
msgid ""
"Fixed an issue in select() regarding its generation of FROM clauses, in "
"rare circumstances two clauses could be produced when one was intended to"
" cancel out the other. Some ORM queries with lots of eager loads might "
"have seen this symptom."
msgstr ""

#: ../../changelog/changelog_04.rst:765
msgid ""
"The case() function now also takes a dictionary as its whens parameter.  "
"It also interprets the \"THEN\" expressions as values by default, meaning"
" case([(x==y, \"foo\")]) will interpret \"foo\" as a bound value, not a "
"SQL expression.  use text(expr) for literal SQL expressions in this case."
"  For the criterion itself, these may be literal strings only if the "
"\"value\" keyword is present, otherwise SA will force explicit usage of "
"either text() or literal()."
msgstr ""

#: ../../changelog/changelog_04.rst:940
msgid ""
"The connection.info keys the dialect uses to cache server settings have "
"changed and are now namespaced."
msgstr ""

#: ../../changelog/changelog_04.rst:898
msgid ""
"Reflected tables will now automatically load other tables which are "
"referenced by Foreign keys in the auto-loaded table,."
msgstr ""

#: ../../changelog/changelog_04.rst:906
msgid "Added executemany check to skip identity fetch,."
msgstr ""

#: ../../changelog/changelog_04.rst:912
msgid "Added stubs for small date type."
msgstr ""

#: ../../changelog/changelog_04.rst:918
msgid ""
"Added a new 'driver' keyword parameter for the pyodbc dialect. Will "
"substitute into the ODBC connection string if given, defaults to 'SQL "
"Server'."
msgstr ""

#: ../../changelog/changelog_04.rst:926
msgid ""
"Added a new 'max_identifier_length' keyword parameter for the pyodbc "
"dialect."
msgstr ""

#: ../../changelog/changelog_04.rst:933
msgid ""
"Improvements to pyodbc + Unix. If you couldn't get that combination to "
"work before, please try again."
msgstr ""

#: ../../changelog/changelog_04.rst:779
msgid ""
"The \"owner\" keyword on Table is now deprecated, and is exactly "
"synonymous with the \"schema\" keyword.  Tables can now be reflected with"
" alternate \"owner\" attributes, explicitly stated on the Table object or"
" not using \"schema\"."
msgstr ""

#: ../../changelog/changelog_04.rst:789
msgid ""
"All of the \"magic\" searching for synonyms, DBLINKs etc. during table "
"reflection are disabled by default unless you specify "
"\"oracle_resolve_synonyms=True\" on the Table object.  Resolving synonyms"
" necessarily leads to some messy guessing which we'd rather leave off by "
"default. When the flag is set, tables and related tables will be resolved"
" against synonyms in all cases, meaning if a synonym exists for a "
"particular table, reflection will use it when reflecting related tables."
"  This is stickier behavior than before which is why it's off by default."
msgstr ""

#: ../../changelog/changelog_04.rst:804
msgid ""
"The \"synonym\" function is now directly usable with \"declarative\".  "
"Pass in the decorated property using the \"descriptor\" keyword argument,"
" e.g.: somekey = synonym('_somekey', descriptor=property(g, s))"
msgstr ""

#: ../../changelog/changelog_04.rst:813
msgid ""
"The \"deferred\" function is usable with \"declarative\". Simplest usage "
"is to declare deferred and Column together, e.g.: data = "
"deferred(Column(Text))"
msgstr ""

#: ../../changelog/changelog_04.rst:821
msgid ""
"Declarative also gained @synonym_for(...) and @comparable_using(...), "
"front-ends for synonym and comparable_property."
msgstr ""

#: ../../changelog/changelog_04.rst:829
msgid ""
"Improvements to mapper compilation when using declarative; already-"
"compiled mappers will still trigger compiles of other uncompiled mappers "
"when used"
msgstr ""

#: ../../changelog/changelog_04.rst:837
msgid ""
"Declarative will complete setup for Columns lacking names, allows a more "
"DRY syntax."
msgstr ""

#: ../../changelog/changelog_04.rst:841
msgid "class Foo(Base):"
msgstr ""

#: ../../changelog/changelog_04.rst:841
msgid "__tablename__ = 'foos' id = Column(Integer, primary_key=True)"
msgstr ""

#: ../../changelog/changelog_04.rst:848
msgid ""
"inheritance in declarative can be disabled when sending \"inherits=None\""
" to __mapper_args__."
msgstr ""

#: ../../changelog/changelog_04.rst:855
msgid ""
"declarative_base() takes optional kwarg \"mapper\", which is any "
"callable/class/method that produces a mapper, such as "
"declarative_base(mapper=scopedsession.mapper). This property can also be "
"set on individual declarative classes using the \"__mapper_cls__\" "
"property."
msgstr ""

#: ../../changelog/changelog_04.rst:865
msgid ""
"Got PG server side cursors back into shape, added fixed unit tests as "
"part of the default test suite.  Added better uniqueness to the cursor ID"
msgstr ""

#: ../../changelog/changelog_04.rst:1005
msgid ""
"any(), has(), contains(), ~contains(), attribute level == and != now work"
" properly with self-referential relations - the clause inside the EXISTS "
"is aliased on the \"remote\" side to distinguish it from the parent "
"table.  This applies to single table self-referential as well as "
"inheritance-based self-referential."
msgstr ""

#: ../../changelog/changelog_04.rst:1016
msgid ""
"Repaired behavior of == and != operators at the relation() level when "
"compared against NULL for one-to-one relations"
msgstr ""

#: ../../changelog/changelog_04.rst:1023
msgid ""
"Fixed bug whereby session.expire() attributes were not loading on an "
"polymorphically-mapped instance mapped by a select_table mapper."
msgstr ""

#: ../../changelog/changelog_04.rst:1031
msgid ""
"Added query.with_polymorphic() - specifies a list of classes which "
"descend from the base class, which will be added to the FROM clause of "
"the query.  Allows subclasses to be used within filter() criterion as "
"well as eagerly loads the attributes of those subclasses."
msgstr ""

#: ../../changelog/changelog_04.rst:1041
msgid ""
"Your cries have been heard: removing a pending item from an attribute or "
"collection with delete-orphan expunges the item from the session; no "
"FlushError is raised.  Note that if you session.save()'ed the pending "
"item explicitly, the attribute/collection removal still knocks it out."
msgstr ""

#: ../../changelog/changelog_04.rst:1051
msgid ""
"session.refresh() and session.expire() raise an error when called on "
"instances which are not persistent within the session"
msgstr ""

#: ../../changelog/changelog_04.rst:1059
msgid ""
"Fixed potential generative bug when the same Query was used to generate "
"multiple Query objects using join()."
msgstr ""

#: ../../changelog/changelog_04.rst:1066
msgid ""
"Fixed bug which was introduced in 0.4.3, whereby loading an already-"
"persistent instance mapped with joined table inheritance would trigger a "
"useless \"secondary\" load from its joined table, when using the default "
"\"select\" polymorphic_fetch.  This was due to attributes being marked as"
" expired during its first load and not getting unmarked from the previous"
" \"secondary\" load.  Attributes are now unexpired based on presence in "
"__dict__ after any load or commit operation succeeds."
msgstr ""

#: ../../changelog/changelog_04.rst:1080
msgid ""
"Deprecated Query methods apply_sum(), apply_max(), apply_min(), "
"apply_avg().  Better methodologies are coming...."
msgstr ""

#: ../../changelog/changelog_04.rst:1088
msgid ""
"relation() can accept a callable for its first argument, which returns "
"the class to be related.  This is in place to assist declarative packages"
" to define relations without classes yet being in place."
msgstr ""

#: ../../changelog/changelog_04.rst:1097
msgid ""
"Added a new \"higher level\" operator called \"of_type()\": used in "
"join() as well as with any() and has(), qualifies the subclass which will"
" be used in filter criterion, e.g.:"
msgstr ""

#: ../../changelog/changelog_04.rst:1102
msgid "query.filter(Company.employees.of_type(Engineer)."
msgstr ""

#: ../../changelog/changelog_04.rst:1102
msgid "any(Engineer.name=='foo'))"
msgstr ""

#: ../../changelog/changelog_04.rst:1104
msgid "or"
msgstr ""

#: ../../changelog/changelog_04.rst:1106
msgid "query.join(Company.employees.of_type(Engineer))."
msgstr ""

#: ../../changelog/changelog_04.rst:1107
msgid "filter(Engineer.name=='foo')"
msgstr ""

#: ../../changelog/changelog_04.rst:1113
msgid "Preventive code against a potential lost-reference bug in flush()."
msgstr ""

#: ../../changelog/changelog_04.rst:1120
msgid ""
"Expressions used in filter(), filter_by() and others, when they make "
"usage of a clause generated from a relation using the identity of a child"
" object (e.g., filter(Parent.child==<somechild>)), evaluate the actual "
"primary key value of <somechild> at execution time so that the autoflush "
"step of the Query can complete, thereby populating the PK value of "
"<somechild> in the case that <somechild> was pending."
msgstr ""

#: ../../changelog/changelog_04.rst:1133
msgid ""
"setting the relation()-level order by to a column in the many-to-many "
"\"secondary\" table will now work with eager loading, previously the "
"\"order by\" wasn't aliased against the secondary table's alias."
msgstr ""

#: ../../changelog/changelog_04.rst:1142
msgid ""
"Synonyms riding on top of existing descriptors are now full proxies to "
"those descriptors."
msgstr ""

#: ../../changelog/changelog_04.rst:951
msgid "Can again create aliases of selects against textual FROM clauses."
msgstr ""

#: ../../changelog/changelog_04.rst:958
msgid ""
"The value of a bindparam() can be a callable, in which case it's "
"evaluated at statement execution time to get the value."
msgstr ""

#: ../../changelog/changelog_04.rst:966
msgid ""
"Added exception wrapping/reconnect support to result set fetching.  "
"Reconnect works for those databases that raise a catchable data error "
"during results (i.e. doesn't work on MySQL)"
msgstr ""

#: ../../changelog/changelog_04.rst:975
msgid ""
"Implemented two-phase API for \"threadlocal\" engine, via "
"engine.begin_twophase(), engine.prepare()"
msgstr ""

#: ../../changelog/changelog_04.rst:982
msgid "Fixed bug which was preventing UNIONS from being cloneable."
msgstr ""

#: ../../changelog/changelog_04.rst:989
msgid ""
"Added \"bind\" keyword argument to insert(), update(), delete() and "
"DDL(). The .bind property is now assignable on those statements as well "
"as on select()."
msgstr ""

#: ../../changelog/changelog_04.rst:997
msgid ""
"Insert statements can now be compiled with extra \"prefix\" words between"
" INSERT and INTO, for vendor extensions like MySQL's INSERT IGNORE INTO "
"table."
msgstr ""

#: ../../changelog/changelog_04.rst:1149
msgid "Invalid SQLite connection URLs now raise an error."
msgstr ""

#: ../../changelog/changelog_04.rst:1155
msgid "postgres TIMESTAMP renders correctly"
msgstr ""

#: ../../changelog/changelog_04.rst:1161
msgid ""
"postgres PGArray is a \"mutable\" type by default; when used with the "
"ORM, mutable-style equality/ copy-on-write techniques are used to test "
"for changes."
msgstr ""

#: ../../changelog/changelog_04.rst:1169
msgid ""
"a new super-small \"declarative\" extension has been added, which allows "
"Table and mapper() configuration to take place inline underneath a class "
"declaration.  This extension differs from ActiveMapper and Elixir in that"
" it does not redefine any SQLAlchemy semantics at all; literal Column, "
"Table and relation() constructs are used to define the class behavior and"
" table definition."
msgstr ""

#: ../../changelog/changelog_04.rst:1549
msgid ""
"Fixed a variety of hidden and some not-so-hidden compatibility issues for"
" Python 2.3, thanks to new support for running the full test suite on "
"2.3."
msgstr ""

#: ../../changelog/changelog_04.rst:1557
msgid "Warnings are now issued as type exceptions.SAWarning."
msgstr ""

#: ../../changelog/changelog_04.rst:1329
msgid ""
"Every Session.begin() must now be accompanied by a corresponding commit()"
" or rollback() unless the session is closed with Session.close().  This "
"also includes the begin() which is implicit to a session created with "
"transactional=True.  The biggest change introduced here is that when a "
"Session created with transactional=True raises an exception during "
"flush(), you must call Session.rollback() or Session.close() in order for"
" that Session to continue after an exception."
msgstr ""

#: ../../changelog/changelog_04.rst:1343
msgid ""
"Fixed merge() collection-doubling bug when merging transient entities "
"with backref'ed collections."
msgstr ""

#: ../../changelog/changelog_04.rst:1350
msgid ""
"merge(dont_load=True) does not accept transient entities, this is in "
"continuation with the fact that merge(dont_load=True) does not accept any"
" \"dirty\" objects either."
msgstr ""

#: ../../changelog/changelog_04.rst:1359
msgid ""
"Added standalone \"query\" class attribute generated by a scoped_session."
"  This provides MyClass.query without using Session.mapper.  Use via:"
msgstr ""

#: ../../changelog/changelog_04.rst:1363
msgid "MyClass.query = Session.query_property()"
msgstr ""

#: ../../changelog/changelog_04.rst:1369
msgid ""
"The proper error message is raised when trying to access expired instance"
" attributes with no session present"
msgstr ""

#: ../../changelog/changelog_04.rst:1376
msgid ""
"dynamic_loader() / lazy=\"dynamic\" now accepts and uses the order_by "
"parameter in the same way in which it works with relation()."
msgstr ""

#: ../../changelog/changelog_04.rst:1384
msgid ""
"Added expire_all() method to Session.  Calls expire() for all persistent "
"instances.  This is handy in conjunction with..."
msgstr ""

#: ../../changelog/changelog_04.rst:1392
msgid ""
"Instances which have been partially or fully expired will have their "
"expired attributes populated during a regular Query operation which "
"affects those objects, preventing a needless second SQL statement for "
"each instance."
msgstr ""

#: ../../changelog/changelog_04.rst:1401
msgid ""
"Dynamic relations, when referenced, create a strong reference to the "
"parent object so that the query still has a parent to call against even "
"if the parent is only created (and otherwise dereferenced) within the "
"scope of a single expression."
msgstr ""

#: ../../changelog/changelog_04.rst:1411
msgid ""
"Added a mapper() flag \"eager_defaults\". When set to True, defaults that"
" are generated during an INSERT or UPDATE operation are post-fetched "
"immediately, instead of being deferred until later.  This mimics the old "
"0.3 behavior."
msgstr ""

#: ../../changelog/changelog_04.rst:1420
msgid ""
"query.join() can now accept class-mapped attributes as arguments. These "
"can be used in place or in any combination with strings.  In particular "
"this allows construction of joins to subclasses on a polymorphic "
"relation, i.e.:"
msgstr ""

#: ../../changelog/changelog_04.rst:1425
msgid "query(Company).join(['employees', Engineer.name])"
msgstr ""

#: ../../changelog/changelog_04.rst:1431
msgid ""
"query.join() can also accept tuples of attribute name/some selectable as "
"arguments.  This allows construction of joins *from* subclasses of a "
"polymorphic relation, i.e.:"
msgstr ""

#: ../../changelog/changelog_04.rst:1435
msgid "query(Company).\\ join("
msgstr ""

#: ../../changelog/changelog_04.rst:1438
msgid ")"
msgstr ""

#: ../../changelog/changelog_04.rst:1444
msgid ""
"General improvements to the behavior of join() in conjunction with "
"polymorphic mappers, i.e. joining from/to polymorphic mappers and "
"properly applying aliases."
msgstr ""

#: ../../changelog/changelog_04.rst:1452
msgid ""
"Fixed/improved behavior when a mapper determines the natural \"primary "
"key\" of a mapped join, it will more effectively reduce columns which are"
" equivalent via foreign key relation.  This affects how many arguments "
"need to be sent to query.get(), among other things."
msgstr ""

#: ../../changelog/changelog_04.rst:1462
msgid ""
"The lazy loader can now handle a join condition where the \"bound\" "
"column (i.e. the one that gets the parent id sent as a bind parameter) "
"appears more than once in the join condition.  Specifically this allows "
"the common task of a relation() which contains a parent-correlated "
"subquery, such as \"select only the most recent child item\"."
msgstr ""

#: ../../changelog/changelog_04.rst:1473
msgid ""
"Fixed bug in polymorphic inheritance where an incorrect exception is "
"raised when base polymorphic_on column does not correspond to any columns"
" within the local selectable of an inheriting mapper more than one level "
"deep"
msgstr ""

#: ../../changelog/changelog_04.rst:1482
msgid ""
"Fixed bug in polymorphic inheritance which made it difficult to set a "
"working \"order_by\" on a polymorphic mapper."
msgstr ""

#: ../../changelog/changelog_04.rst:1489
msgid ""
"Fixed a rather expensive call in Query that was slowing down polymorphic "
"queries."
msgstr ""

#: ../../changelog/changelog_04.rst:1496
msgid ""
"\"Passive defaults\" and other \"inline\" defaults can now be loaded "
"during a flush() call if needed; in particular, this allows constructing "
"relations() where a foreign key column references a server-side-"
"generated, non-primary-key column."
msgstr ""

#: ../../changelog/changelog_04.rst:1536
msgid "Additional Session transaction fixes/changes:"
msgstr ""

#: ../../changelog/changelog_04.rst:1507
msgid ""
"Fixed bug with session transaction management: parent transactions "
"weren't started on the connection when adding a connection to a nested "
"transaction."
msgstr ""

#: ../../changelog/changelog_04.rst:1511
msgid ""
"session.transaction now always refers to the innermost active "
"transaction, even when commit/rollback are called directly on the session"
" transaction object."
msgstr ""

#: ../../changelog/changelog_04.rst:1515
msgid "Two-phase transactions can now be prepared."
msgstr ""

#: ../../changelog/changelog_04.rst:1517
msgid ""
"When preparing a two-phase transaction fails on one connection, all the "
"connections are rolled back."
msgstr ""

#: ../../changelog/changelog_04.rst:1520
msgid ""
"session.close() didn't close all transactions when nested transactions "
"were used."
msgstr ""

#: ../../changelog/changelog_04.rst:1523
msgid ""
"rollback() previously erroneously set the current transaction directly to"
" the parent of the transaction that could be rolled back to. Now it rolls"
" back the next transaction up that can handle it, but sets the current "
"transaction to its parent and inactivates the transactions in between. "
"Inactive transactions can only be rolled back or closed, any other call "
"results in an error."
msgstr ""

#: ../../changelog/changelog_04.rst:1532
msgid "autoflush for commit() wasn't flushing for simple subtransactions."
msgstr ""

#: ../../changelog/changelog_04.rst:1535
msgid ""
"unitofwork flush didn't close the failed transaction when the session was"
" not in a transaction and committing the transaction failed."
msgstr ""

#: ../../changelog/changelog_04.rst:1543
msgid "Miscellaneous tickets:"
msgstr ""

#: ../../changelog/changelog_04.rst:1185
msgid ""
"Added \"schema.DDL\", an executable free-form DDL statement. DDLs can be "
"executed in isolation or attached to Table or MetaData instances and "
"executed automatically when those objects are created and/or dropped."
msgstr ""

#: ../../changelog/changelog_04.rst:1194
msgid ""
"Table columns and constraints can be overridden on a an existing table "
"(such as a table that was already reflected) using the 'useexisting=True'"
" flag, which now takes into account the arguments passed along with it."
msgstr ""

#: ../../changelog/changelog_04.rst:1203
msgid ""
"Added a callable-based DDL events interface, adds hooks before and after "
"Tables and MetaData create and drop."
msgstr ""

#: ../../changelog/changelog_04.rst:1210
msgid ""
"Added generative where(<criterion>) method to delete() and update() "
"constructs which return a new object with criterion joined to existing "
"criterion via AND, just like select().where()."
msgstr ""

#: ../../changelog/changelog_04.rst:1219
msgid ""
"Added \"ilike()\" operator to column operations.  Compiles to ILIKE on "
"postgres, lower(x) LIKE lower(y) on all others."
msgstr ""

#: ../../changelog/changelog_04.rst:1227
msgid ""
"Added \"now()\" as a generic function; on SQLite, Oracle and MSSQL "
"compiles as \"CURRENT_TIMESTAMP\"; \"now()\" on all others."
msgstr ""

#: ../../changelog/changelog_04.rst:1235
msgid ""
"The startswith(), endswith(), and contains() operators now concatenate "
"the wildcard operator with the given operand in SQL, i.e. \"'%' || "
"<bindparam>\" in all cases, accept text('something') operands properly"
msgstr ""

#: ../../changelog/changelog_04.rst:1244
msgid "cast() accepts text('something') and other non-literal operands properly"
msgstr ""

#: ../../changelog/changelog_04.rst:1251
msgid ""
"fixed bug in result proxy where anonymously generated column labels would"
" not be accessible using their straight string name"
msgstr ""

#: ../../changelog/changelog_04.rst:1259
msgid "Deferrable constraints can now be defined."
msgstr ""

#: ../../changelog/changelog_04.rst:1265
msgid ""
"Added \"autocommit=True\" keyword argument to select() and text(), as "
"well as generative autocommit() method on select(); for statements which "
"modify the database through some user-defined means other than the usual "
"INSERT/UPDATE/ DELETE etc.  This flag will enable \"autocommit\" behavior"
" during execution if no transaction is in progress."
msgstr ""

#: ../../changelog/changelog_04.rst:1276
msgid ""
"The '.c.' attribute on a selectable now gets an entry for every column "
"expression in its columns clause.  Previously, \"unnamed\" columns like "
"functions and CASE statements weren't getting put there.  Now they will, "
"using their full string representation if no 'name' is available."
msgstr ""

#: ../../changelog/changelog_04.rst:1286
msgid ""
"a CompositeSelect, i.e. any union(), union_all(), intersect(), etc. now "
"asserts that each selectable contains the same number of columns.  This "
"conforms to the corresponding SQL requirement."
msgstr ""

#: ../../changelog/changelog_04.rst:1295
msgid ""
"The anonymous 'label' generated for otherwise unlabeled functions and "
"expressions now propagates outwards at compile time for expressions like "
"select([select([func.foo()])])."
msgstr ""

#: ../../changelog/changelog_04.rst:1303
msgid ""
"Building on the above ideas, CompositeSelects now build up their \".c.\" "
"collection based on the names present in the first selectable only; "
"corresponding_column() now works fully for all embedded selectables."
msgstr ""

#: ../../changelog/changelog_04.rst:1312
msgid ""
"Oracle and others properly encode SQL used for defaults like sequences, "
"etc., even if no unicode idents are used since identifier preparer may "
"return a cached unicode identifier."
msgstr ""

#: ../../changelog/changelog_04.rst:1320
msgid ""
"Column and clause comparisons to datetime objects on the left hand side "
"of the expression now work (d < table.c.col). (datetimes on the RHS have "
"always worked, the LHS exception is a quirk of the datetime "
"implementation.)"
msgstr ""

#: ../../changelog/changelog_04.rst:1563
msgid ""
"Better support for schemas in SQLite (linked in by ATTACH DATABASE ... AS"
" name).  In some cases in the past, schema names were omitted from "
"generated SQL for SQLite.  This is no longer the case."
msgstr ""

#: ../../changelog/changelog_04.rst:1572
msgid "table_names on SQLite now picks up temporary tables as well."
msgstr ""

#: ../../changelog/changelog_04.rst:1578
msgid ""
"Auto-detect an unspecified MySQL ANSI_QUOTES mode during reflection "
"operations, support for changing the mode midstream.  Manual mode setting"
" is still required if no reflection is used."
msgstr ""

#: ../../changelog/changelog_04.rst:1587
msgid "Fixed reflection of TIME columns on SQLite."
msgstr ""

#: ../../changelog/changelog_04.rst:1593
msgid "Finally added PGMacAddr type to postgres"
msgstr ""

#: ../../changelog/changelog_04.rst:1599
msgid ""
"Reflect the sequence associated to a PK field (typically with a BEFORE "
"INSERT trigger) under Firebird"
msgstr ""

#: ../../changelog/changelog_04.rst:1606
msgid ""
"Oracle assembles the correct columns in the result set column mapping "
"when generating a LIMIT/OFFSET subquery, allows columns to map properly "
"to result sets even if long-name truncation kicks in"
msgstr ""

#: ../../changelog/changelog_04.rst:1615
msgid ""
"MSSQL now includes EXEC in the _is_select regexp, which should allow row-"
"returning stored procedures to be used."
msgstr ""

#: ../../changelog/changelog_04.rst:1622
msgid ""
"MSSQL now includes an experimental implementation of LIMIT/OFFSET using "
"the ANSI SQL row_number() function, so it requires MSSQL-2005 or higher. "
"To enable the feature, add \"has_window_funcs\" to the keyword arguments "
"for connect, or add \"?has_window_funcs=1\" to your dburi query "
"arguments."
msgstr ""

#: ../../changelog/changelog_04.rst:1632
msgid ""
"Changed ext.activemapper to use a non-transactional session for the "
"objectstore."
msgstr ""

#: ../../changelog/changelog_04.rst:1639
msgid ""
"Fixed output order of \"['a'] + obj.proxied\" binary operation on "
"association-proxied lists."
msgstr ""

#: ../../changelog/changelog_04.rst:1650
msgid ""
"sub version numbering scheme changed to suite setuptools version number "
"rules; easy_install -u should now get this version over 0.4.2."
msgstr ""

#: ../../changelog/changelog_04.rst:1681
msgid ""
"fixed bug with session.dirty when using \"mutable scalars\" (such as "
"PickleTypes)"
msgstr ""

#: ../../changelog/changelog_04.rst:1688
msgid ""
"added a more descriptive error message when flushing on a relation() that"
" has non-locally-mapped columns in its primary or secondary join "
"condition"
msgstr ""

#: ../../changelog/changelog_04.rst:1723
msgid "suppressing *all* errors in InstanceState.__cleanup() now."
msgstr ""

#: ../../changelog/changelog_04.rst:1730
msgid ""
"fixed an attribute history bug whereby assigning a new collection to a "
"collection-based attribute which already had pending changes would "
"generate incorrect history"
msgstr ""

#: ../../changelog/changelog_04.rst:1739
msgid ""
"fixed delete-orphan cascade bug whereby setting the same object twice to "
"a scalar attribute could log it as an orphan"
msgstr ""

#: ../../changelog/changelog_04.rst:1747
msgid "Fixed cascades on a += assignment to a list-based relation."
msgstr ""

#: ../../changelog/changelog_04.rst:1754
msgid ""
"synonyms can now be created against props that don't exist yet, which are"
" later added via add_property(). This commonly includes backrefs. (i.e. "
"you can make synonyms for backrefs without worrying about the order of "
"operations)"
msgstr ""

#: ../../changelog/changelog_04.rst:1764
msgid ""
"fixed bug which could occur with polymorphic \"union\" mapper which falls"
" back to \"deferred\" loading of inheriting tables"
msgstr ""

#: ../../changelog/changelog_04.rst:1772
msgid ""
"the \"columns\" collection on a mapper/mapped class (i.e. 'c') is against"
" the mapped table, not the select_table in the case of polymorphic "
"\"union\" loading (this shouldn't be noticeable)."
msgstr ""

#: ../../changelog/changelog_04.rst:1797
msgid ""
"fixed fairly critical bug whereby the same instance could be listed more "
"than once in the unitofwork.new collection; most typically reproduced "
"when using a combination of inheriting mappers and ScopedSession.mapper, "
"as the multiple __init__ calls per instance could save() the object with "
"distinct _state objects"
msgstr ""

#: ../../changelog/changelog_04.rst:1807
msgid ""
"added very rudimentary yielding iterator behavior to Query.  Call "
"query.yield_per(<number of rows>) and evaluate the Query in an iterative "
"context; every collection of N rows will be packaged up and yielded.  Use"
" this method with extreme caution since it does not attempt to reconcile "
"eagerly loaded collections across result batch boundaries, nor will it "
"behave nicely if the same instance occurs in more than one batch.  This "
"means that an eagerly loaded collection will get cleared out if it's "
"referenced in more than one batch, and in all cases attributes will be "
"overwritten on instances that occur in more than one batch."
msgstr ""

#: ../../changelog/changelog_04.rst:1822
msgid ""
"Fixed in-place set mutation operators for set collections and association"
" proxied sets."
msgstr ""

#: ../../changelog/changelog_04.rst:1658
msgid ""
"Text type is properly exported now and does not raise a warning on DDL "
"create; String types with no length only raise warnings during CREATE "
"TABLE"
msgstr ""

#: ../../changelog/changelog_04.rst:1666
msgid "new UnicodeText type is added, to specify an encoded, unlengthed Text type"
msgstr ""

#: ../../changelog/changelog_04.rst:1673
msgid ""
"fixed bug in union() so that select() statements which don't derive from "
"FromClause objects can be unioned"
msgstr ""

#: ../../changelog/changelog_04.rst:1703
msgid ""
"changed name of TEXT to Text since its a \"generic\" type; TEXT name is "
"deprecated until 0.5. The \"upgrading\" behavior of String to Text when "
"no length is present is also deprecated until 0.5; will issue a warning "
"when used for CREATE TABLE statements (String with no length for SQL "
"expression purposes is still fine)"
msgstr ""

#: ../../changelog/changelog_04.rst:1715
msgid ""
"generative select.order_by(None) / group_by(None) was not managing to "
"reset order by/group by criterion, fixed"
msgstr ""

#: ../../changelog/changelog_04.rst:1696
msgid "Fixed reflection of mysql empty string column defaults."
msgstr ""

#: ../../changelog/changelog_04.rst:1781
msgid "'+', '*', '+=' and '\\*=' support for association proxied lists."
msgstr ""

#: ../../changelog/changelog_04.rst:1788
msgid ""
"mssql - narrowed down the test for \"date\"/\"datetime\" in MSDate/ "
"MSDateTime subclasses so that incoming \"datetime\" objects don't get "
"mis-interpreted as \"date\" objects and vice versa."
msgstr ""

#: ../../changelog/changelog_04.rst:1829
msgid "Fixed the missing call to subtype result processor for the PGArray type."
msgstr ""

#: ../../changelog/changelog_04.rst:1948
msgid ""
"a major behavioral change to collection-based backrefs: they no longer "
"trigger lazy loads !  \"reverse\" adds and removes are queued up and are "
"merged with the collection when it is actually read from and loaded; but "
"do not trigger a load beforehand. For users who have noticed this "
"behavior, this should be much more convenient than using dynamic "
"relations in some cases; for those who have not, you might notice your "
"apps using a lot fewer queries than before in some situations."
msgstr ""

#: ../../changelog/changelog_04.rst:1961
msgid ""
"mutable primary key support is added. primary key columns can be changed "
"freely, and the identity of the instance will change upon flush. In "
"addition, update cascades of foreign key referents (primary key or not) "
"along relations are supported, either in tandem with the database's ON "
"UPDATE CASCADE (required for DB's like Postgres) or issued directly by "
"the ORM in the form of UPDATE statements, by setting the flag "
"\"passive_cascades=False\"."
msgstr ""

#: ../../changelog/changelog_04.rst:1973
msgid ""
"inheriting mappers now inherit the MapperExtensions of their parent "
"mapper directly, so that all methods for a particular MapperExtension are"
" called for subclasses as well.  As always, any MapperExtension can "
"return either EXT_CONTINUE to continue extension processing or EXT_STOP "
"to stop processing.  The order of mapper resolution is: <extensions "
"declared on the classes mapper> <extensions declared on the classes' "
"parent mapper> <globally declared extensions>."
msgstr ""

#: ../../changelog/changelog_04.rst:1981
msgid ""
"Note that if you instantiate the same extension class separately and then"
" apply it individually for two mappers in the same inheritance chain, the"
" extension will be applied twice to the inheriting class, and each method"
" will be called twice."
msgstr ""

#: ../../changelog/changelog_04.rst:1986
msgid ""
"To apply a mapper extension explicitly to each inheriting class but have "
"each method called only once per operation, use the same instance of the "
"extension for both mappers."
msgstr ""

#: ../../changelog/changelog_04.rst:1994
msgid ""
"MapperExtension.before_update() and after_update() are now called "
"symmetrically; previously, an instance that had no modified column "
"attributes (but had a relation() modification) could be called with "
"before_update() but not after_update()"
msgstr ""

#: ../../changelog/changelog_04.rst:2003
msgid ""
"columns which are missing from a Query's select statement now get "
"automatically deferred during load."
msgstr ""

#: ../../changelog/changelog_04.rst:2010
msgid ""
"mapped classes which extend \"object\" and do not provide an __init__() "
"method will now raise TypeError if non-empty \\*args or \\**kwargs are "
"present at instance construction time (and are not consumed by any "
"extensions such as the scoped_session mapper), consistent with the "
"behavior of normal Python classes"
msgstr ""

#: ../../changelog/changelog_04.rst:2020
msgid "fixed Query bug when filter_by() compares a relation against None"
msgstr ""

#: ../../changelog/changelog_04.rst:2026
msgid ""
"improved support for pickling of mapped entities.  Per-instance "
"lazy/deferred/expired callables are now serializable so that they "
"serialize and deserialize with _state."
msgstr ""

#: ../../changelog/changelog_04.rst:2034
msgid ""
"new synonym() behavior: an attribute will be placed on the mapped class, "
"if one does not exist already, in all cases. if a property already exists"
" on the class, the synonym will decorate the property with the "
"appropriate comparison operators so that it can be used in column "
"expressions just like any other mapped attribute (i.e. usable in "
"filter(), etc.) the \"proxy=True\" flag is deprecated and no longer means"
" anything. Additionally, the flag \"map_column=True\" will automatically "
"generate a ColumnProperty corresponding to the name of the synonym, i.e.:"
" 'somename':synonym('_somename', map_column=True) will map the column "
"named 'somename' to the attribute '_somename'. See the example in the "
"mapper docs."
msgstr ""

#: ../../changelog/changelog_04.rst:2050
msgid ""
"Query.select_from() now replaces all existing FROM criterion with the "
"given argument; the previous behavior of constructing a list of FROM "
"clauses was generally not useful as is required filter() calls to create "
"join criterion, and new tables introduced within filter() already add "
"themselves to the FROM clause.  The new behavior allows not just joins "
"from the main table, but select statements as well.  Filter criterion, "
"order bys, eager load clauses will be \"aliased\" against the given "
"statement."
msgstr ""

#: ../../changelog/changelog_04.rst:2063
msgid ""
"this month's refactoring of attribute instrumentation changes the \"copy-"
"on-load\" behavior we've had since midway through 0.3 with \"copy-on-"
"modify\" in most cases.  This takes a sizable chunk of latency out of "
"load operations and overall does less work as only attributes which are "
"actually modified get their \"committed state\" copied.  Only \"mutable "
"scalar\" attributes (i.e. a pickled object or other mutable item), the "
"reason for the copy-on-load change in the first place, retain the old "
"behavior."
msgstr ""

#: ../../changelog/changelog_04.rst:2077
msgid ""
"a slight behavioral change to attributes is, del'ing an attribute does "
"*not* cause the lazyloader of that attribute to fire off again; the "
"\"del\" makes the effective value of the attribute \"None\".  To re-"
"trigger the \"loader\" for an attribute, use session.expire(instance,)."
msgstr ""

#: ../../changelog/changelog_04.rst:2087
msgid ""
"query.filter(SomeClass.somechild == None), when comparing a many-to-one "
"property to None, properly generates \"id IS NULL\" including that the "
"NULL is on the right side."
msgstr ""

#: ../../changelog/changelog_04.rst:2095
msgid ""
"query.order_by() takes into account aliased joins, i.e. "
"query.join('orders', aliased=True).order_by(Order.id)"
msgstr ""

#: ../../changelog/changelog_04.rst:2102
msgid ""
"eagerload(), lazyload(), eagerload_all() take an optional second class-"
"or-mapper argument, which will select the mapper to apply the option "
"towards.  This can select among other mappers which were added using "
"add_entity()."
msgstr ""

#: ../../changelog/changelog_04.rst:2111
msgid "eagerloading will work with mappers added via add_entity()."
msgstr ""

#: ../../changelog/changelog_04.rst:2117
msgid ""
"added \"cascade delete\" behavior to \"dynamic\" relations just like that"
" of regular relations.  if passive_deletes flag (also just added) is not "
"set, a delete of the parent item will trigger a full load of the child "
"items so that they can be deleted or updated accordingly."
msgstr ""

#: ../../changelog/changelog_04.rst:2126
msgid ""
"also with dynamic, implemented correct count() behavior as well as other "
"helper methods."
msgstr ""

#: ../../changelog/changelog_04.rst:2133
msgid ""
"fix to cascades on polymorphic relations, such that cascades from an "
"object to a polymorphic collection continue cascading along the set of "
"attributes specific to each element in the collection."
msgstr ""

#: ../../changelog/changelog_04.rst:2141
msgid ""
"query.get() and query.load() do not take existing filter or other "
"criterion into account; these methods *always* look up the given id in "
"the database or return the current instance from the identity map, "
"disregarding any existing filter, join, group_by or other criterion which"
" has been configured."
msgstr ""

#: ../../changelog/changelog_04.rst:2151
msgid ""
"added support for version_id_col in conjunction with inheriting mappers. "
"version_id_col is typically set on the base mapper in an inheritance "
"relationship where it takes effect for all inheriting mappers."
msgstr ""

#: ../../changelog/changelog_04.rst:2159
msgid ""
"relaxed rules on column_property() expressions having labels; any "
"ColumnElement is accepted now, as the compiler auto-labels non-labeled "
"ColumnElements now.  a selectable, like a select() statement, still "
"requires conversion to ColumnElement via as_scalar() or label()."
msgstr ""

#: ../../changelog/changelog_04.rst:2168
msgid "fixed backref bug where you could not del instance.attr if attr was None"
msgstr ""

#: ../../changelog/changelog_04.rst:2175
msgid ""
"several ORM attributes have been removed or made private: "
"mapper.get_attr_by_column(), mapper.set_attr_by_column(), "
"mapper.pks_by_table, mapper.cascade_callable(), "
"MapperProperty.cascade_callable(), mapper.canload(), mapper.save_obj(), "
"mapper.delete_obj(), mapper._mapper_registry, attributes.AttributeManager"
msgstr ""

#: ../../changelog/changelog_04.rst:2186
msgid ""
"Assigning an incompatible collection type to a relation attribute now "
"raises TypeError instead of sqlalchemy's ArgumentError."
msgstr ""

#: ../../changelog/changelog_04.rst:2193
msgid ""
"Bulk assignment of a MappedCollection now raises an error if a key in the"
" incoming dictionary does not match the key that the collection's keyfunc"
" would use for that value."
msgstr ""

#: ../../changelog/changelog_04.rst:2201
msgid ""
"Custom collections can now specify a @converter method to translate "
"objects used in \"bulk\" assignment into a stream of values, as in::"
msgstr ""

#: ../../changelog/changelog_04.rst:2208
msgid ""
"The MappedCollection uses this hook to ensure that incoming key/value "
"pairs are sane from the collection's perspective."
msgstr ""

#: ../../changelog/changelog_04.rst:2215
msgid ""
"fixed endless loop issue when using lazy=\"dynamic\" on both sides of a "
"bi-directional relationship"
msgstr ""

#: ../../changelog/changelog_04.rst:2222
msgid ""
"more fixes to the LIMIT/OFFSET aliasing applied with Query + eagerloads, "
"in this case when mapped against a select statement"
msgstr ""

#: ../../changelog/changelog_04.rst:2229
msgid ""
"fix to self-referential eager loading such that if the same mapped "
"instance appears in two or more distinct sets of columns in the same "
"result set, its eagerly loaded collection will be populated regardless of"
" whether or not all of the rows contain a set of \"eager\" columns for "
"that collection.  this would also show up as a KeyError when fetching "
"results with join_depth turned on."
msgstr ""

#: ../../changelog/changelog_04.rst:2240
msgid ""
"fixed bug where Query would not apply a subquery to the SQL when LIMIT "
"was used in conjunction with an inheriting mapper where the eager loader "
"was only in the parent mapper."
msgstr ""

#: ../../changelog/changelog_04.rst:2248
msgid ""
"clarified the error message which occurs when you try to update() an "
"instance with the same identity key as an instance already present in the"
" session."
msgstr ""

#: ../../changelog/changelog_04.rst:2256
msgid ""
"some clarifications and fixes to merge(instance, dont_load=True). fixed "
"bug where lazy loaders were getting disabled on returned instances. Also,"
" we currently do not support merging an instance which has uncommitted "
"changes on it, in the case that dont_load=True is used....this will now "
"raise an error.  This is due to complexities in merging the \"committed "
"state\" of the given instance to correctly correspond to the newly copied"
" instance, as well as other modified state. Since the use case for "
"dont_load=True is caching, the given instances shouldn't have any "
"uncommitted changes on them anyway. We also copy the instances over "
"without using any events now, so that the 'dirty' list on the new session"
" remains unaffected."
msgstr ""

#: ../../changelog/changelog_04.rst:2272
msgid ""
"fixed bug which could arise when using session.begin_nested() in "
"conjunction with more than one level deep of enclosing session.begin() "
"statements"
msgstr ""

#: ../../changelog/changelog_04.rst:2279
msgid "fixed session.refresh() with instance that has custom entity_name"
msgstr ""

#: ../../changelog/changelog_04.rst:1840
msgid ""
"generic functions ! we introduce a database of known SQL functions, such "
"as current_timestamp, coalesce, and create explicit function objects "
"representing them. These objects have constrained argument lists, are "
"type aware, and can compile in a dialect-specific fashion. So saying "
"func.char_length(\"foo\", \"bar\") raises an error (too many args), "
"func.coalesce(datetime.date(2007, 10, 5), datetime.date(2005, 10, 15)) "
"knows that its return type is a Date. We only have a few functions "
"represented so far but will continue to add to the system"
msgstr ""

#: ../../changelog/changelog_04.rst:1853
msgid ""
"auto-reconnect support improved; a Connection can now automatically "
"reconnect after its underlying connection is invalidated, without needing"
" to connect() again from the engine.  This allows an ORM session bound to"
" a single Connection to not need a reconnect. Open transactions on the "
"Connection must be rolled back after an invalidation of the underlying "
"connection else an error is raised.  Also fixed bug where disconnect "
"detect was not being called for cursor(), rollback(), or commit()."
msgstr ""

#: ../../changelog/changelog_04.rst:1866
msgid ""
"added new flag to String and create_engine(), "
"assert_unicode=(True|False|'warn'\\|None). Defaults to `False` or `None` "
"on create_engine() and String, `'warn'` on the Unicode type. When `True`,"
" results in all unicode conversion operations raising an exception when a"
" non-unicode bytestring is passed as a bind parameter. 'warn' results in "
"a warning. It is strongly advised that all unicode-aware applications "
"make proper use of Python unicode objects (i.e. u'hello' and not 'hello')"
" so that data round trips accurately."
msgstr ""

#: ../../changelog/changelog_04.rst:1879
msgid ""
"generation of \"unique\" bind parameters has been simplified to use the "
"same \"unique identifier\" mechanisms as everything else.  This doesn't "
"affect user code, except any code that might have been hardcoded against "
"the generated names.  Generated bind params now have the form "
"\"<paramname>_<num>\", whereas before only the second bind of the same "
"name would have this form."
msgstr ""

#: ../../changelog/changelog_04.rst:1889
msgid ""
"select().as_scalar() will raise an exception if the select does not have "
"exactly one expression in its columns clause."
msgstr ""

#: ../../changelog/changelog_04.rst:1896
msgid ""
"bindparam() objects themselves can be used as keys for execute(), i.e. "
"statement.execute({bind1:'foo', bind2:'bar'})"
msgstr ""

#: ../../changelog/changelog_04.rst:1903
msgid ""
"added new methods to TypeDecorator, process_bind_param() and "
"process_result_value(), which automatically take advantage of the "
"processing of the underlying type.  Ideal for using with Unicode or "
"Pickletype. TypeDecorator should now be the primary way to augment the "
"behavior of any existing type including other TypeDecorator subclasses "
"such as PickleType."
msgstr ""

#: ../../changelog/changelog_04.rst:1913
msgid ""
"selectables (and others) will issue a warning when two columns in their "
"exported columns collection conflict based on name."
msgstr ""

#: ../../changelog/changelog_04.rst:1920
msgid ""
"tables with schemas can still be used in sqlite, firebird, schema name "
"just gets dropped"
msgstr ""

#: ../../changelog/changelog_04.rst:1927
msgid ""
"changed the various \"literal\" generation functions to use an anonymous "
"bind parameter.  not much changes here except their labels now look like "
"\":param_1\", \":param_2\" instead of \":literal\""
msgstr ""

#: ../../changelog/changelog_04.rst:1935
msgid ""
"column labels in the form \"tablename.columname\", i.e. with a dot, are "
"now supported."
msgstr ""

#: ../../changelog/changelog_04.rst:1942
msgid "from_obj keyword argument to select() can be a scalar or a list."
msgstr ""

#: ../../changelog/changelog_04.rst:2312
msgid "does properly reflect domains (partially fixing) and PassiveDefaults"
msgstr ""

#: ../../changelog/changelog_04.rst:2319
msgid ""
"reverted to use default poolclass (was set to SingletonThreadPool in "
"0.4.0 for test purposes)"
msgstr ""

#: ../../changelog/changelog_04.rst:2326
msgid ""
"map func.length() to 'char_length' (easily overridable with the UDF "
"'strlen' on old versions of Firebird)"
msgstr ""

#: ../../changelog/changelog_04.rst:2285
msgid ""
"sqlite SLDate type will not erroneously render \"microseconds\" portion "
"of a datetime or time object."
msgstr ""

#: ../../changelog/changelog_04.rst:2294
msgid "oracle"
msgstr ""

#: ../../changelog/changelog_04.rst:2293
msgid "added disconnect detection support for Oracle"
msgstr ""

#: ../../changelog/changelog_04.rst:2294
msgid ""
"some cleanup to binary/raw types so that cx_oracle.LOB is detected on an "
"ad-hoc basis"
msgstr ""

#: ../../changelog/changelog_04.rst:2305
msgid "MSSQL"
msgstr ""

#: ../../changelog/changelog_04.rst:2302
msgid "PyODBC no longer has a global \"set nocount on\"."
msgstr ""

#: ../../changelog/changelog_04.rst:2303
msgid "Fix non-identity integer PKs on autload"
msgstr ""

#: ../../changelog/changelog_04.rst:2304
msgid "Better support for convert_unicode"
msgstr ""

#: ../../changelog/changelog_04.rst:2305
msgid "Less strict date conversion for pyodbc/adodbapi"
msgstr ""

#: ../../changelog/changelog_04.rst:2306
msgid "Schema-qualified tables / autoload"
msgstr ""

#: ../../changelog/changelog_04.rst:2468
msgid ""
"eager loading with LIMIT/OFFSET applied no longer adds the primary table "
"joined to a limited subquery of itself; the eager loads now join directly"
" to the subquery which also provides the primary table's columns to the "
"result set.  This eliminates a JOIN from all eager loads with "
"LIMIT/OFFSET."
msgstr ""

#: ../../changelog/changelog_04.rst:2478
msgid ""
"session.refresh() and session.expire() now support an additional argument"
" \"attribute_names\", a list of individual attribute keynames to be "
"refreshed or expired, allowing partial reloads of attributes on an "
"already-loaded instance."
msgstr ""

#: ../../changelog/changelog_04.rst:2487
#, python-format
msgid ""
"added op() operator to instrumented attributes; i.e. "
"User.name.op('ilike')('%somename%')"
msgstr ""

#: ../../changelog/changelog_04.rst:2494
msgid ""
"Mapped classes may now define __eq__, __hash__, and __nonzero__ methods "
"with arbitrary semantics.  The orm now handles all mapped instances on an"
" identity-only basis. (e.g. 'is' vs '==')"
msgstr ""

#: ../../changelog/changelog_04.rst:2502
msgid ""
"the \"properties\" accessor on Mapper is removed; it now throws an "
"informative exception explaining the usage of mapper.get_property() and "
"mapper.iterate_properties"
msgstr ""

#: ../../changelog/changelog_04.rst:2510
msgid ""
"added having() method to Query, applies HAVING to the generated statement"
" in the same way as filter() appends to the WHERE clause."
msgstr ""

#: ../../changelog/changelog_04.rst:2517
msgid ""
"The behavior of query.options() is now fully based on paths, i.e. an "
"option such as eagerload_all('x.y.z.y.x') will apply eagerloading to only"
" those paths, i.e. and not 'x.y.x'; eagerload('children.children') "
"applies only to exactly two-levels deep, etc."
msgstr ""

#: ../../changelog/changelog_04.rst:2526
msgid ""
"PickleType will compare using `==` when set up with mutable=False, and "
"not the `is` operator.  To use `is` or any other comparator, send in a "
"custom comparison function using "
"PickleType(comparator=my_custom_comparator)."
msgstr ""

#: ../../changelog/changelog_04.rst:2534
msgid ""
"query doesn't throw an error if you use distinct() and an order_by() "
"containing UnaryExpressions (or other) together"
msgstr ""

#: ../../changelog/changelog_04.rst:2541
msgid ""
"order_by() expressions from joined tables are properly added to columns "
"clause when using distinct()"
msgstr ""

#: ../../changelog/changelog_04.rst:2548
msgid ""
"fixed error where Query.add_column() would not accept a class-bound "
"attribute as an argument; Query also raises an error if an invalid "
"argument was sent to add_column() (at instances() time)"
msgstr ""

#: ../../changelog/changelog_04.rst:2556
msgid ""
"added a little more checking for garbage-collection dereferences in "
"InstanceState.__cleanup() to reduce \"gc ignored\" errors on app shutdown"
msgstr ""

#: ../../changelog/changelog_04.rst:2564
msgid "The session API has been solidified:"
msgstr ""

#: ../../changelog/changelog_04.rst:2570
msgid "It's an error to session.save() an object which is already persistent"
msgstr ""

#: ../../changelog/changelog_04.rst:2577
msgid "It's an error to session.delete() an object which is *not* persistent."
msgstr ""

#: ../../changelog/changelog_04.rst:2584
msgid ""
"session.update() and session.delete() raise an error when updating or "
"deleting an instance that is already in the session with a different "
"identity."
msgstr ""

#: ../../changelog/changelog_04.rst:2592
msgid ""
"The session checks more carefully when determining \"object X already in "
"another session\"; e.g. if you pickle a series of objects and unpickle "
"(i.e. as in a Pylons HTTP session or similar), they can go into a new "
"session without any conflict"
msgstr ""

#: ../../changelog/changelog_04.rst:2601
msgid ""
"merge() includes a keyword argument \"dont_load=True\".  setting this "
"flag will cause the merge operation to not load any data from the "
"database in response to incoming detached objects, and will accept the "
"incoming detached object as though it were already present in that "
"session.  Use this to merge detached objects from external caching "
"systems into the session."
msgstr ""

#: ../../changelog/changelog_04.rst:2612
msgid ""
"Deferred column attributes no longer trigger a load operation when the "
"attribute is assigned to.  In those cases, the newly assigned value will "
"be present in the flushes' UPDATE statement unconditionally."
msgstr ""

#: ../../changelog/changelog_04.rst:2620
msgid ""
"Fixed a truncation error when re-assigning a subset of a collection "
"(obj.relation = obj.relation[1:])"
msgstr ""

#: ../../changelog/changelog_04.rst:2627
msgid ""
"De-cruftified backref configuration code, backrefs which step on existing"
" properties now raise an error"
msgstr ""

#: ../../changelog/changelog_04.rst:2634
msgid ""
"Improved behavior of add_property() etc., fixed involving "
"synonym/deferred."
msgstr ""

#: ../../changelog/changelog_04.rst:2641
msgid "Fixed clear_mappers() behavior to better clean up after itself."
msgstr ""

#: ../../changelog/changelog_04.rst:2647
msgid ""
"Fix to \"row switch\" behavior, i.e. when an INSERT/DELETE is combined "
"into a single UPDATE; many-to-many relations on the parent object update "
"properly."
msgstr ""

#: ../../changelog/changelog_04.rst:2655
msgid ""
"Fixed __hash__ for association proxy- these collections are unhashable, "
"just like their mutable Python counterparts."
msgstr ""

#: ../../changelog/changelog_04.rst:2662
msgid ""
"Added proxying of save_or_update, __contains__ and __iter__ methods for "
"scoped sessions."
msgstr ""

#: ../../changelog/changelog_04.rst:2669
msgid ""
"fixed very hard-to-reproduce issue where by the FROM clause of Query "
"could get polluted by certain generative calls"
msgstr ""

#: ../../changelog/changelog_04.rst:2337
msgid "the \"shortname\" keyword parameter on bindparam() has been deprecated."
msgstr ""

#: ../../changelog/changelog_04.rst:2344
msgid "Added contains operator (generates a \"LIKE %<other>%\" clause)."
msgstr ""

#: ../../changelog/changelog_04.rst:2350
msgid ""
"anonymous column expressions are automatically labeled. e.g. select([x* "
"5]) produces \"SELECT x * 5 AS anon_1\". This allows the labelname to be "
"present in the cursor.description which can then be appropriately matched"
" to result-column processing rules. (we can't reliably use positional "
"tracking for result-column matches since text() expressions may represent"
" multiple columns)."
msgstr ""

#: ../../changelog/changelog_04.rst:2361
msgid ""
"operator overloading is now controlled by TypeEngine objects - the one "
"built-in operator overload so far is String types overloading '+' to be "
"the string concatenation operator. User-defined types can also define "
"their own operator overloading by overriding the adapt_operator(self, op)"
" method."
msgstr ""

#: ../../changelog/changelog_04.rst:2371
msgid ""
"untyped bind parameters on the right side of a binary expression will be "
"assigned the type of the left side of the operation, to better enable the"
" appropriate bind parameter processing to take effect"
msgstr ""

#: ../../changelog/changelog_04.rst:2379
msgid ""
"Removed regular expression step from most statement compilations. Also "
"fixes"
msgstr ""

#: ../../changelog/changelog_04.rst:2386
msgid ""
"Fixed empty (zero column) sqlite inserts, allowing inserts on "
"autoincrementing single column tables."
msgstr ""

#: ../../changelog/changelog_04.rst:2393
msgid ""
"Fixed expression translation of text() clauses; this repairs various ORM "
"scenarios where literal text is used for SQL expressions"
msgstr ""

#: ../../changelog/changelog_04.rst:2400
msgid ""
"Removed ClauseParameters object; compiled.params returns a regular "
"dictionary now, as well as result.last_inserted_params() / "
"last_updated_params()."
msgstr ""

#: ../../changelog/changelog_04.rst:2408
msgid ""
"Fixed INSERT statements w.r.t. primary key columns that have SQL-"
"expression based default generators on them; SQL expression executes "
"inline as normal but will not trigger a \"postfetch\" condition for the "
"column, for those DB's who provide it via cursor.lastrowid"
msgstr ""

#: ../../changelog/changelog_04.rst:2417
msgid "func. objects can be pickled/unpickled"
msgstr ""

#: ../../changelog/changelog_04.rst:2423
msgid ""
"rewrote and simplified the system used to \"target\" columns across "
"selectable expressions.  On the SQL side this is represented by the "
"\"corresponding_column()\" method. This method is used heavily by the ORM"
" to \"adapt\" elements of an expression to similar, aliased expressions, "
"as well as to target result set columns originally bound to a table or "
"selectable to an aliased, \"corresponding\" expression.  The new rewrite "
"features completely consistent and accurate behavior."
msgstr ""

#: ../../changelog/changelog_04.rst:2435
msgid "Added a field (\"info\") for storing arbitrary data on schema items"
msgstr ""

#: ../../changelog/changelog_04.rst:2441
msgid ""
"The \"properties\" collection on Connections has been renamed \"info\" to"
" match schema's writable collections.  Access is still available via the "
"\"properties\" name until 0.5."
msgstr ""

#: ../../changelog/changelog_04.rst:2449
msgid "fixed the close() method on Transaction when using strategy='threadlocal'"
msgstr ""

#: ../../changelog/changelog_04.rst:2455
msgid "fix to compiled bind parameters to not mistakenly populate None"
msgstr ""

#: ../../changelog/changelog_04.rst:2461
msgid ""
"<Engine|Connection>._execute_clauseelement becomes a public method "
"Connectable.execute_clauseelement"
msgstr ""

#: ../../changelog/changelog_04.rst:2676
msgid "Added experimental support for MaxDB (versions >= 7.6.03.007 only)."
msgstr ""

#: ../../changelog/changelog_04.rst:2682
msgid ""
"oracle will now reflect \"DATE\" as an OracleDateTime column, not "
"OracleDate"
msgstr ""

#: ../../changelog/changelog_04.rst:2689
msgid ""
"added awareness of schema name in oracle table_names() function, fixes "
"metadata.reflect(schema='someschema')"
msgstr ""

#: ../../changelog/changelog_04.rst:2696
msgid "MSSQL anonymous labels for selection of functions made deterministic"
msgstr ""

#: ../../changelog/changelog_04.rst:2702
msgid "sqlite will reflect \"DECIMAL\" as a numeric column."
msgstr ""

#: ../../changelog/changelog_04.rst:2708
msgid "Made access dao detection more reliable"
msgstr ""

#: ../../changelog/changelog_04.rst:2714
msgid ""
"Renamed the Dialect attribute 'preexecute_sequences' to "
"'preexecute_pk_sequences'.  An attribute porxy is in place for out-of-"
"tree dialects using the old name."
msgstr ""

#: ../../changelog/changelog_04.rst:2722
msgid ""
"Added test coverage for unknown type reflection. Fixed sqlite/mysql "
"handling of type reflection for unknown types."
msgstr ""

#: ../../changelog/changelog_04.rst:2729
msgid ""
"Added REAL for mysql dialect (for folks exploiting the REAL_AS_FLOAT sql "
"mode)."
msgstr ""

#: ../../changelog/changelog_04.rst:2736
msgid ""
"mysql Float, MSFloat and MSDouble constructed without arguments now "
"produce no-argument DDL, e.g.'FLOAT'."
msgstr ""

#: ../../changelog/changelog_04.rst:2743
msgid "Removed unused util.hash()."
msgstr ""

#: ../../changelog/changelog_04.rst:2753
msgid ""
"(see 0.4.0beta1 for the start of major changes against 0.3, as well as "
"http://www.sqlalchemy.org/trac/wiki/WhatsNewIn04 )"
msgstr ""

#: ../../changelog/changelog_04.rst:2760
msgid "Added initial Sybase support (mxODBC so far)"
msgstr ""

#: ../../changelog/changelog_04.rst:2766
msgid ""
"Added partial index support for PostgreSQL. Use the postgres_where "
"keyword on the Index."
msgstr ""

#: ../../changelog/changelog_04.rst:2773
msgid ""
"string-based query param parsing/config file parser understands wider "
"range of string values for booleans"
msgstr ""

#: ../../changelog/changelog_04.rst:2780
msgid ""
"backref remove object operation doesn't fail if the other-side collection"
" doesn't contain the item, supports noload collections"
msgstr ""

#: ../../changelog/changelog_04.rst:2787
msgid ""
"removed __len__ from \"dynamic\" collection as it would require issuing a"
" SQL \"count()\" operation, thus forcing all list evaluations to issue "
"redundant SQL"
msgstr ""

#: ../../changelog/changelog_04.rst:2795
msgid ""
"inline optimizations added to locate_dirty() which can greatly speed up "
"repeated calls to flush(), as occurs with autoflush=True"
msgstr ""

#: ../../changelog/changelog_04.rst:2802
msgid ""
"The IdentifierPreprarer's _requires_quotes test is now regex based.  Any "
"out-of-tree dialects that provide custom sets of legal_characters or "
"illegal_initial_characters will need to move to regexes or override "
"_requires_quotes."
msgstr ""

#: ../../changelog/changelog_04.rst:2811
msgid ""
"Firebird has supports_sane_rowcount and supports_sane_multi_rowcount set "
"to False due to ticket #370 (right way)."
msgstr ""

#: ../../changelog/changelog_04.rst:2821
msgid "Improvements and fixes on Firebird reflection:"
msgstr ""

#: ../../changelog/changelog_04.rst:2819
msgid ""
"FBDialect now mimics OracleDialect, regarding case-sensitivity of TABLE "
"and COLUMN names (see 'case_sensitive remotion' topic on this current "
"file)."
msgstr ""

#: ../../changelog/changelog_04.rst:2821
msgid "FBDialect.table_names() doesn't bring system tables (ticket:796)."
msgstr ""

#: ../../changelog/changelog_04.rst:2822
msgid "FB now reflects Column's nullable property correctly."
msgstr ""

#: ../../changelog/changelog_04.rst:2828
msgid ""
"Fixed SQL compiler's awareness of top-level column labels as used in "
"result-set processing; nested selects which contain the same column names"
" don't affect the result or conflict with result-column metadata."
msgstr ""

#: ../../changelog/changelog_04.rst:2836
msgid ""
"query.get() and related functions (like many-to-one lazyloading) use "
"compile-time-aliased bind parameter names, to prevent name conflicts with"
" bind parameters that already exist in the mapped selectable."
msgstr ""

#: ../../changelog/changelog_04.rst:2845
msgid ""
"Fixed three- and multi-level select and deferred inheritance loading "
"(i.e. abc inheritance with no select_table)."
msgstr ""

#: ../../changelog/changelog_04.rst:2852
msgid "Ident passed to id_chooser in shard.py always a list."
msgstr ""

#: ../../changelog/changelog_04.rst:2858
msgid ""
"The no-arg ResultProxy._row_processor() is now the class attribute "
"`_process_row`."
msgstr ""

#: ../../changelog/changelog_04.rst:2865
msgid ""
"Added support for returning values from inserts and updates for "
"PostgreSQL 8.2+."
msgstr ""

#: ../../changelog/changelog_04.rst:2872
msgid ""
"PG reflection, upon seeing the default schema name being used explicitly "
"as the \"schema\" argument in a Table, will assume that this is the "
"user's desired convention, and will explicitly set the \"schema\" "
"argument in foreign-key-related reflected tables, thus making them match "
"only with Table constructors that also use the explicit \"schema\" "
"argument (even though its the default schema). In other words, SA assumes"
" the user is being consistent in this usage."
msgstr ""

#: ../../changelog/changelog_04.rst:2884
msgid "fixed sqlite reflection of BOOL/BOOLEAN"
msgstr ""

#: ../../changelog/changelog_04.rst:2890
msgid "Added support for UPDATE with LIMIT on mysql."
msgstr ""

#: ../../changelog/changelog_04.rst:2896
msgid "null foreign key on a m2o doesn't trigger a lazyload"
msgstr ""

#: ../../changelog/changelog_04.rst:2902
msgid ""
"oracle does not implicitly convert to unicode for non-typed result sets "
"(i.e. when no TypeEngine/String/Unicode type is even being used; "
"previously it was detecting DBAPI types and converting regardless). "
"should fix"
msgstr ""

#: ../../changelog/changelog_04.rst:2911
msgid "fix to anonymous label generation of long table/column names"
msgstr ""

#: ../../changelog/changelog_04.rst:2917
msgid "Firebird dialect now uses SingletonThreadPool as poolclass."
msgstr ""

#: ../../changelog/changelog_04.rst:2923
msgid "Firebird now uses dialect.preparer to format sequences names"
msgstr ""

#: ../../changelog/changelog_04.rst:2929
msgid ""
"Fixed breakage with postgres and multiple two-phase transactions. Two-"
"phase commits and rollbacks didn't automatically end up with a new "
"transaction as the usual dbapi commits/rollbacks do."
msgstr ""

#: ../../changelog/changelog_04.rst:2937
msgid ""
"Added an option to the _ScopedExt mapper extension to not automatically "
"save new objects to session on object initialization."
msgstr ""

#: ../../changelog/changelog_04.rst:2944
msgid "fixed Oracle non-ansi join syntax"
msgstr ""

#: ../../changelog/changelog_04.rst:2950
msgid ""
"PickleType and Interval types (on db not supporting it natively) are now "
"slightly faster."
msgstr ""

#: ../../changelog/changelog_04.rst:2957
msgid ""
"Added Float and Time types to Firebird (FBFloat and FBTime). Fixed BLOB "
"SUB_TYPE for TEXT and Binary types."
msgstr ""

#: ../../changelog/changelog_04.rst:2964
msgid ""
"Changed the API for the in\\_ operator. in_() now accepts a single "
"argument that is a sequence of values or a selectable. The old API of "
"passing in values as varargs still works but is deprecated."
msgstr ""

#: ../../changelog/changelog_04.rst:2976
msgid ""
"The Session identity map is now *weak referencing* by default, use "
"weak_identity_map=False to use a regular dict.  The weak dict we are "
"using is customized to detect instances which are \"dirty\" and maintain "
"a temporary strong reference to those instances until changes are "
"flushed."
msgstr ""

#: ../../changelog/changelog_04.rst:2985
msgid ""
"Mapper compilation has been reorganized such that most compilation occurs"
" upon mapper construction.  This allows us to have fewer calls to "
"mapper.compile() and also to allow class-based properties to force a "
"compilation (i.e. User.addresses == 7 will compile all mappers; this is)."
"  The only caveat here is that an inheriting mapper now looks for its "
"inherited mapper upon construction; so mappers within inheritance "
"relationships need to be constructed in inheritance order (which should "
"be the normal case anyway)."
msgstr ""

#: ../../changelog/changelog_04.rst:2997
msgid ""
"added \"FETCH\" to the keywords detected by Postgres to indicate a "
"result-row holding statement (i.e. in addition to \"SELECT\")."
msgstr ""

#: ../../changelog/changelog_04.rst:3004
msgid ""
"Added full list of SQLite reserved keywords so that they get escaped "
"properly."
msgstr ""

#: ../../changelog/changelog_04.rst:3011
msgid ""
"Tightened up the relationship between the Query's generation of \"eager "
"load\" aliases, and Query.instances() which actually grabs the eagerly "
"loaded rows.  If the aliases were not specifically generated for that "
"statement by EagerLoader, the EagerLoader will not take effect when the "
"rows are fetched.  This prevents columns from being grabbed accidentally "
"as being part of an eager load when they were not meant for such, which "
"can happen with textual SQL as well as some inheritance situations.  It's"
" particularly important since the \"anonymous aliasing\" of columns uses "
"simple integer counts now to generate labels."
msgstr ""

#: ../../changelog/changelog_04.rst:3025
msgid ""
"Removed \"parameters\" argument from clauseelement.compile(), replaced "
"with \"column_keys\".  The parameters sent to execute() only interact "
"with the insert/update statement compilation process in terms of the "
"column names present but not the values for those columns.  Produces more"
" consistent execute/executemany behavior, simplifies things a bit "
"internally."
msgstr ""

#: ../../changelog/changelog_04.rst:3035
msgid ""
"Added 'comparator' keyword argument to PickleType.  By default, "
"\"mutable\" PickleType does a \"deep compare\" of objects using their "
"dumps() representation.  But this doesn't work for dictionaries.  Pickled"
" objects which provide an adequate __eq__() implementation can be set up "
"with \"PickleType(comparator=operator.eq)\""
msgstr ""

#: ../../changelog/changelog_04.rst:3045
msgid ""
"Added session.is_modified(obj) method; performs the same \"history\" "
"comparison operation as occurs within a flush operation; setting "
"include_collections=False gives the same result as is used when the flush"
" determines whether or not to issue an UPDATE for the instance's row."
msgstr ""

#: ../../changelog/changelog_04.rst:3054
msgid ""
"Added \"schema\" argument to Sequence; use this with Postgres /Oracle "
"when the sequence is located in an alternate schema.  Implements part of,"
" should fix."
msgstr ""

#: ../../changelog/changelog_04.rst:3061
msgid "Fixed reflection of the empty string for mysql enums."
msgstr ""

#: ../../changelog/changelog_04.rst:3067
msgid ""
"Changed MySQL dialect to use the older LIMIT <offset>, <limit> syntax "
"instead of LIMIT <l> OFFSET <o> for folks using 3.23."
msgstr ""

#: ../../changelog/changelog_04.rst:3074
msgid ""
"Added 'passive_deletes=\"all\"' flag to relation(), disables all nulling-"
"out of foreign key attributes during a flush where the parent object is "
"deleted."
msgstr ""

#: ../../changelog/changelog_04.rst:3082
msgid ""
"Column defaults and onupdates, executing inline, will add parenthesis for"
" subqueries and other parenthesis-requiring expressions"
msgstr ""

#: ../../changelog/changelog_04.rst:3089
msgid ""
"The behavior of String/Unicode types regarding that they auto-convert to "
"TEXT/CLOB when no length is present now occurs *only* for an exact type "
"of String or Unicode with no arguments.  If you use VARCHAR or NCHAR "
"(subclasses of String/Unicode) with no length, they will be interpreted "
"by the dialect as VARCHAR/NCHAR; no \"magic\" conversion happens there.  "
"This is less surprising behavior and in particular this helps Oracle keep"
" string-based bind parameters as VARCHARs and not CLOBs."
msgstr ""

#: ../../changelog/changelog_04.rst:3101
msgid "Fixes to ShardedSession to work with deferred columns."
msgstr ""

#: ../../changelog/changelog_04.rst:3107
msgid ""
"User-defined shard_chooser() function must accept \"clause=None\" "
"argument; this is the ClauseElement passed to session.execute(statement) "
"and can be used to determine correct shard id (since execute() doesn't "
"take an instance.)"
msgstr ""

#: ../../changelog/changelog_04.rst:3116
msgid ""
"Adjusted operator precedence of NOT to match '==' and others, so that ~(x"
" <operator> y) produces NOT (x <op> y), which is better compatible with "
"older MySQL versions..  This doesn't apply to \"~(x==y)\" as it does in "
"0.3 since ~(x==y) compiles to \"x != y\", but still applies to operators "
"like BETWEEN."
msgstr ""

#: ../../changelog/changelog_04.rst:3126
msgid "Other tickets:,,."
msgstr ""

#: ../../changelog/changelog_04.rst:3136
msgid ""
"Connection pool fixes; the better performance of beta4 remains but fixes "
"\"connection overflow\" and other bugs which were present (like)."
msgstr ""

#: ../../changelog/changelog_04.rst:3143
msgid ""
"Fixed bugs in determining proper sync clauses from custom inherit "
"conditions."
msgstr ""

#: ../../changelog/changelog_04.rst:3150
msgid "Extended 'engine_from_config' coercion for QueuePool size / overflow."
msgstr ""

#: ../../changelog/changelog_04.rst:3156
msgid "mysql views can be reflected again."
msgstr ""

#: ../../changelog/changelog_04.rst:3162
msgid "AssociationProxy can now take custom getters and setters."
msgstr ""

#: ../../changelog/changelog_04.rst:3168
msgid "Fixed malfunctioning BETWEEN in orm queries."
msgstr ""

#: ../../changelog/changelog_04.rst:3174
msgid "Fixed OrderedProperties pickling"
msgstr ""

#: ../../changelog/changelog_04.rst:3180
msgid ""
"SQL-expression defaults and sequences now execute \"inline\" for all non-"
"primary key columns during an INSERT or UPDATE, and for all columns "
"during an executemany()-style call. inline=True flag on any insert/update"
" statement also forces the same behavior with a single execute(). "
"result.postfetch_cols() is a collection of columns for which the previous"
" single insert or update statement contained a SQL-side default "
"expression."
msgstr ""

#: ../../changelog/changelog_04.rst:3191
msgid "Fixed PG executemany() behavior."
msgstr ""

#: ../../changelog/changelog_04.rst:3197
msgid ""
"postgres reflects tables with autoincrement=False for primary key columns"
" which have no defaults."
msgstr ""

#: ../../changelog/changelog_04.rst:3204
msgid ""
"postgres no longer wraps executemany() with individual execute() calls, "
"instead favoring performance.  \"rowcount\"/\"concurrency\" checks with "
"deleted items (which use executemany) are disabled with PG since psycopg2"
" does not report proper rowcount for executemany()."
msgstr ""

#: ../../changelog/changelog_04.rst:3247
msgid ""
"Tidied up what ends up in your namespace when you 'from sqlalchemy import"
" \\*':"
msgstr ""

#: ../../changelog/changelog_04.rst:3253
msgid ""
"'table' and 'column' are no longer imported.  They remain available by "
"direct reference (as in 'sql.table' and 'sql.column') or a glob import "
"from the sql package.  It was too easy to accidentally use a "
"sql.expressions.table instead of schema.Table when just starting out with"
" SQLAlchemy, likewise column."
msgstr ""

#: ../../changelog/changelog_04.rst:3263
msgid ""
"Internal-ish classes like ClauseElement, FromClause, NullTypeEngine, "
"etc., are also no longer imported into your namespace"
msgstr ""

#: ../../changelog/changelog_04.rst:3270
msgid ""
"The 'Smallinteger' compatibility name (small i!) is no longer imported, "
"but remains in schema.py for now.  SmallInteger (big I!) is still "
"imported."
msgstr ""

#: ../../changelog/changelog_04.rst:3278
msgid ""
"The connection pool uses a \"threadlocal\" strategy internally to return "
"the same connection already bound to a thread, for \"contextual\" "
"connections; these are the connections used when you do a "
"\"connectionless\" execution like insert().execute().  This is like a "
"\"partial\" version of the \"threadlocal\" engine strategy but without "
"the thread-local transaction part of it.  We're hoping it reduces "
"connection pool overhead as well as database usage.  However, if it "
"proves to impact stability in a negative way, we'll roll it right back."
msgstr ""

#: ../../changelog/changelog_04.rst:3291
msgid ""
"Fix to bind param processing such that \"False\" values (like blank "
"strings) still get processed/encoded."
msgstr ""

#: ../../changelog/changelog_04.rst:3298
msgid ""
"Fix to select() \"generative\" behavior, such that calling column(), "
"select_from(), correlate(), and with_prefix() does not modify the "
"original select object"
msgstr ""

#: ../../changelog/changelog_04.rst:3306
msgid ""
"Added a \"legacy\" adapter to types, such that user-defined TypeEngine "
"and TypeDecorator classes which define convert_bind_param() and/or "
"convert_result_value() will continue to function.  Also supports calling "
"the super() version of those methods."
msgstr ""

#: ../../changelog/changelog_04.rst:3315
msgid ""
"Added session.prune(), trims away instances cached in a session that are "
"no longer referenced elsewhere. (A utility for strong-ref identity maps)."
msgstr ""

#: ../../changelog/changelog_04.rst:3323
msgid ""
"Added close() method to Transaction.  Closes out a transaction using "
"rollback if it's the outermost transaction, otherwise just ends without "
"affecting the outer transaction."
msgstr ""

#: ../../changelog/changelog_04.rst:3331
msgid ""
"Transactional and non-transactional Session integrates better with bound "
"connection; a close() will ensure that connection transactional state is "
"the same as that which existed on it before being bound to the Session."
msgstr ""

#: ../../changelog/changelog_04.rst:3340
msgid ""
"Modified SQL operator functions to be module-level operators, allowing "
"SQL expressions to be pickleable."
msgstr ""

#: ../../changelog/changelog_04.rst:3347
msgid ""
"Small adjustment to mapper class.__init__ to allow for Py2.6 "
"object.__init__() behavior."
msgstr ""

#: ../../changelog/changelog_04.rst:3354
msgid "Fixed 'prefix' argument for select()"
msgstr ""

#: ../../changelog/changelog_04.rst:3360
msgid ""
"Connection.begin() no longer accepts nested=True, this logic is now all "
"in begin_nested()."
msgstr ""

#: ../../changelog/changelog_04.rst:3367
msgid "Fixes to new \"dynamic\" relation loader involving cascades"
msgstr ""

#: ../../changelog/changelog_04.rst:3389
msgid "SQL types optimization:"
msgstr ""

#: ../../changelog/changelog_04.rst:3395
#, python-format
msgid ""
"New performance tests show a combined mass-insert/mass-select test as "
"having 68% fewer function calls than the same test run against 0.3."
msgstr ""

#: ../../changelog/changelog_04.rst:3402
msgid "General performance improvement of result set iteration is around 10-20%."
msgstr ""

#: ../../changelog/changelog_04.rst:3408
msgid ""
"In types.AbstractType, convert_bind_param() and convert_result_value() "
"have migrated to callable-returning bind_processor() and "
"result_processor() methods.  If no callable is returned, no pre/post "
"processing function is called."
msgstr ""

#: ../../changelog/changelog_04.rst:3417
msgid ""
"Hooks added throughout base/sql/defaults to optimize the calling of bind "
"aram/result processors so that method call overhead is minimized."
msgstr ""

#: ../../changelog/changelog_04.rst:3424
msgid ""
"Support added for executemany() scenarios such that unneeded \"last row "
"id\" logic doesn't kick in, parameters aren't excessively traversed."
msgstr ""

#: ../../changelog/changelog_04.rst:3431
msgid "Added 'inherit_foreign_keys' arg to mapper()."
msgstr ""

#: ../../changelog/changelog_04.rst:3437
msgid "Added support for string date passthrough in sqlite."
msgstr ""

#: ../../changelog/changelog_04.rst:3471
msgid "Auto-commit after LOAD DATA INFILE for mysql."
msgstr ""

#: ../../changelog/changelog_04.rst:3477 ../../changelog/changelog_04.rst:3761
msgid ""
"A rudimental SessionExtension class has been added, allowing user-defined"
" functionality to take place at flush(), commit(), and rollback() "
"boundaries."
msgstr ""

#: ../../changelog/changelog_04.rst:3484
msgid ""
"Added engine_from_config() function for helping to create_engine() from "
"an .ini style config."
msgstr ""

#: ../../changelog/changelog_04.rst:3491
msgid "base_mapper() becomes a plain attribute."
msgstr ""

#: ../../changelog/changelog_04.rst:3497
msgid ""
"session.execute() and scalar() can search for a Table with which to bind "
"from using the given ClauseElement."
msgstr ""

#: ../../changelog/changelog_04.rst:3504
msgid ""
"Session automatically extrapolates tables from mappers with binds, also "
"uses base_mapper so that inheritance hierarchies bind automatically."
msgstr ""

#: ../../changelog/changelog_04.rst:3511
msgid "Moved ClauseVisitor traversal back to inlined non-recursive."
msgstr ""

#: ../../changelog/changelog_04.rst:3545
msgid ""
"Speed! Along with recent speedups to ResultProxy, total number of "
"function calls significantly reduced for large loads."
msgstr ""

#: ../../changelog/changelog_04.rst:3552
msgid ""
"test/perf/masseagerload.py reports 0.4 as having the fewest number of "
"function calls across all SA versions (0.1, 0.2, and 0.3)."
msgstr ""

#: ../../changelog/changelog_04.rst:3559
msgid ""
"New collection_class api and implementation. Collections are now "
"instrumented via decorations rather than proxying.  You can now have "
"collections that manage their own membership, and your class instance "
"will be directly exposed on the relation property.  The changes are "
"transparent for most users."
msgstr ""

#: ../../changelog/changelog_04.rst:3569
msgid ""
"InstrumentedList (as it was) is removed, and relation properties no "
"longer have 'clear()', '.data', or any other added methods beyond those "
"provided by the collection type. You are free, of course, to add them to "
"a custom class."
msgstr ""

#: ../../changelog/changelog_04.rst:3578
msgid ""
"__setitem__-like assignments now fire remove events for the existing "
"value, if any."
msgstr ""

#: ../../changelog/changelog_04.rst:3585
msgid ""
"dict-likes used as collection classes no longer need to change __iter__ "
"semantics- itervalues() is used by default instead. This is a backwards "
"incompatible change."
msgstr ""

#: ../../changelog/changelog_04.rst:3593
msgid ""
"Subclassing dict for a mapped collection is no longer needed in most "
"cases. orm.collections provides canned implementations that key objects "
"by a specified column or a custom function of your choice."
msgstr ""

#: ../../changelog/changelog_04.rst:3601
msgid ""
"Collection assignment now requires a compatible type- assigning None to "
"clear a collection or assigning a list to a dict collection will now "
"raise an argument error."
msgstr ""

#: ../../changelog/changelog_04.rst:3609
msgid ""
"AttributeExtension moved to interfaces, and .delete is now .remove The "
"event method signature has also been swapped around."
msgstr ""

#: ../../changelog/changelog_04.rst:3616
msgid "Major overhaul for Query:"
msgstr ""

#: ../../changelog/changelog_04.rst:3622
msgid ""
"All selectXXX methods are deprecated.  Generative methods are now the "
"standard way to do things, i.e. filter(), filter_by(), all(), one(), etc."
"  Deprecated methods are docstring'ed with their new replacements."
msgstr ""

#: ../../changelog/changelog_04.rst:3630
msgid ""
"Class-level properties are now usable as query elements... no more '.c.'!"
"  \"Class.c.propname\" is now superseded by \"Class.propname\".  All "
"clause operators are supported, as well as higher level operators such as"
" Class.prop==<some instance> for scalar attributes, "
"Class.prop.contains(<some instance>) and Class.prop.any(<some "
"expression>) for collection-based attributes (all are also negatable).  "
"Table-based column expressions as well as columns mounted on mapped "
"classes via 'c' are of course still fully available and can be freely "
"mixed with the new attributes."
msgstr ""

#: ../../changelog/changelog_04.rst:3644
msgid "Removed ancient query.select_by_attributename() capability."
msgstr ""

#: ../../changelog/changelog_04.rst:3650
msgid ""
"The aliasing logic used by eager loading has been generalized, so that it"
" also adds full automatic aliasing support to Query.  It's no longer "
"necessary to create an explicit Alias to join to the same tables multiple"
" times; *even for self-referential relationships*."
msgstr ""

#: ../../changelog/changelog_04.rst:3655
msgid ""
"join() and outerjoin() take arguments \"aliased=True\".  Yhis causes "
"their joins to be built on aliased tables; subsequent calls to filter() "
"and filter_by() will translate all table expressions (yes, real "
"expressions using the original mapped Table) to be that of the Alias for "
"the duration of that join() (i.e. until reset_joinpoint() or another "
"join() is called)."
msgstr ""

#: ../../changelog/changelog_04.rst:3662
msgid ""
"join() and outerjoin() take arguments \"id=<somestring>\".  When used "
"with \"aliased=True\", the id can be referenced by add_entity(cls, "
"id=<somestring>) so that you can select the joined instances even if "
"they're from an alias."
msgstr ""

#: ../../changelog/changelog_04.rst:3667
msgid ""
"join() and outerjoin() now work with self-referential relationships! "
"Using \"aliased=True\", you can join as many levels deep as desired, i.e."
" query.join(['children', 'children'], aliased=True); filter criterion "
"will be against the rightmost joined table"
msgstr ""

#: ../../changelog/changelog_04.rst:3676
msgid ""
"Added query.populate_existing(), marks the query to reload all attributes"
" and collections of all instances touched in the query, including "
"eagerly-loaded entities."
msgstr ""

#: ../../changelog/changelog_04.rst:3684
msgid ""
"Added eagerload_all(), allows eagerload_all('x.y.z') to specify eager "
"loading of all properties in the given path."
msgstr ""

#: ../../changelog/changelog_04.rst:3691
msgid "Major overhaul for Session:"
msgstr ""

#: ../../changelog/changelog_04.rst:3697
msgid ""
"New function which \"configures\" a session called \"sessionmaker()\".  "
"Send various keyword arguments to this function once, returns a new class"
" which creates a Session against that stereotype."
msgstr ""

#: ../../changelog/changelog_04.rst:3705
msgid ""
"SessionTransaction removed from \"public\" API.  You now can call "
"begin()/ commit()/rollback() on the Session itself."
msgstr ""

#: ../../changelog/changelog_04.rst:3712
msgid "Session also supports SAVEPOINT transactions; call begin_nested()."
msgstr ""

#: ../../changelog/changelog_04.rst:3718
msgid ""
"Session supports two-phase commit behavior when vertically or "
"horizontally partitioning (i.e., using more than one engine).  Use "
"twophase=True."
msgstr ""

#: ../../changelog/changelog_04.rst:3726
msgid ""
"Session flag \"transactional=True\" produces a session which always "
"places itself into a transaction when first used.  Upon commit(), "
"rollback() or close(), the transaction ends; but begins again on the next"
" usage."
msgstr ""

#: ../../changelog/changelog_04.rst:3734
msgid ""
"Session supports \"autoflush=True\".  This issues a flush() before each "
"query.  Use in conjunction with transactional, and you can just "
"save()/update() and then query, the new objects will be there.  Use "
"commit() at the end (or flush() if non-transactional) to flush remaining "
"changes."
msgstr ""

#: ../../changelog/changelog_04.rst:3744
msgid ""
"New scoped_session() function replaces SessionContext and assignmapper. "
"Builds onto \"sessionmaker()\" concept to produce a class whos Session() "
"construction returns the thread-local session.  Or, call all Session "
"methods as class methods, i.e. Session.save(foo); Session.commit(). just "
"like the old \"objectstore\" days."
msgstr ""

#: ../../changelog/changelog_04.rst:3754
msgid ""
"Added new \"binds\" argument to Session to support configuration of "
"multiple binds with sessionmaker() function."
msgstr ""

#: ../../changelog/changelog_04.rst:3769
msgid ""
"Query-based relation()s available with dynamic_loader().  This is a "
"*writable* collection (supporting append() and remove()) which is also a "
"live Query object when accessed for reads.  Ideal for dealing with very "
"large collections where only partial loading is desired."
msgstr ""

#: ../../changelog/changelog_04.rst:3778
msgid ""
"flush()-embedded inline INSERT/UPDATE expressions.  Assign any SQL "
"expression, like \"sometable.c.column + 1\", to an instance's attribute. "
"Upon flush(), the mapper detects the expression and embeds it directly in"
" the INSERT or UPDATE statement; the attribute gets deferred on the "
"instance so it loads the new value the next time you access it."
msgstr ""

#: ../../changelog/changelog_04.rst:3788
msgid ""
"A rudimental sharding (horizontal scaling) system is introduced.  This "
"system uses a modified Session which can distribute read and write "
"operations among multiple databases, based on user-defined functions "
"defining the \"sharding strategy\".  Instances and their dependents can "
"be distributed and queried among multiple databases based on attribute "
"values, round-robin approaches or any other user-defined system."
msgstr ""

#: ../../changelog/changelog_04.rst:3800
msgid ""
"Eager loading has been enhanced to allow even more joins in more places. "
"It now functions at any arbitrary depth along self-referential and "
"cyclical structures.  When loading cyclical structures, specify "
"\"join_depth\" on relation() indicating how many times you'd like the "
"table to join to itself; each level gets a distinct table alias.  The "
"alias names themselves are generated at compile time using a simple "
"counting scheme now and are a lot easier on the eyes, as well as of "
"course completely deterministic."
msgstr ""

#: ../../changelog/changelog_04.rst:3813
msgid ""
"Added composite column properties.  This allows you to create a type "
"which is represented by more than one column, when using the ORM.  "
"Objects of the new type are fully functional in query expressions, "
"comparisons, query.get() clauses, etc. and act as though they are regular"
" single-column scalars... except they're not!  Use the function "
"composite(cls, \\*columns) inside of the mapper's \"properties\" dict, "
"and instances of cls will be created/mapped to a single attribute, "
"comprised of the values corresponding to \\*columns."
msgstr ""

#: ../../changelog/changelog_04.rst:3826
msgid ""
"Improved support for custom column_property() attributes which feature "
"correlated subqueries, works better with eager loading now."
msgstr ""

#: ../../changelog/changelog_04.rst:3833
msgid ""
"Primary key \"collapse\" behavior; the mapper will analyze all columns in"
" its given selectable for primary key \"equivalence\", that is, columns "
"which are equivalent via foreign key relationship or via an explicit "
"inherit_condition. primarily for joined-table inheritance scenarios where"
" different named PK columns in inheriting tables should \"collapse\" into"
" a single-valued (or fewer-valued) primary key.  Fixes things like."
msgstr ""

#: ../../changelog/changelog_04.rst:3844
msgid ""
"Joined-table inheritance will now generate the primary key columns of all"
" inherited classes against the root table of the join only.  This implies"
" that each row in the root table is distinct to a single instance.  If "
"for some rare reason this is not desirable, explicit primary_key settings"
" on individual mappers will override it."
msgstr ""

#: ../../changelog/changelog_04.rst:3854
msgid ""
"When \"polymorphic\" flags are used with joined-table or single-table "
"inheritance, all identity keys are generated against the root class of "
"the inheritance hierarchy; this allows query.get() to work "
"polymorphically using the same caching semantics as a non-polymorphic "
"get.  Note that this currently does not work with concrete inheritance."
msgstr ""

#: ../../changelog/changelog_04.rst:3864
msgid ""
"Secondary inheritance loading: polymorphic mappers can be constructed "
"*without* a select_table argument. inheriting mappers whose tables were "
"not represented in the initial load will issue a second SQL query "
"immediately, once per instance (i.e. not very efficient for large lists),"
" in order to load the remaining columns."
msgstr ""

#: ../../changelog/changelog_04.rst:3874
msgid ""
"Secondary inheritance loading can also move its second query into a "
"column-level \"deferred\" load, via the \"polymorphic_fetch\" argument, "
"which can be set to 'select' or 'deferred'"
msgstr ""

#: ../../changelog/changelog_04.rst:3882
msgid ""
"It's now possible to map only a subset of available selectable columns "
"onto mapper properties, using include_columns/exclude_columns.."
msgstr ""

#: ../../changelog/changelog_04.rst:3889
msgid ""
"Added undefer_group() MapperOption, sets a set of \"deferred\" columns "
"joined by a \"group\" to load as \"undeferred\"."
msgstr ""

#: ../../changelog/changelog_04.rst:3896
msgid ""
"Rewrite of the \"deterministic alias name\" logic to be part of the SQL "
"layer, produces much simpler alias and label names more in the style of "
"Hibernate"
msgstr ""

#: ../../changelog/changelog_04.rst:3904
#, python-format
msgid ""
"Speed!  Clause compilation as well as the mechanics of SQL constructs "
"have been streamlined and simplified to a significant degree, for a "
"20-30% improvement of the statement construction/compilation overhead of "
"0.3."
msgstr ""

#: ../../changelog/changelog_04.rst:3912
msgid ""
"All \"type\" keyword arguments, such as those to bindparam(), column(), "
"Column(), and func.<something>(), renamed to \"type\\_\".  Those objects "
"still name their \"type\" attribute as \"type\"."
msgstr ""

#: ../../changelog/changelog_04.rst:3920
msgid ""
"case_sensitive=(True|False) setting removed from schema items, since "
"checking this state added a lot of method call overhead and there was no "
"decent reason to ever set it to False.  Table and column names which are "
"all lower case will be treated as case-insensitive (yes we adjust for "
"Oracle's UPPERCASE style too)."
msgstr ""

#: ../../changelog/changelog_04.rst:4158
msgid "Table and column names loaded via reflection are now Unicode."
msgstr ""

#: ../../changelog/changelog_04.rst:4164
msgid "All standard column types are now supported, including SET."
msgstr ""

#: ../../changelog/changelog_04.rst:4170
msgid "Table reflection can now be performed in as little as one round-trip."
msgstr ""

#: ../../changelog/changelog_04.rst:4176
msgid "ANSI and ANSI_QUOTES sql modes are now supported."
msgstr ""

#: ../../changelog/changelog_04.rst:4182
msgid "Indexes are now reflected."
msgstr ""

#: ../../changelog/changelog_04.rst:4194
msgid ""
"Very rudimental support for OUT parameters added; use sql.outparam(name, "
"type) to set up an OUT parameter, just like bindparam(); after execution,"
" values are available via result.out_parameters dictionary."
msgstr ""

#: ../../changelog/changelog_04.rst:3930
msgid "Added context manager (with statement) support for transactions."
msgstr ""

#: ../../changelog/changelog_04.rst:3936
msgid "Added support for two phase commit, works with mysql and postgres so far."
msgstr ""

#: ../../changelog/changelog_04.rst:3942
msgid "Added a subtransaction implementation that uses savepoints."
msgstr ""

#: ../../changelog/changelog_04.rst:3948
msgid "Added support for savepoints."
msgstr ""

#: ../../changelog/changelog_04.rst:3954
msgid ""
"Tables can be reflected from the database en-masse without declaring them"
" in advance.  MetaData(engine, reflect=True) will load all tables present"
" in the database, or use metadata.reflect() for finer control."
msgstr ""

#: ../../changelog/changelog_04.rst:3962
msgid "DynamicMetaData has been renamed to ThreadLocalMetaData"
msgstr ""

#: ../../changelog/changelog_04.rst:3968
msgid "The ThreadLocalMetaData constructor now takes no arguments."
msgstr ""

#: ../../changelog/changelog_04.rst:3974
msgid "BoundMetaData has been removed- regular MetaData is equivalent"
msgstr ""

#: ../../changelog/changelog_04.rst:3980
msgid ""
"Numeric and Float types now have an \"asdecimal\" flag; defaults to True "
"for Numeric, False for Float.  When True, values are returned as "
"decimal.Decimal objects; when False, values are returned as float().  The"
" defaults of True/False are already the behavior for PG and MySQL's DBAPI"
" modules."
msgstr ""

#: ../../changelog/changelog_04.rst:3990
msgid ""
"New SQL operator implementation which removes all hardcoded operators "
"from expression structures and moves them into compilation; allows "
"greater flexibility of operator compilation; for example, \"+\" compiles "
"to \"||\" when used in a string context, or \"concat(a,b)\" on MySQL; "
"whereas in a numeric context it compiles to \"+\".  Fixes."
msgstr ""

#: ../../changelog/changelog_04.rst:4000
msgid ""
"\"Anonymous\" alias and label names are now generated at SQL compilation "
"time in a completely deterministic fashion... no more random hex IDs"
msgstr ""

#: ../../changelog/changelog_04.rst:4007
msgid ""
"Significant architectural overhaul to SQL elements (ClauseElement).  All "
"elements share a common \"mutability\" framework which allows a "
"consistent approach to in-place modifications of elements as well as "
"generative behavior.  Improves stability of the ORM which makes heavy "
"usage of mutations to SQL expressions."
msgstr ""

#: ../../changelog/changelog_04.rst:4017
msgid ""
"select() and union()'s now have \"generative\" behavior.  Methods like "
"order_by() and group_by() return a *new* instance - the original instance"
" is left unchanged.  Non-generative methods remain as well."
msgstr ""

#: ../../changelog/changelog_04.rst:4025
msgid ""
"The internals of select/union vastly simplified- all decision making "
"regarding \"is subquery\" and \"correlation\" pushed to SQL generation "
"phase. select() elements are now *never* mutated by their enclosing "
"containers or by any dialect's compilation process"
msgstr ""

#: ../../changelog/changelog_04.rst:4034
msgid ""
"select(scalar=True) argument is deprecated; use select(..).as_scalar(). "
"The resulting object obeys the full \"column\" interface and plays better"
" within expressions."
msgstr ""

#: ../../changelog/changelog_04.rst:4042
msgid ""
"Added select().with_prefix('foo') allowing any set of keywords to be "
"placed before the columns clause of the SELECT"
msgstr ""

#: ../../changelog/changelog_04.rst:4049
msgid "Added array slice support to row[<index>]"
msgstr ""

#: ../../changelog/changelog_04.rst:4055
msgid ""
"Result sets make a better attempt at matching the DBAPI types present in "
"cursor.description to the TypeEngine objects defined by the dialect, "
"which are then used for result-processing. Note this only takes effect "
"for textual SQL; constructed SQL statements always have an explicit type "
"map."
msgstr ""

#: ../../changelog/changelog_04.rst:4064
msgid ""
"Result sets from CRUD operations close their underlying cursor "
"immediately and will also autoclose the connection if defined for the "
"operation; this allows more efficient usage of connections for successive"
" CRUD operations with less chance of \"dangling connections\"."
msgstr ""

#: ../../changelog/changelog_04.rst:4073
msgid ""
"Column defaults and onupdate Python functions (i.e. passed to "
"ColumnDefault) may take zero or one arguments; the one argument is the "
"ExecutionContext, from which you can call "
"\"context.parameters[someparam]\" to access the other bind parameter "
"values affixed to the statement.  The connection used for the execution "
"is available as well so that you can pre-execute statements."
msgstr ""

#: ../../changelog/changelog_04.rst:4083
msgid ""
"Added \"explcit\" create/drop/execute support for sequences (i.e. you can"
" pass a \"connectable\" to each of those methods on Sequence)."
msgstr ""

#: ../../changelog/changelog_04.rst:4090
msgid "Better quoting of identifiers when manipulating schemas."
msgstr ""

#: ../../changelog/changelog_04.rst:4096
msgid ""
"Standardized the behavior for table reflection where types can't be "
"located; NullType is substituted instead, warning is raised."
msgstr ""

#: ../../changelog/changelog_04.rst:4103
msgid ""
"ColumnCollection (i.e. the 'c' attribute on tables) follows dictionary "
"semantics for \"__contains__\""
msgstr ""

#: ../../changelog/changelog_04.rst:4110
#, python-format
msgid ""
"Speed! The mechanics of result processing and bind parameter processing "
"have been overhauled, streamlined and optimized to issue as little method"
" calls as possible.  Bench tests for mass INSERT and mass rowset "
"iteration both show 0.4 to be over twice as fast as 0.3, using 68% fewer "
"function calls."
msgstr ""

#: ../../changelog/changelog_04.rst:4120
msgid ""
"You can now hook into the pool lifecycle and run SQL statements or other "
"logic at new each DBAPI connection, pool check-out and check-in."
msgstr ""

#: ../../changelog/changelog_04.rst:4127
msgid ""
"Connections gain a .properties collection, with contents scoped to the "
"lifetime of the underlying DBAPI connection"
msgstr ""

#: ../../changelog/changelog_04.rst:4134
msgid ""
"Removed auto_close_cursors and disallow_open_cursors arguments from Pool;"
" reduces overhead as cursors are normally closed by ResultProxy and "
"Connection."
msgstr ""

#: ../../changelog/changelog_04.rst:4142
msgid ""
"proxyengine is temporarily removed, pending an actually working "
"replacement."
msgstr ""

#: ../../changelog/changelog_04.rst:4149
msgid ""
"SelectResults has been replaced by Query.  SelectResults / "
"SelectResultsExt still exist but just return a slightly modified Query "
"object for backwards-compatibility.  join_to() method from SelectResults "
"isn't present anymore, need to use join()."
msgstr ""

#: ../../changelog/changelog_04.rst:4188
msgid "Added PGArray datatype for using postgres array datatypes."
msgstr ""

