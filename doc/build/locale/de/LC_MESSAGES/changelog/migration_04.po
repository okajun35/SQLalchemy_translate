# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../changelog/migration_04.rst:3
msgid "What's new in SQLAlchemy 0.4?"
msgstr ""

#: ../../changelog/migration_04.rst:5
msgid "About this Document"
msgstr ""

#: ../../changelog/migration_04.rst:7
msgid ""
"This document describes changes between SQLAlchemy version 0.3, last "
"released October 14, 2007, and SQLAlchemy version 0.4, last released "
"October 12, 2008."
msgstr ""

#: ../../changelog/migration_04.rst:11
msgid "Document date:  March 21, 2008"
msgstr ""

#: ../../changelog/migration_04.rst:14
msgid "First Things First"
msgstr ""

#: ../../changelog/migration_04.rst:16
msgid ""
"If you're using any ORM features, make sure you import from "
"``sqlalchemy.orm``:"
msgstr ""

#: ../../changelog/migration_04.rst:24
msgid ""
"Secondly, anywhere you used to say ``engine=``, ``connectable=``, "
"``bind_to=``, ``something.engine``, ``metadata.connect()``, use ``bind``:"
msgstr ""

#: ../../changelog/migration_04.rst:41
msgid ""
"Got those ?  Good!  You're now (95%) 0.4 compatible.  If you're using "
"0.3.10, you can make these changes immediately; they'll work there too."
msgstr ""

#: ../../changelog/migration_04.rst:46
msgid "Module Imports"
msgstr ""

#: ../../changelog/migration_04.rst:48
msgid ""
"In 0.3, \"``from sqlachemy import *``\" would import all of sqlachemy's "
"sub-modules into your namespace. Version 0.4 no longer imports sub-"
"modules into the namespace. This may mean you need to add extra imports "
"into your code."
msgstr ""

#: ../../changelog/migration_04.rst:53
msgid "In 0.3, this code worked:"
msgstr ""

#: ../../changelog/migration_04.rst:62
msgid "In 0.4, one must do:"
msgstr ""

#: ../../changelog/migration_04.rst:73
msgid "Object Relational Mapping"
msgstr ""

#: ../../changelog/migration_04.rst:76
msgid "Querying"
msgstr ""

#: ../../changelog/migration_04.rst:79
msgid "New Query API"
msgstr ""

#: ../../changelog/migration_04.rst:81
msgid ""
"Query is standardized on the generative interface (old interface is still"
" there, just deprecated).   While most of the generative interface is "
"available in 0.3, the 0.4 Query has the inner guts to match the "
"generative outside, and has a lot more tricks.  All result narrowing is "
"via ``filter()`` and ``filter_by()``, limiting/offset is either through "
"array slices or ``limit()``/``offset()``, joining is via ``join()`` and "
"``outerjoin()`` (or more manually, through ``select_from()`` as well as "
"manually-formed criteria)."
msgstr ""

#: ../../changelog/migration_04.rst:91
msgid "To avoid deprecation warnings, you must make some changes to your 03 code"
msgstr ""

#: ../../changelog/migration_04.rst:94
msgid "User.query.get_by( \\**kwargs )"
msgstr ""

#: ../../changelog/migration_04.rst:100
msgid "User.query.select_by( \\**kwargs )"
msgstr ""

#: ../../changelog/migration_04.rst:106
msgid "User.query.select()"
msgstr ""

#: ../../changelog/migration_04.rst:113
msgid "New Property-Based Expression Constructs"
msgstr ""

#: ../../changelog/migration_04.rst:115
msgid ""
"By far the most palpable difference within the ORM is that you can now "
"construct your query criterion using class-based attributes directly.  "
"The \".c.\" prefix is no longer needed when working with mapped classes:"
msgstr ""

#: ../../changelog/migration_04.rst:124
msgid ""
"While simple column-based comparisons are no big deal, the class "
"attributes have some new \"higher level\" constructs available, including"
" what was previously only available in ``filter_by()``:"
msgstr ""

#: ../../changelog/migration_04.rst:155
msgid ""
"The ``Column`` collection remains available on mapped classes in the "
"``.c`` attribute.  Note that property-based expressions are only "
"available with mapped properties of mapped classes.  ``.c`` is still used"
" to access columns in regular tables and selectable objects produced from"
" SQL Expressions."
msgstr ""

#: ../../changelog/migration_04.rst:163
msgid "Automatic Join Aliasing"
msgstr ""

#: ../../changelog/migration_04.rst:165
msgid "We've had join() and outerjoin() for a while now:"
msgstr ""

#: ../../changelog/migration_04.rst:171
msgid "Now you can alias them:"
msgstr ""

#: ../../changelog/migration_04.rst:178
msgid ""
"The above will create two joins from orders->items using aliases.  the "
"``filter()`` call subsequent to each will adjust its table criterion to "
"that of the alias.  To get at the ``Item`` objects, use ``add_entity()`` "
"and target each join with an ``id``:"
msgstr ""

#: ../../changelog/migration_04.rst:190
msgid "Returns tuples in the form: ``(Order, Item, Item)``."
msgstr ""

#: ../../changelog/migration_04.rst:193
msgid "Self-referential Queries"
msgstr ""

#: ../../changelog/migration_04.rst:195
msgid ""
"So query.join() can make aliases now.  What does that give us ?  Self-"
"referential queries !   Joins can be done without any ``Alias`` objects:"
msgstr ""

#: ../../changelog/migration_04.rst:209
msgid ""
"To add criterion for each table along the way in an aliased join, you can"
" use ``from_joinpoint`` to keep joining against the same line of aliases:"
msgstr ""

#: ../../changelog/migration_04.rst:231
msgid "``query.populate_existing()``"
msgstr ""

#: ../../changelog/migration_04.rst:233
msgid ""
"The eager version of ``query.load()`` (or ``session.refresh()``).  Every "
"instance loaded from the query, including all eagerly loaded items, get "
"refreshed immediately if already present in the session:"
msgstr ""

#: ../../changelog/migration_04.rst:243
msgid "Relations"
msgstr ""

#: ../../changelog/migration_04.rst:246
msgid "SQL Clauses Embedded in Updates/Inserts"
msgstr ""

#: ../../changelog/migration_04.rst:248
msgid ""
"For inline execution of SQL clauses, embedded right in the UPDATE or "
"INSERT, during a ``flush()``:"
msgstr ""

#: ../../changelog/migration_04.rst:260
msgid ""
"The column-attribute is set up with a deferred loader after the "
"operation, so that it issues the SQL to load the new value when you next "
"access."
msgstr ""

#: ../../changelog/migration_04.rst:265
msgid "Self-referential and Cyclical Eager Loading"
msgstr ""

#: ../../changelog/migration_04.rst:267
msgid ""
"Since our alias-fu has improved, ``relation()`` can join along the same "
"table \\*any number of times*; you tell it how deep you want to go.  Lets"
" show the self-referential ``TreeNode`` more clearly:"
msgstr ""

#: ../../changelog/migration_04.rst:286
msgid "So what happens when we say:"
msgstr ""

#: ../../changelog/migration_04.rst:292
msgid "?  A join along aliases, three levels deep off the parent:"
msgstr ""

#: ../../changelog/migration_04.rst:306
msgid ""
"Notice the nice clean alias names too.  The joining doesn't care if it's "
"against the same immediate table or some other object which then cycles "
"back to the beginning.  Any kind of chain of eager loads can cycle back "
"onto itself when ``join_depth`` is specified.  When not present, eager "
"loading automatically stops when it hits a cycle."
msgstr ""

#: ../../changelog/migration_04.rst:314
msgid "Composite Types"
msgstr ""

#: ../../changelog/migration_04.rst:316
msgid ""
"This is one from the Hibernate camp.  Composite Types let you define a "
"custom datatype that is composed of more than one column (or one column, "
"if you wanted).   Lets define a new type, ``Point``.  Stores an x/y "
"coordinate:"
msgstr ""

#: ../../changelog/migration_04.rst:334
msgid ""
"The way the ``Point`` object is defined is specific to a custom type; "
"constructor takes a list of arguments, and the ``__composite_values__()``"
" method produces a sequence of those arguments.  The order will match up "
"to our mapper, as we'll see in a moment."
msgstr ""

#: ../../changelog/migration_04.rst:340
msgid "Let's create a table of vertices storing two points per row:"
msgstr ""

#: ../../changelog/migration_04.rst:352
msgid ""
"Then, map it !  We'll create a ``Vertex`` object which stores two "
"``Point`` objects:"
msgstr ""

#: ../../changelog/migration_04.rst:367
msgid ""
"Once you've set up your composite type, it's usable just like any other "
"type:"
msgstr ""

#: ../../changelog/migration_04.rst:380
msgid ""
"If you'd like to define the way the mapped attributes generate SQL "
"clauses when used in expressions, create your own "
"``sqlalchemy.orm.PropComparator`` subclass, defining any of the common "
"operators (like ``__eq__()``, ``__le__()``, etc.), and send it in to "
"``composite()``.  Composite types work as primary keys too, and are "
"usable in ``query.get()``:"
msgstr ""

#: ../../changelog/migration_04.rst:394
msgid "``dynamic_loader()`` relations"
msgstr ""

#: ../../changelog/migration_04.rst:396
msgid ""
"A ``relation()`` that returns a live ``Query`` object for all read "
"operations.  Write operations are limited to just ``append()`` and "
"``remove()``, changes to the collection are not visible until the session"
" is flushed.  This feature is particularly handy with an \"autoflushing\""
" session which will flush before each query."
msgstr ""

#: ../../changelog/migration_04.rst:420
msgid "New Options: ``undefer_group()``, ``eagerload_all()``"
msgstr ""

#: ../../changelog/migration_04.rst:422
msgid ""
"A couple of query options which are handy. ``undefer_group()`` marks a "
"whole group of \"deferred\" columns as undeferred:"
msgstr ""

#: ../../changelog/migration_04.rst:436
msgid ""
"and ``eagerload_all()`` sets a chain of attributes to be eager in one "
"pass:"
msgstr ""

#: ../../changelog/migration_04.rst:453
msgid "New Collection API"
msgstr ""

#: ../../changelog/migration_04.rst:455
msgid ""
"Collections are no longer proxied by an {{{InstrumentedList}}} proxy, and"
" access to members, methods and attributes is direct.   Decorators now "
"intercept objects entering and leaving the collection, and it is now "
"possible to easily write a custom collection class that manages its own "
"membership.  Flexible decorators also replace the named method interface "
"of custom collections in 0.3, allowing any class to be easily adapted to "
"use as a collection container."
msgstr ""

#: ../../changelog/migration_04.rst:464
msgid ""
"Dictionary-based collections are now much easier to use and fully "
"``dict``-like.  Changing ``__iter__`` is no longer needed for ``dict``s, "
"and new built-in ``dict`` types cover many needs:"
msgstr ""

#: ../../changelog/migration_04.rst:478
msgid ""
"Existing 0.3 ``dict``-like and freeform object derived collection classes"
" will need to be updated for the new API. In most cases this is simply a "
"matter of adding a couple decorators to the class definition."
msgstr ""

#: ../../changelog/migration_04.rst:484
msgid "Mapped Relations from External Tables/Subqueries"
msgstr ""

#: ../../changelog/migration_04.rst:486
msgid ""
"This feature quietly appeared in 0.3 but has been improved in 0.4 thanks "
"to better ability to convert subqueries against a table into subqueries "
"against an alias of that table; this is key for eager loading, aliased "
"joins in queries, etc.  It reduces the need to create mappers against "
"select statements when you just need to add some extra columns or "
"subqueries:"
msgstr ""

#: ../../changelog/migration_04.rst:503
msgid "a typical query looks like:"
msgstr ""

#: ../../changelog/migration_04.rst:513
msgid "Horizontal Scaling (Sharding) API"
msgstr ""

#: ../../changelog/migration_04.rst:515
msgid "[browser:/sqlalchemy/trunk/examples/sharding/attribute_shard .py]"
msgstr ""

#: ../../changelog/migration_04.rst:519
msgid "Sessions"
msgstr ""

#: ../../changelog/migration_04.rst:522
msgid "New Session Create Paradigm; SessionContext, assignmapper Deprecated"
msgstr ""

#: ../../changelog/migration_04.rst:524
msgid ""
"That's right, the whole shebang is being replaced with two "
"configurational functions.  Using both will produce the most 0.1-ish feel"
" we've had since 0.1 (i.e., the least amount of typing)."
msgstr ""

#: ../../changelog/migration_04.rst:529
msgid ""
"Configure your own ``Session`` class right where you define your "
"``engine`` (or anywhere):"
msgstr ""

#: ../../changelog/migration_04.rst:546
msgid ""
"If you need to post-configure your Session, say with an engine, add it "
"later with ``configure()``:"
msgstr ""

#: ../../changelog/migration_04.rst:553
msgid ""
"All the behaviors of ``SessionContext`` and the ``query`` and "
"``__init__`` methods of ``assignmapper`` are moved into the new "
"``scoped_session()`` function, which is compatible with both "
"``sessionmaker`` as well as ``create_session()``:"
msgstr ""

#: ../../changelog/migration_04.rst:577
msgid ""
"When using a thread-local ``Session``, the returned class has all of "
"``Session's`` interface implemented as classmethods, and "
"\"assignmapper\"'s functionality is available using the ``mapper`` "
"classmethod.  Just like the old ``objectstore`` days...."
msgstr ""

#: ../../changelog/migration_04.rst:595
msgid "Sessions are again Weak Referencing By Default"
msgstr ""

#: ../../changelog/migration_04.rst:597
msgid ""
"The weak_identity_map flag is now set to ``True`` by default on Session."
"  Instances which are externally deferenced and fall out of scope are "
"removed from the session automatically.   However, items which have "
"\"dirty\" changes present will remain strongly referenced until those "
"changes are flushed at which case the object reverts to being weakly "
"referenced (this works for 'mutable' types, like picklable attributes, as"
" well).  Setting weak_identity_map to ``False`` restores the old strong-"
"referencing behavior for those of you using the session like a cache."
msgstr ""

#: ../../changelog/migration_04.rst:609
msgid "Auto-Transactional Sessions"
msgstr ""

#: ../../changelog/migration_04.rst:611
msgid ""
"As you might have noticed above, we are calling ``commit()`` on "
"``Session``.  The flag ``transactional=True`` means the ``Session`` is "
"always in a transaction, ``commit()`` persists permanently."
msgstr ""

#: ../../changelog/migration_04.rst:617
msgid "Auto-Flushing Sessions"
msgstr ""

#: ../../changelog/migration_04.rst:619
msgid ""
"Also, ``autoflush=True`` means the ``Session`` will ``flush()`` before "
"each ``query`` as well as when you call ``flush()`` or ``commit()``.  So "
"now this will work:"
msgstr ""

#: ../../changelog/migration_04.rst:636
msgid "Transactional methods moved onto sessions"
msgstr ""

#: ../../changelog/migration_04.rst:638
msgid ""
"``commit()`` and ``rollback()``, as well as ``begin()`` are now directly "
"on ``Session``.  No more need to use ``SessionTransaction`` for anything "
"(it remains in the background)."
msgstr ""

#: ../../changelog/migration_04.rst:654
msgid ""
"Sharing a ``Session`` with an enclosing engine-level (i.e. non-ORM) "
"transaction is easy:"
msgstr ""

#: ../../changelog/migration_04.rst:671
msgid "Nested Session Transactions with SAVEPOINT"
msgstr ""

#: ../../changelog/migration_04.rst:673 ../../changelog/migration_04.rst:681
msgid "Available at the Engine and ORM level.  ORM docs so far:"
msgstr ""

#: ../../changelog/migration_04.rst:675 ../../changelog/migration_04.rst:683
msgid "http://www.sqlalchemy.org/docs/04/session.html#unitofwork_ma naging"
msgstr ""

#: ../../changelog/migration_04.rst:679
msgid "Two-Phase Commit Sessions"
msgstr ""

#: ../../changelog/migration_04.rst:687
msgid "Inheritance"
msgstr ""

#: ../../changelog/migration_04.rst:690
msgid "Polymorphic Inheritance with No Joins or Unions"
msgstr ""

#: ../../changelog/migration_04.rst:692
msgid ""
"New docs for inheritance:  http://www.sqlalchemy.org/docs/04 "
"/mappers.html#advdatamapping_mapper_inheritance_joined"
msgstr ""

#: ../../changelog/migration_04.rst:696
msgid "Better Polymorphic Behavior with ``get()``"
msgstr ""

#: ../../changelog/migration_04.rst:698
msgid ""
"All classes within a joined-table inheritance hierarchy get an "
"``_instance_key`` using the base class, i.e. ``(BaseClass, (1, ), "
"None)``.  That way when you call ``get()`` a ``Query`` against the base "
"class, it can locate subclass instances in the current identity map "
"without querying the database."
msgstr ""

#: ../../changelog/migration_04.rst:706
msgid "Types"
msgstr ""

#: ../../changelog/migration_04.rst:709
msgid "Custom Subclasses of ``sqlalchemy.types.TypeDecorator``"
msgstr ""

#: ../../changelog/migration_04.rst:711
msgid ""
"There is a `New API <http://www.sqlalchemy.org/docs/04/types "
".html#types_custom>`_ for subclassing a TypeDecorator. Using the 0.3 API "
"causes compilation errors in some cases."
msgstr ""

#: ../../changelog/migration_04.rst:716
msgid "SQL Expressions"
msgstr ""

#: ../../changelog/migration_04.rst:719
msgid "All New, Deterministic Label/Alias Generation"
msgstr ""

#: ../../changelog/migration_04.rst:721
msgid ""
"All the \"anonymous\" labels and aliases use a simple <name>_<number> "
"format now.  SQL is much easier to read and is compatible with plan "
"optimizer caches.  Just check out some of the examples in the tutorials: "
"http://www.sqlalchemy.org/docs/04/ormtutorial.html "
"http://www.sqlalchemy.org/docs/04/sqlexpression.html"
msgstr ""

#: ../../changelog/migration_04.rst:729
msgid "Generative select() Constructs"
msgstr ""

#: ../../changelog/migration_04.rst:731
msgid ""
"This is definitely the way to go with ``select()``.  See htt "
"p://www.sqlalchemy.org/docs/04/sqlexpression.html#sql_transf orm ."
msgstr ""

#: ../../changelog/migration_04.rst:736
msgid "New Operator System"
msgstr ""

#: ../../changelog/migration_04.rst:738
msgid ""
"SQL operators and more or less every SQL keyword there is are now "
"abstracted into the compiler layer.  They now act intelligently and are "
"type/backend aware, see: http://www.sq "
"lalchemy.org/docs/04/sqlexpression.html#sql_operators"
msgstr ""

#: ../../changelog/migration_04.rst:744
msgid "All ``type`` Keyword Arguments Renamed to ``type_``"
msgstr ""

#: ../../changelog/migration_04.rst:746
msgid "Just like it says:"
msgstr ""

#: ../../changelog/migration_04.rst:753
msgid "in\\_ Function Changed to Accept Sequence or Selectable"
msgstr ""

#: ../../changelog/migration_04.rst:755
msgid ""
"The in\\_ function now takes a sequence of values or a selectable as its "
"sole argument. The previous API of passing in values as positional "
"arguments still works, but is now deprecated. This means that"
msgstr ""

#: ../../changelog/migration_04.rst:765
msgid "should be changed to"
msgstr ""

#: ../../changelog/migration_04.rst:773
msgid "Schema and Reflection"
msgstr ""

#: ../../changelog/migration_04.rst:776
msgid "``MetaData``, ``BoundMetaData``, ``DynamicMetaData``..."
msgstr ""

#: ../../changelog/migration_04.rst:778
msgid ""
"In the 0.3.x series, ``BoundMetaData`` and ``DynamicMetaData`` were "
"deprecated in favor of ``MetaData`` and ``ThreadLocalMetaData``.  The "
"older names have been removed in 0.4.  Updating is simple:"
msgstr ""

#: ../../changelog/migration_04.rst:799
msgid ""
"The seldom-used ``name`` parameter to ``MetaData`` types has been "
"removed.  The ``ThreadLocalMetaData`` constructor now takes no arguments."
"  Both types can now be bound to an ``Engine`` or a single "
"``Connection``."
msgstr ""

#: ../../changelog/migration_04.rst:805
msgid "One Step Multi-Table Reflection"
msgstr ""

#: ../../changelog/migration_04.rst:807
msgid ""
"You can now load table definitions and automatically create ``Table`` "
"objects from an entire database or schema in one pass:"
msgstr ""

#: ../../changelog/migration_04.rst:817
msgid ""
"``MetaData`` also gains a ``.reflect()`` method enabling finer control "
"over the loading process, including specification of a subset of "
"available tables to load."
msgstr ""

#: ../../changelog/migration_04.rst:822
msgid "SQL Execution"
msgstr ""

#: ../../changelog/migration_04.rst:825
msgid "``engine``, ``connectable``, and ``bind_to`` are all now ``bind``"
msgstr ""

#: ../../changelog/migration_04.rst:828
msgid "``Transactions``, ``NestedTransactions`` and ``TwoPhaseTransactions``"
msgstr ""

#: ../../changelog/migration_04.rst:831
msgid "Connection Pool Events"
msgstr ""

#: ../../changelog/migration_04.rst:833
msgid ""
"The connection pool now fires events when new DB-API connections are "
"created, checked out and checked back into the pool.   You can use these "
"to execute session-scoped SQL setup statements on fresh connections, for "
"example."
msgstr ""

#: ../../changelog/migration_04.rst:839
msgid "Oracle Engine Fixed"
msgstr ""

#: ../../changelog/migration_04.rst:841
msgid ""
"In 0.3.11, there were bugs in the Oracle Engine on how Primary Keys are "
"handled.  These bugs could cause programs that worked fine with other "
"engines, such as sqlite, to fail when using the Oracle Engine.  In 0.4, "
"the Oracle Engine has been reworked, fixing these Primary Key problems."
msgstr ""

#: ../../changelog/migration_04.rst:848
msgid "Out Parameters for Oracle"
msgstr ""

#: ../../changelog/migration_04.rst:856
msgid "Connection-bound ``MetaData``, ``Sessions``"
msgstr ""

#: ../../changelog/migration_04.rst:858
msgid "``MetaData`` and ``Session`` can be explicitly bound to a connection:"
msgstr ""

#: ../../changelog/migration_04.rst:867
msgid "Faster, More Foolproof ``ResultProxy`` Objects"
msgstr ""

