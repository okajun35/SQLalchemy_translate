# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/inheritance_loading.rst:6
msgid "Loading Inheritance Hierarchies"
msgstr ""

#: ../../orm/inheritance_loading.rst:8
msgid ""
"When classes are mapped in inheritance hierarchies using the \"joined\", "
"\"single\", or \"concrete\" table inheritance styles as described at "
":ref:`inheritance_toplevel`, the usual behavior is that a query for a "
"particular base class will also yield objects corresponding to subclasses"
" as well.   When a single query is capable of returning a result with a "
"different class or subclasses per result row, we use the term "
"\"polymorphic loading\"."
msgstr ""

#: ../../orm/inheritance_loading.rst:16
msgid ""
"Within the realm of polymorphic loading, specifically with joined and "
"single table inheritance, there is an additional problem of which "
"subclass attributes are to be queried up front, and which are to be "
"loaded later. When an attribute of a particular subclass is queried up "
"front, we can use it in our query as something to filter on, and it also "
"will be loaded when we get our objects back.   If it's not queried up "
"front, it gets loaded later when we first need to access it.   Basic "
"control of this behavior is provided using the "
":func:`.orm.with_polymorphic` function, as well as two variants, the "
"mapper configuration :paramref:`.mapper.with_polymorphic` in conjunction "
"with the :paramref:`.mapper.polymorphic_load` option, and the "
":class:`.Query` -level :meth:`.Query.with_polymorphic` method.    The "
"\"with_polymorphic\" family each provide a means of specifying which "
"specific subclasses of a particular base class should be included within "
"a query, which implies what columns and tables will be available in the "
"SELECT."
msgstr ""

#: ../../orm/inheritance_loading.rst:34
msgid "Using with_polymorphic"
msgstr ""

#: ../../orm/inheritance_loading.rst:36
msgid ""
"For the following sections, assume the ``Employee`` / ``Engineer`` / "
"``Manager`` examples introduced in :ref:`inheritance_toplevel`."
msgstr ""

#: ../../orm/inheritance_loading.rst:39
msgid ""
"Normally, when a :class:`.Query` specifies the base class of an "
"inheritance hierarchy, only the columns that are local to that base class"
" are queried::"
msgstr ""

#: ../../orm/inheritance_loading.rst:45
msgid ""
"Above, for both single and joined table inheritance, only the columns "
"local to ``Employee`` will be present in the SELECT.   We may get back "
"instances of ``Engineer`` or ``Manager``, however they will not have the "
"additional attributes loaded until we first access them, at which point a"
" lazy load is emitted."
msgstr ""

#: ../../orm/inheritance_loading.rst:51
msgid ""
"Similarly, if we wanted to refer to columns mapped to ``Engineer`` or "
"``Manager`` in our query that's against ``Employee``, these columns "
"aren't available directly in either the single or joined table "
"inheritance case, since the ``Employee`` entity does not refer to these "
"columns (note that for single-table inheritance, this is common if "
"Declarative is used, but not for a classical mapping)."
msgstr ""

#: ../../orm/inheritance_loading.rst:58
msgid ""
"To solve both of these issues, the :func:`.orm.with_polymorphic` function"
" provides a special :class:`.AliasedClass` that represents a range of "
"columns across subclasses. This object can be used in a :class:`.Query` "
"like any other alias.  When queried, it represents all the columns "
"present in the classes given::"
msgstr ""

#: ../../orm/inheritance_loading.rst:70
msgid ""
"If the above mapping were using joined table inheritance, the SELECT "
"statement for the above would be:"
msgstr ""

#: ../../orm/inheritance_loading.rst:91
msgid ""
"Where above, the additional tables / columns for \"engineer\" and "
"\"manager\" are included.  Similar behavior occurs in the case of single "
"table inheritance."
msgstr ""

#: ../../orm/inheritance_loading.rst:94
msgid ""
":func:`.orm.with_polymorphic` accepts a single class or mapper, a list of"
" classes/mappers, or the string ``'*'`` to indicate all subclasses:"
msgstr ""

#: ../../orm/inheritance_loading.rst:110
msgid "Using aliasing with with_polymorphic"
msgstr ""

#: ../../orm/inheritance_loading.rst:112
msgid ""
"The :func:`.orm.with_polymorphic` function also provides \"aliasing\" of "
"the polymorphic selectable itself, meaning, two different "
":func:`.orm.with_polymorphic` entities, referring to the same class "
"hierarchy, can be used together.  This is available using the "
":paramref:`.orm.with_polymorphic.aliased` flag. For a polymorphic "
"selectable that is across multiple tables, the default behavior is to "
"wrap the selectable into a subquery.  Below we emit a query that will "
"select for \"employee or manager\" paired with \"employee or engineer\" "
"on employees with the same name:"
msgstr ""

#: ../../orm/inheritance_loading.rst:172
msgid ""
"The creation of subqueries above is very verbose.  While it creates the "
"best encapsulation of the two distinct queries, it may be inefficient. "
":func:`.orm.with_polymorphic` includes an additional flag to help with "
"this situation, :paramref:`.orm.with_polymorphic.flat`, which will "
"\"flatten\" the subquery / join combination into straight joins, applying"
" aliasing to the individual tables instead.   Setting "
":paramref:`.orm.with_polymorphic.flat` implies "
":paramref:`.orm.with_polymorphic.aliased`, so only one flag is necessary:"
msgstr ""

#: ../../orm/inheritance_loading.rst:220
msgid ""
"Note above, when using :paramref:`.orm.with_polymorphic.flat`, it is "
"often the case when used in conjunction with joined table inheritance "
"that we get a right-nested JOIN in our statement.   Some older databases,"
" in particular older versions of SQLite, may have a problem with this "
"syntax, although virtually all modern database versions now support this "
"syntax."
msgstr ""

#: ../../orm/inheritance_loading.rst:228
msgid ""
"The :paramref:`.orm.with_polymorphic.flat` flag only applies to the use "
"of :paramref:`.with_polymorphic` with **joined table inheritance** and "
"when the :paramref:`.with_polymorphic.selectable` argument is **not** "
"used."
msgstr ""

#: ../../orm/inheritance_loading.rst:233
msgid "Referring to Specific Subclass Attributes"
msgstr ""

#: ../../orm/inheritance_loading.rst:235
msgid ""
"The entity returned by :func:`.orm.with_polymorphic` is an "
":class:`.AliasedClass` object, which can be used in a :class:`.Query` "
"like any other alias, including named attributes for those attributes on "
"the ``Employee`` class.   In our previous example, ``eng_plus_manager`` "
"becomes the entity that we use to refer to the three-way outer join "
"above.  It also includes namespaces for each class named in the list of "
"classes, so that attributes specific to those subclasses can be called "
"upon as well.   The following example illustrates calling upon attributes"
" specific to ``Engineer`` as well as ``Manager`` in terms of "
"``eng_plus_manager``::"
msgstr ""

#: ../../orm/inheritance_loading.rst:255
msgid "Setting with_polymorphic at mapper configuration time"
msgstr ""

#: ../../orm/inheritance_loading.rst:257
msgid ""
"The :func:`.orm.with_polymorphic` function serves the purpose of allowing"
" \"eager\" loading of attributes from subclass tables, as well as the "
"ability to refer to the attributes from subclass tables at query time.   "
"Historically, the \"eager loading\" of columns has been the more "
"important part of the equation.   So just as eager loading for "
"relationships can be specified as a configurational option, the "
":paramref:`.mapper.with_polymorphic` configuration parameter allows an "
"entity to use a polymorphic load by default.  We can add the parameter to"
" our ``Employee`` mapping first introduced at :ref:`joined_inheritance`::"
msgstr ""

#: ../../orm/inheritance_loading.rst:279
msgid ""
"Above is a common setting for :paramref:`.mapper.with_polymorphic`, which"
" is to indicate an asterisk to load all subclass columns.   In the case "
"of joined table inheritance, this option should be used sparingly, as it "
"implies that the mapping will always emit a (often large) series of LEFT "
"OUTER JOIN to many tables, which is not efficient from a SQL perspective."
"   For single table inheritance, specifying the asterisk is often a good "
"idea as the load is still against a single table only, but an additional "
"lazy load of subclass-mapped columns will be prevented."
msgstr ""

#: ../../orm/inheritance_loading.rst:288
msgid ""
"Using :func:`.orm.with_polymorphic` or :meth:`.Query.with_polymorphic` "
"will override the mapper-level :paramref:`.mapper.with_polymorphic` "
"setting."
msgstr ""

#: ../../orm/inheritance_loading.rst:291
msgid ""
"The :paramref:`.mapper.with_polymorphic` option also accepts a list of "
"classes just like :func:`.orm.with_polymorphic` to polymorphically load "
"among a subset of classes.  However, when using Declarative, providing "
"classes to this list is not directly possible as the subclasses we'd like"
" to add are not available yet.   Instead, we can specify on each subclass"
" that they should individually participate in polymorphic loading by "
"default using the :paramref:`.mapper.polymorphic_load` parameter::"
msgstr ""

#: ../../orm/inheritance_loading.rst:317
msgid ""
"Setting the :paramref:`.mapper.polymorphic_load` parameter to the value "
"``\"inline\"`` means that the ``Engineer`` and ``Manager`` classes above "
"are part of the \"polymorphic load\" of the base ``Employee`` class by "
"default, exactly as though they had been appended to the "
":paramref:`.mapper.with_polymorphic` list of classes."
msgstr ""

#: ../../orm/inheritance_loading.rst:324
msgid "Setting with_polymorphic against a query"
msgstr ""

#: ../../orm/inheritance_loading.rst:326
msgid ""
"The :func:`.orm.with_polymorphic` function evolved from a query-level "
"method :meth:`.Query.with_polymorphic`.  This method has the same purpose"
" as :func:`.orm.with_polymorphic`, except is not as flexible in its usage"
" patterns in that it only applies to the first entity of the "
":class:`.Query`.   It then takes effect for all occurences of that "
"entity, so that the entity (and its subclasses) can be referred to "
"directly, rather than using an alias object.  For simple cases it might "
"be considered to be more succinct::"
msgstr ""

#: ../../orm/inheritance_loading.rst:344
msgid ""
"The :meth:`.Query.with_polymorphic` method has a more complicated job "
"than the :func:`.orm.with_polymorphic` function, as it needs to correctly"
" transform entities like ``Engineer`` and ``Manager`` appropriately, but "
"not interfere with other entities.  If its flexibility is lacking, switch"
" to using :func:`.orm.with_polymorphic`."
msgstr ""

#: ../../orm/inheritance_loading.rst:353
msgid "Polymorphic Selectin Loading"
msgstr ""

#: ../../orm/inheritance_loading.rst:355
msgid ""
"An alternative to using the :func:`.orm.with_polymorphic` family of "
"functions to \"eagerly\" load the additional subclasses on an inheritance"
" mapping, primarily when using joined table inheritance, is to use "
"polymorphic \"selectin\" loading.   This is an eager loading feature "
"which works similarly to the :ref:`selectin_eager_loading` feature of "
"relationship loading.   Given our example mapping, we can instruct a load"
" of ``Employee`` to emit an extra SELECT per subclass by using the "
":func:`.orm.selectin_polymorphic` loader option::"
msgstr ""

#: ../../orm/inheritance_loading.rst:370
msgid ""
"When the above query is run, two additional SELECT statements will be "
"emitted:"
msgstr ""

#: ../../orm/inheritance_loading.rst:401
msgid ""
"We can similarly establish the above style of loading to take place by "
"default by specifying the :paramref:`.mapper.polymorphic_load` parameter,"
" using the value ``\"selectin\"`` on a per-subclass basis::"
msgstr ""

#: ../../orm/inheritance_loading.rst:437
msgid ""
"Unlike when using :func:`.orm.with_polymorphic`, when using the "
":func:`.orm.selectin_polymorphic` style of loading, we do **not** have "
"the ability to refer to the ``Engineer`` or ``Manager`` entities within "
"our main query as filter, order by, or other criteria, as these entities "
"are not present in the initial query that is used to locate results.   "
"However, we can apply loader options that apply towards ``Engineer`` or "
"``Manager``, which will take effect when the secondary SELECT is emitted."
"  Below we assume ``Manager`` has an additional relationship "
"``Manager.paperwork``, that we'd like to eagerly load as well.  We can "
"use any type of eager loading, such as joined eager loading via the "
":func:`.joinedload` function::"
msgstr ""

#: ../../orm/inheritance_loading.rst:456
msgid ""
"Using the query above, we get three SELECT statements emitted, however "
"the one against ``Manager`` will be:"
msgstr ""

#: ../../orm/inheritance_loading.rst:475
msgid ""
"Note that selectin polymorphic loading has similar caveats as that of "
"selectin relationship loading; for entities that make use of a composite "
"primary key, the database in use must support tuples with \"IN\", "
"currently known to work with MySQL and Postgresql."
msgstr ""

#: ../../orm/inheritance_loading.rst:482
msgid ""
"The selectin polymorphic loading feature should be considered as "
"**experimental** within early releases of the 1.2 series."
msgstr ""

#: ../../orm/inheritance_loading.rst:488
msgid "Combining selectin and with_polymorphic"
msgstr ""

#: ../../orm/inheritance_loading.rst:490
msgid "works as of 1.2.0b3"
msgstr ""

#: ../../orm/inheritance_loading.rst:492
msgid ""
"With careful planning, selectin loading can be applied against a "
"hierarchy that itself uses \"with_polymorphic\".  A particular use case "
"is that of using selectin loading to load a joined-inheritance subtable, "
"which then uses \"with_polymorphic\" to refer to further sub-classes, "
"which may be joined- or single-table inheritanace.  If we added a class "
"``VicePresident`` that extends ``Manager`` using single-table "
"inheritance, we could ensure that a load of ``Manager`` also fully loads "
"``VicePresident`` subtypes at the same time::"
msgstr ""

#: ../../orm/inheritance_loading.rst:521
msgid ""
"Above, we add a ``vp_info`` column to the ``manager`` table, local to the"
" ``VicePresident`` subclass.   This subclass is linked to the polymorphic"
" identity ``\"vp\"`` which refers to rows which have this data.     By "
"setting the load style to \"inline\", it means that a load of ``Manager``"
" objects will also ensure that the ``vp_info`` column is queried for in "
"the same SELECT statement. A query against ``Employee`` that encounters a"
" ``Manager`` row would emit similarly to the following:"
msgstr ""

#: ../../orm/inheritance_loading.rst:544
msgid ""
"Combining \"selectin\" polymorhic loading with query-time "
":func:`.orm.with_polymorphic` usage is also possible (though this is very"
" outer-space stuff!); assuming the above mappings had no "
"``polymorphic_load`` set up, we could get the same result as follows::"
msgstr ""

#: ../../orm/inheritance_loading.rst:559
msgid "Referring to specific subtypes on relationships"
msgstr ""

#: ../../orm/inheritance_loading.rst:561
msgid ""
"Mapped attributes which correspond to a :func:`.relationship` are used in"
" querying in order to refer to the linkage between two mappings.  Common "
"uses for this are to refer to a :func:`.relationship` in "
":meth:`.Query.join` as well as in loader options like "
":func:`.joinedload`.   When using :func:`.relationship` where the target "
"class is an inheritance hierarchy, the API allows that the join, eager "
"load, or other linkage should target a specific subclass, alias, or "
":func:`.orm.with_polymorphic` alias, of that class hierarchy, rather than"
" the class directly targeted by the :func:`.relationship`."
msgstr ""

#: ../../orm/inheritance_loading.rst:570
msgid ""
"The :func:`~sqlalchemy.orm.interfaces.PropComparator.of_type` method "
"allows the construction of joins along "
":func:`~sqlalchemy.orm.relationship` paths while narrowing the criterion "
"to specific derived aliases or subclasses. Suppose the ``employees`` "
"table represents a collection of employees which are associated with a "
"``Company`` object. We'll add a ``company_id`` column to the "
"``employees`` table and a new table ``companies``:"
msgstr ""

#: ../../orm/inheritance_loading.rst:608
msgid ""
"When querying from ``Company`` onto the ``Employee`` relationship, the "
":meth:`.Query.join` method as well as operators like "
":meth:`.PropComparator.any` and :meth:`.PropComparator.has` will create a"
" join from ``company`` to ``employee``, without including ``engineer`` or"
" ``manager`` in the mix. If we wish to have criterion which is "
"specifically against the ``Engineer`` class, we can tell those methods to"
" join or subquery against the set of columns representing the subclass "
"using the :meth:`~.orm.interfaces.PropComparator.of_type` operator::"
msgstr ""

#: ../../orm/inheritance_loading.rst:621
msgid ""
"Similarly, to join from ``Company`` to the polymorphic entity that "
"includes both ``Engineer`` and ``Manager`` columns::"
msgstr ""

#: ../../orm/inheritance_loading.rst:636
msgid ""
"The :meth:`.PropComparator.any` and :meth:`.PropComparator.has` operators"
" also can be used with "
":func:`~sqlalchemy.orm.interfaces.PropComparator.of_type`, such as when "
"the embedded criterion is in terms of a subclass::"
msgstr ""

#: ../../orm/inheritance_loading.rst:649
msgid "Eager Loading of Specific or Polymorphic Subtypes"
msgstr ""

#: ../../orm/inheritance_loading.rst:651
msgid ""
"The :func:`.joinedload`, :func:`.subqueryload`, :func:`.contains_eager` "
"and other eagerloader options support paths which make use of "
":func:`~.PropComparator.of_type`. Below, we load ``Company`` rows while "
"eagerly loading related ``Engineer`` objects, querying the ``employee`` "
"and ``engineer`` tables simultaneously::"
msgstr ""

#: ../../orm/inheritance_loading.rst:664
msgid ""
"As is the case with :meth:`.Query.join`, :meth:`~.PropComparator.of_type`"
" can be used to combine eager loading and :func:`.orm.with_polymorphic`, "
"so that all sub-attributes of all referenced subtypes can be loaded::"
msgstr ""

#: ../../orm/inheritance_loading.rst:682
msgid ""
"When using :func:`.with_polymorphic` in conjunction with "
":func:`.joinedload`, the :func:`.with_polymorphic` object must be against"
" an \"aliased\" object, that is an instance of :class:`.Alias`, so that "
"the polymorphic selectable is aliased (an informative error message is "
"raised otherwise)."
msgstr ""

#: ../../orm/inheritance_loading.rst:688
msgid ""
"The typical way to do this is to include the "
":paramref:`.with_polymorphic.aliased` or :paramref:`.flat` flag, which "
"will apply this aliasing automatically.  However, if the "
":paramref:`.with_polymorphic.selectable` argument is being used to pass "
"an object that is already an :class:`.Alias` object then this flag should"
" **not** be set.  The \"flat\" option implies the \"aliased\" option and "
"is an alternate form of aliasing against join objects that produces fewer"
" subqueries."
msgstr ""

#: ../../orm/inheritance_loading.rst:697
msgid ""
"Once :meth:`~.PropComparator.of_type` is the target of the eager load, "
"that's the entity we would use for subsequent chaining, not the original "
"class or derived class.  If we wanted to further eager load a collection "
"on the eager-loaded ``Engineer`` class, we access this class from the "
"namespace of the :func:`.orm.with_polymorphic` object::"
msgstr ""

#: ../../orm/inheritance_loading.rst:713
msgid "Loading objects with joined table inheritance"
msgstr ""

#: ../../orm/inheritance_loading.rst:715
msgid ""
"When using joined table inheritance, if we query for a specific subclass "
"that represents a JOIN of two tables such as our ``Engineer`` example "
"from the inheritance section, the SQL emitted is a join::"
msgstr ""

#: ../../orm/inheritance_loading.rst:721
msgid "The above query will emit SQL like:"
msgstr ""

#: ../../orm/inheritance_loading.rst:732
msgid ""
"We will then get a collection of ``Engineer`` objects back, which will "
"contain all columns from ``employee`` and ``engineer`` loaded."
msgstr ""

#: ../../orm/inheritance_loading.rst:735
msgid ""
"However, when emitting a :class:`.Query` against a base class, the "
"behavior is to load only from the base table::"
msgstr ""

#: ../../orm/inheritance_loading.rst:740
msgid ""
"Above, the default behavior would be to SELECT only from the ``employee``"
" table and not from any \"sub\" tables (``engineer`` and ``manager``, in "
"our previous examples):"
msgstr ""

#: ../../orm/inheritance_loading.rst:752
msgid ""
"After a collection of ``Employee`` objects has been returned from the "
"query, and as attributes are requested from those ``Employee`` objects "
"which are represented in either the ``engineer`` or ``manager`` child "
"tables, a second load is issued for the columns in that related row, if "
"the data was not already loaded. So above, after accessing the objects "
"you'd see further SQL issued along the lines of:"
msgstr ""

#: ../../orm/inheritance_loading.rst:773
msgid ""
"The :func:`.orm.with_polymorphic` function and related configuration "
"options allow us to instead emit a JOIN up front which will conditionally"
" load against ``employee``, ``engineer``, or ``manager``, very much like "
"joined eager loading works for relationships, removing the necessity for "
"a second per-entity load::"
msgstr ""

#: ../../orm/inheritance_loading.rst:785
msgid ""
"The above produces a query which joins the ``employee`` table to both the"
" ``engineer`` and ``manager`` tables like the following:"
msgstr ""

#: ../../orm/inheritance_loading.rst:806
msgid ""
"The section :ref:`with_polymorphic` discusses the "
":func:`.orm.with_polymorphic` function and its configurational variants."
msgstr ""

#: ../../orm/inheritance_loading.rst:811
msgid ":ref:`with_polymorphic`"
msgstr ""

#: ../../orm/inheritance_loading.rst:816
msgid "Loading objects with single table inheritance"
msgstr ""

#: ../../orm/inheritance_loading.rst:818
msgid ""
"In modern Declarative, single inheritance mappings produce "
":class:`.Column` objects that are mapped only to a subclass, and not "
"available from the superclass, even though they are present on the same "
"table. In our example from :ref:`single_inheritance`, the ``Manager`` "
"mapping for example had a :class:`.Column` specified::"
msgstr ""

#: ../../orm/inheritance_loading.rst:831
msgid ""
"Above, there would be no ``Employee.manager_data`` attribute, even though"
" the ``employee`` table has a ``manager_data`` column. A query against "
"``Manager`` will include this column in the query, as well as an IN "
"clause to limit rows only to ``Manager`` objects:"
msgstr ""

#: ../../orm/inheritance_loading.rst:850
msgid ""
"However, in a similar way to that of joined table inheritance, a query "
"against ``Employee`` will only query for columns mapped to ``Employee``:"
msgstr ""

#: ../../orm/inheritance_loading.rst:862
msgid ""
"If we get back an instance of ``Manager`` from our result, accessing "
"additional columns only mapped to ``Manager`` emits a lazy load for those"
" columns, in a similar way to joined inheritance::"
msgstr ""

#: ../../orm/inheritance_loading.rst:870
msgid ""
"The :func:`.orm.with_polymorphic` function serves a similar role as  "
"joined inheritance in the case of single inheritance; it allows both for "
"eager loading of subclass attributes as well as specification of "
"subclasses in a query, just without the overhead of using OUTER JOIN::"
msgstr ""

#: ../../orm/inheritance_loading.rst:884
msgid ""
"Above, our query remains against a single table however we can refer to "
"the columns present in ``Manager`` or ``Engineer`` using the "
"\"polymorphic\" namespace. Since we specified ``\"*\"`` for the entities,"
" both ``Engineer`` and ``Manager`` will be loaded at once.  SQL emitted "
"would be:"
msgstr ""

#: ../../orm/inheritance_loading.rst:904
msgid "Inheritance Loading API"
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:1
msgid ""
"Produce an :class:`.AliasedClass` construct which specifies columns for "
"descendant mappers of the given base."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:4
msgid ""
"Using this method will ensure that each descendant mapper's tables are "
"included in the FROM clause, and will allow filter() criterion to be used"
" against those tables.  The resulting instances will also have those "
"columns already loaded so that no \"post fetch\" of those columns will be"
" required."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:12
msgid ""
":ref:`with_polymorphic` - full discussion of "
":func:`.orm.with_polymorphic`."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:15
msgid "Base class to be aliased."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:17
msgid ""
"a single class or mapper, or list of class/mappers, which inherit from "
"the base class. Alternatively, it may also be the string ``'*'``, in "
"which case all descending mapped classes will be added to the FROM "
"clause."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:22
msgid ""
"when True, the selectable will be wrapped in an alias, that is ``(SELECT "
"* FROM <fromclauses>) AS anon_1``. This can be important when using the "
"with_polymorphic() to create the target of a JOIN on a backend that does "
"not support parenthesized joins, such as SQLite and older versions of "
"MySQL.   However if the :paramref:`.with_polymorphic.selectable` "
"parameter is in use with an existing :class:`.Alias` construct, then you "
"should not set this flag."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:32
msgid ""
"Boolean, will be passed through to the :meth:`.FromClause.alias` call so "
"that aliases of :class:`.Join` objects don't include an enclosing SELECT."
"  This can lead to more efficient queries in many circumstances.  A JOIN "
"against a nested JOIN will be rewritten as a JOIN against an aliased "
"SELECT subquery on backends that don't support this syntax.  Setting "
"``flat`` to ``True`` implies the ``aliased`` flag is also ``True``.  .. "
"versionadded:: 0.9.0  .. seealso:: :meth:`.Join.alias`"
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:32
msgid ""
"Boolean, will be passed through to the :meth:`.FromClause.alias` call so "
"that aliases of :class:`.Join` objects don't include an enclosing SELECT."
"  This can lead to more efficient queries in many circumstances.  A JOIN "
"against a nested JOIN will be rewritten as a JOIN against an aliased "
"SELECT subquery on backends that don't support this syntax."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:39
msgid ""
"Setting ``flat`` to ``True`` implies the ``aliased`` flag is also "
"``True``."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:44
msgid ":meth:`.Join.alias`"
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:46
msgid ""
"a table or select() statement that will be used in place of the generated"
" FROM clause. This argument is required if any of the desired classes use"
" concrete table inheritance, since SQLAlchemy currently cannot generate "
"UNIONs among tables automatically. If used, the ``selectable`` argument "
"must represent the full set of tables and columns mapped by every mapped "
"class. Otherwise, the unaccounted mapped columns will result in their "
"table being appended directly to the FROM clause which will usually lead "
"to incorrect results."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:56
msgid ""
"a column to be used as the \"discriminator\" column for the given "
"selectable. If not given, the polymorphic_on attribute of the base "
"classes' mapper will be used, if any. This is useful for mappings that "
"don't have polymorphic loading behavior by default."
msgstr ""

#: of sqlalchemy.orm.with_polymorphic:62
msgid ""
"if True, an INNER JOIN will be used.  This should only be specified if "
"querying for one specific subtype only"
msgstr ""

#: of sqlalchemy.orm.selectin_polymorphic:1
msgid ""
"Indicate an eager load should take place for all attributes specific to a"
" subclass."
msgstr ""

#: of sqlalchemy.orm.selectin_polymorphic:4
msgid ""
"This uses an additional SELECT with IN against all matched primary key "
"values, and is the per-query analogue to the ``\"selectin\"`` setting on "
"the :paramref:`.mapper.polymorphic_load` parameter."
msgstr ""

#: of sqlalchemy.orm.selectin_polymorphic:12
msgid ":ref:`inheritance_polymorphic_load`"
msgstr ""

