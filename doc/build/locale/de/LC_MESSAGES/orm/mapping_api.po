# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/mapping_api.rst:4
msgid "Class Mapping API"
msgstr ""

#: of sqlalchemy.orm.mapper:1
msgid "Return a new :class:`~.Mapper` object."
msgstr ""

#: of sqlalchemy.orm.mapper:3
msgid ""
"This function is typically used behind the scenes via the Declarative "
"extension.   When using Declarative, many of the usual :func:`.mapper` "
"arguments are handled by the Declarative extension itself, including "
"``class_``, ``local_table``, ``properties``, and  ``inherits``. Other "
"options are passed to :func:`.mapper` using the ``__mapper_args__`` class"
" variable::"
msgstr ""

#: of sqlalchemy.orm.mapper:22
msgid ""
"Explicit use of :func:`.mapper` is often referred to as *classical "
"mapping*.  The above declarative example is equivalent in classical form "
"to::"
msgstr ""

#: of sqlalchemy.orm.mapper:43
msgid ":ref:`classical_mapping` - discussion of direct usage of :func:`.mapper`"
msgstr ""

#: of sqlalchemy.orm.mapper sqlalchemy.orm.mapper.Mapper.cascade_iterator
#: sqlalchemy.orm.mapper.Mapper.identity_key_from_primary_key
#: sqlalchemy.orm.mapper.Mapper.identity_key_from_row
#: sqlalchemy.orm.util.polymorphic_union
msgid "パラメータ"
msgstr ""

#: of sqlalchemy.orm.mapper:46
msgid ""
"The class to be mapped.  When using Declarative, this argument is "
"automatically passed as the declared class itself."
msgstr ""

#: of sqlalchemy.orm.mapper:50
msgid ""
"The :class:`.Table` or other selectable to which the class is mapped.  "
"May be ``None`` if this mapper inherits from another mapper using single-"
"table inheritance.   When using Declarative, this argument is "
"automatically passed by the extension, based on what is configured via "
"the ``__table__`` argument or via the :class:`.Table` produced as a "
"result of the ``__tablename__`` and :class:`.Column` arguments present."
msgstr ""

#: of sqlalchemy.orm.mapper:59
msgid ""
"If True, all query operations for this mapped class will overwrite all "
"data within object instances that already exist within the session, "
"erasing any in-memory changes with whatever information was loaded from "
"the database. Usage of this flag is highly discouraged; as an "
"alternative, see the method :meth:`.Query.populate_existing`."
msgstr ""

#: of sqlalchemy.orm.mapper:66
msgid ""
"Defaults to True.  Indicates that a composite primary key with some NULL "
"values should be considered as possibly existing within the database. "
"This affects whether a mapper will assign an incoming row to an existing "
"identity, as well as if :meth:`.Session.merge` will check the database "
"first for a particular primary key value. A \"partial primary key\" can "
"occur if one has mapped to an OUTER JOIN, for example."
msgstr ""

#: of sqlalchemy.orm.mapper:74
msgid ""
"Defaults to ``True``, indicating that save operations of multiple "
"entities can be batched together for efficiency. Setting to False "
"indicates that an instance will be fully saved before saving the next "
"instance.  This is used in the extremely rare case that a "
":class:`.MapperEvents` listener requires being called in between "
"individual row persistence operations."
msgstr ""

#: of sqlalchemy.orm.mapper:82
msgid ""
"A string which will be prepended to the mapped attribute name when "
":class:`.Column` objects are automatically assigned as attributes to the "
"mapped class.  Does not affect explicitly specified column-based "
"properties.  See the section :ref:`column_prefix` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:82
msgid ""
"A string which will be prepended to the mapped attribute name when "
":class:`.Column` objects are automatically assigned as attributes to the "
"mapped class.  Does not affect explicitly specified column-based "
"properties."
msgstr ""

#: of sqlalchemy.orm.mapper:88
msgid "See the section :ref:`column_prefix` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:90
msgid ""
"If True, indicates this mapper should use concrete table inheritance with"
" its parent mapper.  See the section :ref:`concrete_inheritance` for an "
"example."
msgstr ""

#: of sqlalchemy.orm.mapper:90
msgid ""
"If True, indicates this mapper should use concrete table inheritance with"
" its parent mapper."
msgstr ""

#: of sqlalchemy.orm.mapper:93
msgid "See the section :ref:`concrete_inheritance` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:95
msgid ""
"defaults to True; when a DELETE occurs of one more rows based on specific"
" primary keys, a warning is emitted when the number of rows matched does "
"not equal the number of rows expected.  This parameter may be set to "
"False to handle the case where database ON DELETE CASCADE rules may be "
"deleting some of those rows automatically.  The warning may be changed to"
" an exception in a future release.  .. versionadded:: 0.9.4 - added    "
":paramref:`.mapper.confirm_deleted_rows` as well as conditional    "
"matched row checking on delete."
msgstr ""

#: of sqlalchemy.orm.mapper:95
msgid ""
"defaults to True; when a DELETE occurs of one more rows based on specific"
" primary keys, a warning is emitted when the number of rows matched does "
"not equal the number of rows expected.  This parameter may be set to "
"False to handle the case where database ON DELETE CASCADE rules may be "
"deleting some of those rows automatically.  The warning may be changed to"
" an exception in a future release."
msgstr ""

#: of sqlalchemy.orm.mapper:103
msgid ""
"- added :paramref:`.mapper.confirm_deleted_rows` as well as conditional "
"matched row checking on delete."
msgstr ""

#: of sqlalchemy.orm.mapper:107
msgid ""
"if True, the ORM will immediately fetch the value of server-generated "
"default values after an INSERT or UPDATE, rather than leaving them as "
"expired to be fetched on next access. This can be used for event schemes "
"where the server-generated values are needed immediately before the flush"
" completes.   By default, this scheme will emit an individual ``SELECT`` "
"statement per row inserted or updated, which note can add significant "
"performance overhead.  However, if the target database supports "
":term:`RETURNING`, the default values will be returned inline with the "
"INSERT or UPDATE statement, which can greatly enhance performance for an "
"application that needs frequent access to just-generated server defaults."
"  .. seealso::        :ref:`orm_server_defaults`  .. versionchanged:: "
"0.9.0 The ``eager_defaults`` option can now    make use of "
":term:`RETURNING` for backends which support it."
msgstr ""

#: of sqlalchemy.orm.mapper:107
msgid ""
"if True, the ORM will immediately fetch the value of server-generated "
"default values after an INSERT or UPDATE, rather than leaving them as "
"expired to be fetched on next access. This can be used for event schemes "
"where the server-generated values are needed immediately before the flush"
" completes.   By default, this scheme will emit an individual ``SELECT`` "
"statement per row inserted or updated, which note can add significant "
"performance overhead.  However, if the target database supports "
":term:`RETURNING`, the default values will be returned inline with the "
"INSERT or UPDATE statement, which can greatly enhance performance for an "
"application that needs frequent access to just-generated server defaults."
msgstr ""

#: of sqlalchemy.orm.mapper:122
msgid ":ref:`orm_server_defaults`"
msgstr ""

#: of sqlalchemy.orm.mapper:124
msgid ""
"The ``eager_defaults`` option can now make use of :term:`RETURNING` for "
"backends which support it."
msgstr ""

#: of sqlalchemy.orm.mapper:127
msgid ""
"A list or set of string column names to be excluded from mapping.  See "
":ref:`include_exclude_cols` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:127
msgid "A list or set of string column names to be excluded from mapping."
msgstr ""

#: of sqlalchemy.orm.mapper:130 sqlalchemy.orm.mapper:140
msgid "See :ref:`include_exclude_cols` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:132
msgid ""
"A :class:`.MapperExtension` instance or list of :class:`.MapperExtension`"
" instances which will be applied to all operations by this "
":class:`.Mapper`.  **Deprecated.** Please see :class:`.MapperEvents`."
msgstr ""

#: of sqlalchemy.orm.mapper:137
msgid ""
"An inclusive list or set of string column names to map.  See "
":ref:`include_exclude_cols` for an example."
msgstr ""

#: of sqlalchemy.orm.mapper:137
msgid "An inclusive list or set of string column names to map."
msgstr ""

#: of sqlalchemy.orm.mapper:142
msgid ""
"A mapped class or the corresponding :class:`.Mapper` of one indicating a "
"superclass to which this :class:`.Mapper` should *inherit* from.   The "
"mapped class here must be a subclass of the other mapper's class.   When "
"using Declarative, this argument is passed automatically as a result of "
"the natural class hierarchy of the declared classes.  .. seealso::    "
":ref:`inheritance_toplevel`"
msgstr ""

#: of sqlalchemy.orm.mapper:142
msgid ""
"A mapped class or the corresponding :class:`.Mapper` of one indicating a "
"superclass to which this :class:`.Mapper` should *inherit* from.   The "
"mapped class here must be a subclass of the other mapper's class.   When "
"using Declarative, this argument is passed automatically as a result of "
"the natural class hierarchy of the declared classes."
msgstr ""

#: of sqlalchemy.orm.mapper:151 sqlalchemy.orm.mapper:384
msgid ":ref:`inheritance_toplevel`"
msgstr ""

#: of sqlalchemy.orm.mapper:153
msgid ""
"For joined table inheritance, a SQL expression which will define how the "
"two tables are joined; defaults to a natural join between the two tables."
msgstr ""

#: of sqlalchemy.orm.mapper:158
msgid ""
"When ``inherit_condition`` is used and the columns present are missing a "
":class:`.ForeignKey` configuration, this parameter can be used to specify"
" which columns are \"foreign\".  In most cases can be left as ``None``."
msgstr ""

#: of sqlalchemy.orm.mapper:163
msgid ""
"Boolean, defaults to ``False``. When ``True``, specifies that \"legacy\" "
"orphan consideration is to be applied to objects mapped by this mapper, "
"which means that a pending (that is, not persistent) object is auto-"
"expunged from an owning :class:`.Session` only when it is de-associated "
"from *all* parents that specify a ``delete-orphan`` cascade towards this "
"mapper.  The new default behavior is that the object is auto-expunged "
"when it is de-associated with *any* of its parents that specify ``delete-"
"orphan`` cascade.  This behavior is more consistent with that of a "
"persistent object, and allows behavior to be consistent in more scenarios"
" independently of whether or not an orphanable object has been flushed "
"yet or not.  See the change note and example at "
":ref:`legacy_is_orphan_addition` for more detail on this change.  .. "
"versionadded:: 0.8 - the consideration of a pending object as   an "
"\"orphan\" has been modified to more closely match the   behavior as that"
" of persistent objects, which is that the object   is expunged from the "
":class:`.Session` as soon as it is   de-associated from any of its "
"orphan-enabled parents.  Previously,   the pending object would be "
"expunged only if de-associated   from all of its orphan-enabled parents. "
"The new flag   ``legacy_is_orphan`` is added to :func:`.orm.mapper` which"
"   re-establishes the legacy behavior."
msgstr ""

#: of sqlalchemy.orm.mapper:163
msgid ""
"Boolean, defaults to ``False``. When ``True``, specifies that \"legacy\" "
"orphan consideration is to be applied to objects mapped by this mapper, "
"which means that a pending (that is, not persistent) object is auto-"
"expunged from an owning :class:`.Session` only when it is de-associated "
"from *all* parents that specify a ``delete-orphan`` cascade towards this "
"mapper.  The new default behavior is that the object is auto-expunged "
"when it is de-associated with *any* of its parents that specify ``delete-"
"orphan`` cascade.  This behavior is more consistent with that of a "
"persistent object, and allows behavior to be consistent in more scenarios"
" independently of whether or not an orphanable object has been flushed "
"yet or not."
msgstr ""

#: of sqlalchemy.orm.mapper:176
msgid ""
"See the change note and example at :ref:`legacy_is_orphan_addition` for "
"more detail on this change."
msgstr ""

#: of sqlalchemy.orm.mapper:179
msgid ""
"- the consideration of a pending object as an \"orphan\" has been "
"modified to more closely match the behavior as that of persistent "
"objects, which is that the object is expunged from the :class:`.Session` "
"as soon as it is de-associated from any of its orphan-enabled parents.  "
"Previously, the pending object would be expunged only if de-associated "
"from all of its orphan-enabled parents. The new flag ``legacy_is_orphan``"
" is added to :func:`.orm.mapper` which re-establishes the legacy "
"behavior."
msgstr ""

#: of sqlalchemy.orm.mapper:189
msgid ""
"Specify that this :class:`.Mapper` is in addition to the \"primary\" "
"mapper, that is, the one used for persistence. The :class:`.Mapper` "
"created here may be used for ad-hoc mapping of the class to an alternate "
"selectable, for loading only.  :paramref:`.Mapper.non_primary` is not an "
"often used option, but is useful in some specific :func:`.relationship` "
"cases.  .. seealso::      :ref:`relationship_non_primary_mapper`"
msgstr ""

#: of sqlalchemy.orm.mapper:189
msgid ""
"Specify that this :class:`.Mapper` is in addition to the \"primary\" "
"mapper, that is, the one used for persistence. The :class:`.Mapper` "
"created here may be used for ad-hoc mapping of the class to an alternate "
"selectable, for loading only."
msgstr ""

#: of sqlalchemy.orm.mapper:195
msgid ""
":paramref:`.Mapper.non_primary` is not an often used option, but is "
"useful in some specific :func:`.relationship` cases."
msgstr ""

#: of sqlalchemy.orm.mapper:200
msgid ":ref:`relationship_non_primary_mapper`"
msgstr ""

#: of sqlalchemy.orm.mapper:202
msgid ""
"A single :class:`.Column` or list of :class:`.Column` objects for which "
"selection operations should use as the default ordering for entities.  By"
" default mappers have no pre-defined ordering.  .. deprecated:: 1.1 The "
":paramref:`.Mapper.order_by` parameter    is deprecated.   Use "
":meth:`.Query.order_by` to determine the    ordering of a result set."
msgstr ""

#: of sqlalchemy.orm.mapper:202
msgid ""
"A single :class:`.Column` or list of :class:`.Column` objects for which "
"selection operations should use as the default ordering for entities.  By"
" default mappers have no pre-defined ordering."
msgstr ""

#: of sqlalchemy.orm.mapper:207
msgid ""
"The :paramref:`.Mapper.order_by` parameter is deprecated.   Use "
":meth:`.Query.order_by` to determine the ordering of a result set."
msgstr ""

#: of sqlalchemy.orm.mapper:211
msgid ""
"Indicates DELETE behavior of foreign key columns when a joined-table "
"inheritance entity is being deleted. Defaults to ``False`` for a base "
"mapper; for an inheriting mapper, defaults to ``False`` unless the value "
"is set to ``True`` on the superclass mapper.  When ``True``, it is "
"assumed that ON DELETE CASCADE is configured on the foreign key "
"relationships that link this mapper's table to its superclass table, so "
"that when the unit of work attempts to delete the entity, it need only "
"emit a DELETE statement for the superclass table, and not this table.  "
"When ``False``, a DELETE statement is emitted for this mapper's table "
"individually.  If the primary key attributes local to this table are "
"unloaded, then a SELECT must be emitted in order to validate these "
"attributes; note that the primary key columns of a joined-table subclass "
"are not part of the \"primary key\" of the object as a whole.  Note that "
"a value of ``True`` is **always** forced onto the subclass mappers; that "
"is, it's not possible for a superclass to specify passive_deletes without"
" this taking effect for all subclass mappers.  .. versionadded:: 1.1  .. "
"seealso::      :ref:`passive_deletes` - description of similar feature as"
"     used with :func:`.relationship`      "
":paramref:`.mapper.passive_updates` - supporting ON UPDATE     CASCADE "
"for joined-table inheritance mappers"
msgstr ""

#: of sqlalchemy.orm.mapper:211
msgid ""
"Indicates DELETE behavior of foreign key columns when a joined-table "
"inheritance entity is being deleted. Defaults to ``False`` for a base "
"mapper; for an inheriting mapper, defaults to ``False`` unless the value "
"is set to ``True`` on the superclass mapper."
msgstr ""

#: of sqlalchemy.orm.mapper:217
msgid ""
"When ``True``, it is assumed that ON DELETE CASCADE is configured on the "
"foreign key relationships that link this mapper's table to its superclass"
" table, so that when the unit of work attempts to delete the entity, it "
"need only emit a DELETE statement for the superclass table, and not this "
"table."
msgstr ""

#: of sqlalchemy.orm.mapper:223
msgid ""
"When ``False``, a DELETE statement is emitted for this mapper's table "
"individually.  If the primary key attributes local to this table are "
"unloaded, then a SELECT must be emitted in order to validate these "
"attributes; note that the primary key columns of a joined-table subclass "
"are not part of the \"primary key\" of the object as a whole."
msgstr ""

#: of sqlalchemy.orm.mapper:230
msgid ""
"Note that a value of ``True`` is **always** forced onto the subclass "
"mappers; that is, it's not possible for a superclass to specify "
"passive_deletes without this taking effect for all subclass mappers."
msgstr ""

#: of sqlalchemy.orm.mapper:239
msgid ""
":ref:`passive_deletes` - description of similar feature as used with "
":func:`.relationship`"
msgstr ""

#: of sqlalchemy.orm.mapper:242
msgid ""
":paramref:`.mapper.passive_updates` - supporting ON UPDATE CASCADE for "
"joined-table inheritance mappers"
msgstr ""

#: of sqlalchemy.orm.mapper:245
msgid ""
"Indicates UPDATE behavior of foreign key columns when a primary key "
"column changes on a joined-table inheritance mapping.   Defaults to "
"``True``.  When True, it is assumed that ON UPDATE CASCADE is configured "
"on the foreign key in the database, and that the database will handle "
"propagation of an UPDATE from a source column to dependent columns on "
"joined-table rows.  When False, it is assumed that the database does not "
"enforce referential integrity and will not be issuing its own CASCADE "
"operation for an update.  The unit of work process will emit an UPDATE "
"statement for the dependent columns during a primary key change.  .. "
"seealso::      :ref:`passive_updates` - description of a similar feature "
"as     used with :func:`.relationship`      "
":paramref:`.mapper.passive_deletes` - supporting ON DELETE     CASCADE "
"for joined-table inheritance mappers"
msgstr ""

#: of sqlalchemy.orm.mapper:245
msgid ""
"Indicates UPDATE behavior of foreign key columns when a primary key "
"column changes on a joined-table inheritance mapping.   Defaults to "
"``True``."
msgstr ""

#: of sqlalchemy.orm.mapper:249
msgid ""
"When True, it is assumed that ON UPDATE CASCADE is configured on the "
"foreign key in the database, and that the database will handle "
"propagation of an UPDATE from a source column to dependent columns on "
"joined-table rows."
msgstr ""

#: of sqlalchemy.orm.mapper:254
msgid ""
"When False, it is assumed that the database does not enforce referential "
"integrity and will not be issuing its own CASCADE operation for an "
"update.  The unit of work process will emit an UPDATE statement for the "
"dependent columns during a primary key change."
msgstr ""

#: of sqlalchemy.orm.mapper:262
msgid ""
":ref:`passive_updates` - description of a similar feature as used with "
":func:`.relationship`"
msgstr ""

#: of sqlalchemy.orm.mapper:265
msgid ""
":paramref:`.mapper.passive_deletes` - supporting ON DELETE CASCADE for "
"joined-table inheritance mappers"
msgstr ""

#: of sqlalchemy.orm.mapper:268
msgid ""
"Specifies \"polymorphic loading\" behavior  for a subclass in an "
"inheritance hierarchy (joined and single  table inheritance only).   "
"Valid values are:     * \"'inline'\" - specifies this class should be "
"part of the      \"with_polymorphic\" mappers, e.g. its columns will be "
"included      in a SELECT query against the base.     * \"'selectin'\" - "
"specifies that when instances of this class      are loaded, an "
"additional SELECT will be emitted to retrieve      the columns specific "
"to this subclass.  The SELECT uses      IN to fetch multiple subclasses "
"at once.  .. versionadded:: 1.2  .. seealso::     "
":ref:`with_polymorphic_mapper_config`     :ref:`polymorphic_selectin`"
msgstr ""

#: of sqlalchemy.orm.mapper:279
msgid "Specifies \"polymorphic loading\" behavior"
msgstr ""

#: of sqlalchemy.orm.mapper:269
msgid ""
"for a subclass in an inheritance hierarchy (joined and single table "
"inheritance only).   Valid values are:"
msgstr ""

#: of sqlalchemy.orm.mapper:272
msgid ""
"\"'inline'\" - specifies this class should be part of the "
"\"with_polymorphic\" mappers, e.g. its columns will be included in a "
"SELECT query against the base."
msgstr ""

#: of sqlalchemy.orm.mapper:276
msgid ""
"\"'selectin'\" - specifies that when instances of this class are loaded, "
"an additional SELECT will be emitted to retrieve the columns specific to "
"this subclass.  The SELECT uses IN to fetch multiple subclasses at once."
msgstr ""

#: of sqlalchemy.orm.mapper:285
msgid ":ref:`with_polymorphic_mapper_config`"
msgstr ""

#: of sqlalchemy.orm.mapper:287
msgid ":ref:`polymorphic_selectin`"
msgstr ""

#: of sqlalchemy.orm.mapper:289
msgid ""
"Specifies the column, attribute, or SQL expression used to determine the "
"target class for an incoming row, when inheriting classes are present.  "
"This value is commonly a :class:`.Column` object that's present in the "
"mapped :class:`.Table`::    class Employee(Base):       __tablename__ = "
"'employee'        id = Column(Integer, primary_key=True)       "
"discriminator = Column(String(50))        __mapper_args__ = {           "
"\"polymorphic_on\":discriminator,           "
"\"polymorphic_identity\":\"employee\"       }  It may also be specified "
"as a SQL expression, as in this example where we use the :func:`.case` "
"construct to provide a conditional approach::    class Employee(Base):"
"       __tablename__ = 'employee'        id = Column(Integer, "
"primary_key=True)       discriminator = Column(String(50))        "
"__mapper_args__ = {           \"polymorphic_on\":case([               "
"(discriminator == \"EN\", \"engineer\"),               (discriminator == "
"\"MA\", \"manager\"),           ], else_=\"employee\"),           "
"\"polymorphic_identity\":\"employee\"       }  It may also refer to any "
"attribute configured with :func:`.column_property`, or to the string name"
" of one::        class Employee(Base):           __tablename__ = "
"'employee'            id = Column(Integer, primary_key=True)           "
"discriminator = Column(String(50))           employee_type = "
"column_property(               case([                   (discriminator =="
" \"EN\", \"engineer\"),                   (discriminator == \"MA\", "
"\"manager\"),               ], else_=\"employee\")           )"
"            __mapper_args__ = {               "
"\"polymorphic_on\":employee_type,               "
"\"polymorphic_identity\":\"employee\"           }  .. versionchanged:: "
"0.7.4     ``polymorphic_on`` may be specified as a SQL expression,     or"
" refer to any attribute configured with     :func:`.column_property`, or "
"to the string name of one.  When setting ``polymorphic_on`` to reference "
"an attribute or expression that's not present in the locally mapped "
":class:`.Table`, yet the value of the discriminator should be persisted "
"to the database, the value of the discriminator is not automatically set "
"on new instances; this must be handled by the user, either through manual"
" means or via event listeners. A typical approach to establishing such a "
"listener looks like::        from sqlalchemy import event       from "
"sqlalchemy.orm import object_mapper        @event.listens_for(Employee, "
"\"init\", propagate=True)       def set_identity(instance, *arg, **kw):"
"           mapper = object_mapper(instance)           "
"instance.discriminator = mapper.polymorphic_identity  Where above, we "
"assign the value of ``polymorphic_identity`` for the mapped class to the "
"``discriminator`` attribute, thus persisting the value to the "
"``discriminator`` column in the database.  .. warning::     Currently, "
"**only one discriminator column may be set**, typically    on the base-"
"most class in the hierarchy. \"Cascading\" polymorphic    columns are not"
" yet supported.  .. seealso::    :ref:`inheritance_toplevel`"
msgstr ""

#: of sqlalchemy.orm.mapper:289
msgid ""
"Specifies the column, attribute, or SQL expression used to determine the "
"target class for an incoming row, when inheriting classes are present."
msgstr ""

#: of sqlalchemy.orm.mapper:293
msgid ""
"This value is commonly a :class:`.Column` object that's present in the "
"mapped :class:`.Table`::"
msgstr ""

#: of sqlalchemy.orm.mapper:307
msgid ""
"It may also be specified as a SQL expression, as in this example where we"
" use the :func:`.case` construct to provide a conditional approach::"
msgstr ""

#: of sqlalchemy.orm.mapper:326
msgid ""
"It may also refer to any attribute configured with "
":func:`.column_property`, or to the string name of one::"
msgstr ""

#: of sqlalchemy.orm.mapper:347
msgid ""
"``polymorphic_on`` may be specified as a SQL expression, or refer to any "
"attribute configured with :func:`.column_property`, or to the string name"
" of one."
msgstr ""

#: of sqlalchemy.orm.mapper:352
msgid ""
"When setting ``polymorphic_on`` to reference an attribute or expression "
"that's not present in the locally mapped :class:`.Table`, yet the value "
"of the discriminator should be persisted to the database, the value of "
"the discriminator is not automatically set on new instances; this must be"
" handled by the user, either through manual means or via event listeners."
" A typical approach to establishing such a listener looks like::"
msgstr ""

#: of sqlalchemy.orm.mapper:371
msgid ""
"Where above, we assign the value of ``polymorphic_identity`` for the "
"mapped class to the ``discriminator`` attribute, thus persisting the "
"value to the ``discriminator`` column in the database."
msgstr ""

#: of sqlalchemy.orm.mapper:378
msgid ""
"Currently, **only one discriminator column may be set**, typically on the"
" base-most class in the hierarchy. \"Cascading\" polymorphic columns are "
"not yet supported."
msgstr ""

#: of sqlalchemy.orm.mapper:386
msgid ""
"Specifies the value which identifies this particular class as returned by"
" the column expression referred to by the ``polymorphic_on`` setting.  As"
" rows are received, the value corresponding to the ``polymorphic_on`` "
"column expression is compared to this value, indicating which subclass "
"should be used for the newly reconstructed object."
msgstr ""

#: of sqlalchemy.orm.mapper:394
msgid ""
"A dictionary mapping the string names of object attributes to "
":class:`.MapperProperty` instances, which define the persistence behavior"
" of that attribute.  Note that :class:`.Column` objects present in the "
"mapped :class:`.Table` are automatically placed into ``ColumnProperty`` "
"instances upon mapping, unless overridden. When using Declarative, this "
"argument is passed automatically, based on all those "
":class:`.MapperProperty` instances declared in the declared class body."
msgstr ""

#: of sqlalchemy.orm.mapper:404
msgid ""
"A list of :class:`.Column` objects which define the primary key to be "
"used against this mapper's selectable unit. This is normally simply the "
"primary key of the ``local_table``, but can be overridden here."
msgstr ""

#: of sqlalchemy.orm.mapper:409
msgid ""
"A :class:`.Column` that will be used to keep a running version id of rows"
" in the table.  This is used to detect concurrent updates or the presence"
" of stale data in a flush.  The methodology is to detect if an UPDATE "
"statement does not match the last known version id, a "
":class:`~sqlalchemy.orm.exc.StaleDataError` exception is thrown. By "
"default, the column must be of :class:`.Integer` type, unless "
"``version_id_generator`` specifies an alternative version generator.  .. "
"seealso::     :ref:`mapper_version_counter` - discussion of version "
"counting    and rationale."
msgstr ""

#: of sqlalchemy.orm.mapper:409
msgid ""
"A :class:`.Column` that will be used to keep a running version id of rows"
" in the table.  This is used to detect concurrent updates or the presence"
" of stale data in a flush.  The methodology is to detect if an UPDATE "
"statement does not match the last known version id, a "
":class:`~sqlalchemy.orm.exc.StaleDataError` exception is thrown. By "
"default, the column must be of :class:`.Integer` type, unless "
"``version_id_generator`` specifies an alternative version generator."
msgstr ""

#: of sqlalchemy.orm.mapper:423
msgid ""
":ref:`mapper_version_counter` - discussion of version counting and "
"rationale."
msgstr ""

#: of sqlalchemy.orm.mapper:426
msgid ""
"Define how new version ids should be generated.  Defaults to ``None``, "
"which indicates that a simple integer counting scheme be employed.  To "
"provide a custom versioning scheme, provide a callable function of the "
"form::      def generate_version(version):         return next_version  "
"Alternatively, server-side versioning functions such as triggers, or "
"programmatic versioning schemes outside of the version id generator may "
"be used, by specifying the value ``False``. Please see "
":ref:`server_side_version_counter` for a discussion of important points "
"when using this option.  .. versionadded:: 0.9.0 ``version_id_generator``"
" supports    server-side version number generation.  .. seealso::     "
":ref:`custom_version_counter`     :ref:`server_side_version_counter`"
msgstr ""

#: of sqlalchemy.orm.mapper:426
msgid ""
"Define how new version ids should be generated.  Defaults to ``None``, "
"which indicates that a simple integer counting scheme be employed.  To "
"provide a custom versioning scheme, provide a callable function of the "
"form::"
msgstr ""

#: of sqlalchemy.orm.mapper:434
msgid ""
"Alternatively, server-side versioning functions such as triggers, or "
"programmatic versioning schemes outside of the version id generator may "
"be used, by specifying the value ``False``. Please see "
":ref:`server_side_version_counter` for a discussion of important points "
"when using this option."
msgstr ""

#: of sqlalchemy.orm.mapper:440
msgid "``version_id_generator`` supports server-side version number generation."
msgstr ""

#: of sqlalchemy.orm.mapper:445
msgid ":ref:`custom_version_counter`"
msgstr ""

#: of sqlalchemy.orm.mapper:447
msgid ":ref:`server_side_version_counter`"
msgstr ""

#: of sqlalchemy.orm.mapper:450
msgid ""
"A tuple in the form ``(<classes>, <selectable>)`` indicating the default "
"style of \"polymorphic\" loading, that is, which tables are queried at "
"once. <classes> is any single or list of mappers and/or classes "
"indicating the inherited classes that should be loaded at once. The "
"special value ``'*'`` may be used to indicate all descending classes "
"should be loaded immediately. The second tuple argument <selectable> "
"indicates a selectable that will be used to query for multiple classes.  "
".. seealso::    :ref:`with_polymorphic` - discussion of polymorphic "
"querying   techniques."
msgstr ""

#: of sqlalchemy.orm.mapper:450
msgid ""
"A tuple in the form ``(<classes>, <selectable>)`` indicating the default "
"style of \"polymorphic\" loading, that is, which tables are queried at "
"once. <classes> is any single or list of mappers and/or classes "
"indicating the inherited classes that should be loaded at once. The "
"special value ``'*'`` may be used to indicate all descending classes "
"should be loaded immediately. The second tuple argument <selectable> "
"indicates a selectable that will be used to query for multiple classes."
msgstr ""

#: of sqlalchemy.orm.mapper:462
msgid ":ref:`with_polymorphic` - discussion of polymorphic querying techniques."
msgstr ""

#: of sqlalchemy.orm.object_mapper:1
msgid ""
"Given an object, return the primary Mapper associated with the object "
"instance."
msgstr ""

#: of sqlalchemy.orm.object_mapper:4
msgid ""
"Raises :class:`sqlalchemy.orm.exc.UnmappedInstanceError` if no mapping is"
" configured."
msgstr ""

#: of sqlalchemy.orm.object_mapper:7
msgid "This function is available via the inspection system as::"
msgstr ""

#: of sqlalchemy.orm.object_mapper:11
msgid ""
"Using the inspection system will raise "
":class:`sqlalchemy.exc.NoInspectionAvailable` if the instance is not part"
" of a mapping."
msgstr ""

#: of sqlalchemy.orm.class_mapper:1
msgid ""
"Given a class, return the primary :class:`.Mapper` associated with the "
"key."
msgstr ""

#: of sqlalchemy.orm.class_mapper:4
msgid ""
"Raises :exc:`.UnmappedClassError` if no mapping is configured on the "
"given class, or :exc:`.ArgumentError` if a non-class object is passed."
msgstr ""

#: of sqlalchemy.orm.class_mapper:8
msgid ""
"Equivalent functionality is available via the :func:`.inspect` function "
"as::"
msgstr ""

#: of sqlalchemy.orm.class_mapper:13
msgid ""
"Using the inspection system will raise "
":class:`sqlalchemy.exc.NoInspectionAvailable` if the class is not mapped."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:1
msgid ""
"Initialize the inter-mapper relationships of all mappers that have been "
"constructed thus far."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:4
msgid ""
"This function can be called any number of times, but in most cases is "
"invoked automatically, the first time mappings are used, as well as "
"whenever mappings are used and additional not-yet-configured mappers have"
" been constructed."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:9
msgid ""
"Points at which this occur include when a mapped class is instantiated "
"into an instance, as well as when the :meth:`.Session.query` method is "
"used."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:13
msgid ""
"The :func:`.configure_mappers` function provides several event hooks that"
" can be used to augment its functionality.  These methods include:"
msgstr ""

#: of sqlalchemy.orm.configure_mappers:16
msgid ""
":meth:`.MapperEvents.before_configured` - called once before "
":func:`.configure_mappers` does any work; this can be used to establish "
"additional options, properties, or related mappings before the operation "
"proceeds."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:21
msgid ""
":meth:`.MapperEvents.mapper_configured` - called as each indivudal "
":class:`.Mapper` is configured within the process; will include all "
"mapper state except for backrefs set up by other mappers that are still "
"to be configured."
msgstr ""

#: of sqlalchemy.orm.configure_mappers:26
msgid ""
":meth:`.MapperEvents.after_configured` - called once after "
":func:`.configure_mappers` is complete; at this stage, all "
":class:`.Mapper` objects that are known  to SQLAlchemy will be fully "
"configured.  Note that the calling application may still have other "
"mappings that haven't been produced yet, such as if they are in modules "
"as yet unimported."
msgstr ""

#: of sqlalchemy.orm.clear_mappers:1
msgid "Remove all mappers from all classes."
msgstr ""

#: of sqlalchemy.orm.clear_mappers:3
msgid ""
"This function removes all instrumentation from classes and disposes of "
"their associated mappers.  Once called, the classes are unmapped and can "
"be later re-mapped with new mappers."
msgstr ""

#: of sqlalchemy.orm.clear_mappers:7
msgid ""
":func:`.clear_mappers` is *not* for normal use, as there is literally no "
"valid usage for it outside of very specific testing scenarios. Normally, "
"mappers are permanent structural components of user-defined classes, and "
"are never discarded independently of their class.  If a mapped class "
"itself is garbage collected, its mapper is automatically disposed of as "
"well. As such, :func:`.clear_mappers` is only for usage in test suites "
"that re-use the same classes with different mappings, which is itself an "
"extremely rare use case - the only such use case is in fact SQLAlchemy's "
"own test suite, and possibly the test suites of other ORM extension "
"libraries which intend to test various combinations of mapper "
"construction upon a fixed set of classes."
msgstr ""

#: of sqlalchemy.orm.util.identity_key:1
msgid ""
"Generate \"identity key\" tuples, as are used as keys in the "
":attr:`.Session.identity_map` dictionary."
msgstr ""

#: of sqlalchemy.orm.util.identity_key:4
msgid "This function has several call styles:"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:6
msgid "``identity_key(class, ident, identity_token=token)``"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:8
msgid ""
"This form receives a mapped class and a primary key scalar or tuple as an"
" argument."
msgstr ""

#: of sqlalchemy.orm.util.identity_key:11 sqlalchemy.orm.util.identity_key:30
#: sqlalchemy.orm.util.identity_key:48
msgid "E.g.::"
msgstr ""

#: of sqlalchemy.orm.util.identity_key
msgid "param class"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:16 sqlalchemy.orm.util.identity_key:54
msgid "mapped class (must be a positional argument)"
msgstr ""

#: of sqlalchemy.orm.util.identity_key
msgid "param ident"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:17
msgid "primary key, may be a scalar or tuple argument."
msgstr ""

#: of sqlalchemy.orm.util.identity_key:18 sqlalchemy.orm.util.identity_key:57
msgid ";param identity_token: optional identity token"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:20 sqlalchemy.orm.util.identity_key:59
msgid "added identity_token"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:23
msgid "``identity_key(instance=instance)``"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:25
msgid ""
"This form will produce the identity key for a given instance.  The "
"instance need not be persistent, only that its primary key attributes are"
" populated (else the key will contain ``None`` for those missing values)."
msgstr ""

#: of sqlalchemy.orm.util.identity_key:36
msgid ""
"In this form, the given instance is ultimately run though "
":meth:`.Mapper.identity_key_from_instance`, which will have the effect of"
" performing a database check for the corresponding row if the object is "
"expired."
msgstr ""

#: of sqlalchemy.orm.util.identity_key
msgid "param instance"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:41
msgid "object instance (must be given as a keyword arg)"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:43
msgid "``identity_key(class, row=row, identity_token=token)``"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:45
msgid ""
"This form is similar to the class/tuple form, except is passed a database"
" result row as a :class:`.RowProxy` object."
msgstr ""

#: of sqlalchemy.orm.util.identity_key
msgid "param row"
msgstr ""

#: of sqlalchemy.orm.util.identity_key:55
msgid ""
":class:`.RowProxy` row returned by a :class:`.ResultProxy` (must be given"
" as a keyword arg)"
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:1
msgid "Create a ``UNION`` statement used by a polymorphic mapper."
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:3
msgid "See  :ref:`concrete_inheritance` for an example of how this is used."
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:6
msgid "mapping of polymorphic identities to :class:`.Table` objects."
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:8
msgid ""
"string name of a \"discriminator\" column, which will be derived from the"
" query, producing the polymorphic identity for each row.  If ``None``, no"
" polymorphic discriminator is generated."
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:11
msgid ""
"name of the :func:`~sqlalchemy.sql.expression.alias()` construct "
"generated."
msgstr ""

#: of sqlalchemy.orm.util.polymorphic_union:13
msgid ""
"if True, non-existent columns, which are represented as labeled NULLs, "
"will be passed into CAST.   This is a legacy behavior that is problematic"
" on some backends such as Oracle - in which case it can be set to False."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper:1
msgid "Define the correlation of class attributes to database table columns."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper:4
msgid ""
"The :class:`.Mapper` object is instantiated using the "
":func:`~sqlalchemy.orm.mapper` function.    For information about "
"instantiating new :class:`.Mapper` objects, see that function's "
"documentation."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper:10
msgid ""
"When :func:`.mapper` is used explicitly to link a user defined class with"
" table metadata, this is referred to as *classical mapping*. Modern "
"SQLAlchemy usage tends to favor the :mod:`sqlalchemy.ext.declarative` "
"extension for class configuration, which makes usage of :func:`.mapper` "
"behind the scenes."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper:18
msgid ""
"Given a particular class known to be mapped by the ORM, the "
":class:`.Mapper` which maintains it can be acquired using the "
":func:`.inspect` function::"
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper:26
msgid ""
"A class which was mapped by the :mod:`sqlalchemy.ext.declarative` "
"extension will also have its mapper available via the ``__mapper__`` "
"attribute."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.add_properties:1
msgid ""
"Add the given dictionary of properties to this mapper, using "
"`add_property`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.add_property:1
msgid "Add an individual MapperProperty to this mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.add_property:3
msgid ""
"If the mapper has not been configured yet, just adds the property to the "
"initial properties dictionary sent to the constructor.  If this Mapper "
"has already been configured, then the given MapperProperty is configured "
"immediately."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:1
msgid ""
"A namespace of all :class:`.InspectionAttr` attributes associated with "
"the mapped class."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:4
msgid ""
"These attributes are in all cases Python :term:`descriptors` associated "
"with the mapped class or its superclasses."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:7
msgid ""
"This namespace includes attributes that are mapped to the class as well "
"as attributes declared by extension modules. It includes any Python "
"descriptor type that inherits from :class:`.InspectionAttr`.  This "
"includes :class:`.QueryableAttribute`, as well as extension types such as"
" :class:`.hybrid_property`, :class:`.hybrid_method` and "
":class:`.AssociationProxy`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:15
msgid ""
"To distinguish between mapped attributes and extension attributes, the "
"attribute :attr:`.InspectionAttr.extension_type` will refer to a constant"
" that distinguishes between different extension types."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:19
msgid ""
"When dealing with a :class:`.QueryableAttribute`, the "
":attr:`.QueryableAttribute.property` attribute refers to the "
":class:`.MapperProperty` property, which is what you get when referring "
"to the collection of mapped properties via :attr:`.Mapper.attrs`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:27
msgid ""
"The :attr:`.Mapper.all_orm_descriptors` accessor namespace is an instance"
" of :class:`.OrderedProperties`.  This is a dictionary-like object which "
"includes a small number of named methods such as "
":meth:`.OrderedProperties.items` and :meth:`.OrderedProperties.values`.  "
"When accessing attributes dynamically, favor using the dict-access "
"scheme, e.g. ``mapper.all_orm_descriptors[somename]`` over "
"``getattr(mapper.all_orm_descriptors, somename)`` to avoid name "
"collisions."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.all_orm_descriptors:41
msgid ":attr:`.Mapper.attrs`"
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.attrs:1
msgid ""
"A namespace of all :class:`.MapperProperty` objects associated this "
"mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.attrs:4
msgid ""
"This is an object that provides each property based on its key name.  For"
" instance, the mapper for a ``User`` class which has ``User.name`` "
"attribute would provide ``mapper.attrs.name``, which would be the "
":class:`.ColumnProperty` representing the ``name`` column.   The "
"namespace object can also be iterated, which would yield each "
":class:`.MapperProperty`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.attrs:12
msgid ""
":class:`.Mapper` has several pre-filtered views of this attribute which "
"limit the types of properties returned, inclding :attr:`.synonyms`, "
":attr:`.column_attrs`, :attr:`.relationships`, and :attr:`.composites`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.attrs:19
msgid ""
"The :attr:`.Mapper.attrs` accessor namespace is an instance of "
":class:`.OrderedProperties`.  This is a dictionary-like object which "
"includes a small number of named methods such as "
":meth:`.OrderedProperties.items` and :meth:`.OrderedProperties.values`.  "
"When accessing attributes dynamically, favor using the dict-access "
"scheme, e.g. ``mapper.attrs[somename]`` over ``getattr(mapper.attrs, "
"somename)`` to avoid name collisions."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.attrs:30
msgid ":attr:`.Mapper.all_orm_descriptors`"
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.base_mapper:1
msgid "The base-most :class:`.Mapper` in an inheritance chain."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.base_mapper:3
msgid ""
"In a non-inheriting scenario, this attribute will always be this "
":class:`.Mapper`.   In an inheritance scenario, it references the "
":class:`.Mapper` which is parent to all other :class:`.Mapper` objects in"
" the inheritance chain."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.base_mapper:8
#: sqlalchemy.orm.mapper.Mapper.class_:3
#: sqlalchemy.orm.mapper.Mapper.class_manager:4
#: sqlalchemy.orm.mapper.Mapper.columns:11
#: sqlalchemy.orm.mapper.Mapper.concrete:4
#: sqlalchemy.orm.mapper.Mapper.configured:3
#: sqlalchemy.orm.mapper.Mapper.inherits:4
#: sqlalchemy.orm.mapper.Mapper.non_primary:5
#: sqlalchemy.orm.mapper.Mapper.polymorphic_identity:8
#: sqlalchemy.orm.mapper.Mapper.polymorphic_map:11
#: sqlalchemy.orm.mapper.Mapper.polymorphic_on:9
#: sqlalchemy.orm.mapper.Mapper.primary_key:16
#: sqlalchemy.orm.mapper.Mapper.single:6 sqlalchemy.orm.mapper.Mapper.tables:8
msgid ""
"This is a *read only* attribute determined during mapper construction. "
"Behavior is undefined if directly modified."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.c:1
msgid "A synonym for :attr:`~.Mapper.columns`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:1
msgid ""
"Iterate each element and its mapper in an object graph, for all "
"relationships that meet the given cascade rule."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:4
msgid ""
"The name of the cascade rule (i.e. ``\"save-update\"``, ``\"delete\"``, "
"etc.).  .. note::  the ``\"all\"`` cascade is not accepted here.  For a "
"generic    object traversal function, see :ref:`faq_walk_objects`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:5
msgid ""
"The name of the cascade rule (i.e. ``\"save-update\"``, ``\"delete\"``, "
"etc.)."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:8
msgid ""
"the ``\"all\"`` cascade is not accepted here.  For a generic object "
"traversal function, see :ref:`faq_walk_objects`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:11
msgid ""
"The lead InstanceState.  child items will be processed per the "
"relationships defined for this object's mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator
msgid "戻り値"
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:15
msgid "the method yields individual object instances."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:19
msgid ":ref:`unitofwork_cascades`"
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.cascade_iterator:21
msgid ""
":ref:`faq_walk_objects` - illustrates a generic function to traverse all "
"objects without relying on cascades."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.class_:1
msgid "The Python class which this :class:`.Mapper` maps."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.class_manager:1
msgid ""
"The :class:`.ClassManager` which maintains event listeners and class-"
"bound descriptors for this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.column_attrs:1
msgid ""
"Return a namespace of all :class:`.ColumnProperty` properties maintained "
"by this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.column_attrs:6
#: sqlalchemy.orm.mapper.Mapper.composites:6
#: sqlalchemy.orm.mapper.Mapper.relationships:18
#: sqlalchemy.orm.mapper.Mapper.synonyms:6
msgid ":attr:`.Mapper.attrs` - namespace of all :class:`.MapperProperty` objects."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.columns:1
msgid ""
"A collection of :class:`.Column` or other scalar expression objects "
"maintained by this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.columns:4
msgid ""
"The collection behaves the same as that of the ``c`` attribute on any "
":class:`.Table` object, except that only those columns included in this "
"mapping are present, and are keyed based on the attribute name defined in"
" the mapping, not necessarily the ``key`` attribute of the "
":class:`.Column` itself.   Additionally, scalar expressions mapped by "
":func:`.column_property` are also present here."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.common_parent:1
msgid ""
"Return true if the given mapper shares a common inherited parent as this "
"mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.composites:1
msgid ""
"Return a namespace of all :class:`.CompositeProperty` properties "
"maintained by this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.concrete:1
msgid ""
"Represent ``True`` if this :class:`.Mapper` is a concrete inheritance "
"mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.configured:1
msgid "Represent ``True`` if this :class:`.Mapper` has been configured."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.configured:8
msgid ":func:`.configure_mappers`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.entity:1
#: sqlalchemy.orm.mapper.Mapper.is_mapper:1
#: sqlalchemy.orm.mapper.Mapper.mapper:1
msgid "Part of the inspection API."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.entity:3
msgid "Returns self.class\\_."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.get_property:1
msgid "return a MapperProperty associated with the given key."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.get_property_by_column:1
msgid ""
"Given a :class:`.Column` object, return the :class:`.MapperProperty` "
"which maps this column."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_instance:1
msgid ""
"Return the identity key for the given instance, based on its primary key "
"attributes."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_instance:4
#: sqlalchemy.orm.mapper.Mapper.primary_key_from_instance:4
msgid ""
"If the instance's state is expired, calling this method will result in a "
"database check to see if the object has been deleted. If the row no "
"longer exists, :class:`~sqlalchemy.orm.exc.ObjectDeletedError` is raised."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_instance:9
msgid ""
"This value is typically also found on the instance state under the "
"attribute name `key`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_primary_key:1
msgid ""
"Return an identity-map key for use in storing/retrieving an item from an "
"identity map."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_primary_key:4
msgid "A list of values indicating the identifier."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_row:1
msgid ""
"Return an identity-map key for use in storing/retrieving an item from the"
" identity map."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.identity_key_from_row:4
msgid ""
"A :class:`.RowProxy` instance.  The columns which are mapped by this "
":class:`.Mapper` should be locatable in the row, preferably via the "
":class:`.Column` object directly (as is the case when a :func:`.select` "
"construct is executed), or via string names of the form "
"``<tablename>_<colname>``."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.inherits:1
msgid ""
"References the :class:`.Mapper` which this :class:`.Mapper` inherits "
"from, if any."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.isa:1
msgid "Return True if the this mapper inherits from the given mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.iterate_properties:1
msgid "return an iterator of all MapperProperty objects."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.local_table:1
msgid "The :class:`.Selectable` which this :class:`.Mapper` manages."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.local_table:3
msgid ""
"Typically is an instance of :class:`.Table` or :class:`.Alias`. May also "
"be ``None``."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.local_table:6
msgid ""
"The \"local\" table is the selectable that the :class:`.Mapper` is "
"directly responsible for managing from an attribute access and flush "
"perspective.   For non-inheriting mappers, the local table is the same as"
" the \"mapped\" table.   For joined-table inheritance mappers, "
"local_table will be the particular sub-table of the overall \"join\" "
"which this :class:`.Mapper` represents.  If this mapper is a single-table"
" inheriting mapper, local_table will be ``None``."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.local_table:17
msgid ":attr:`~.Mapper.mapped_table`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.mapped_table:1
msgid "The :class:`.Selectable` to which this :class:`.Mapper` is mapped."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.mapped_table:3
msgid ""
"Typically an instance of :class:`.Table`, :class:`.Join`, or "
":class:`.Alias`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.mapped_table:6
msgid ""
"The \"mapped\" table is the selectable that the mapper selects from "
"during queries.   For non-inheriting mappers, the mapped table is the "
"same as the \"local\" table. For joined-table inheritance mappers, "
"mapped_table references the full :class:`.Join` representing full rows "
"for this particular subclass.  For single-table inheritance mappers, "
"mapped_table references the base table."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.mapped_table:16
msgid ":attr:`~.Mapper.local_table`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.mapper:3
msgid "Returns self."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.non_primary:1
msgid ""
"Represent ``True`` if this :class:`.Mapper` is a \"non-primary\" mapper, "
"e.g. a mapper that is used only to selet rows but not for persistence "
"management."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_identity:1
msgid ""
"Represent an identifier which is matched against the "
":attr:`~.Mapper.polymorphic_on` column during result row loading."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_identity:4
msgid ""
"Used only with inheritance, this object can be of any type which is "
"comparable to the type of column represented by "
":attr:`~.Mapper.polymorphic_on`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_iterator:1
msgid ""
"Iterate through the collection including this mapper and all descendant "
"mappers."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_iterator:4
#: sqlalchemy.orm.mapper.Mapper.self_and_descendants:3
msgid ""
"This includes not just the immediately inheriting mappers but all their "
"inheriting mappers as well."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_iterator:7
msgid ""
"To iterate through an entire hierarchy, use "
"``mapper.base_mapper.polymorphic_iterator()``."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_map:1
msgid ""
"A mapping of \"polymorphic identity\" identifiers mapped to "
":class:`.Mapper` instances, within an inheritance scenario."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_map:4
msgid ""
"The identifiers can be of any type which is comparable to the type of "
"column represented by :attr:`~.Mapper.polymorphic_on`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_map:7
msgid ""
"An inheritance chain of mappers will all reference the same polymorphic "
"map object.  The object is used to correlate incoming result rows to "
"target mappers."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_on:1
msgid ""
"The :class:`.Column` or SQL expression specified as the "
"``polymorphic_on`` argument for this :class:`.Mapper`, within an "
"inheritance scenario."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.polymorphic_on:5
msgid ""
"This attribute is normally a :class:`.Column` instance but may also be an"
" expression, such as one derived from :func:`.cast`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.primary_key:1
msgid ""
"An iterable containing the collection of :class:`.Column` objects which "
"comprise the 'primary key' of the mapped table, from the perspective of "
"this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.primary_key:5
msgid ""
"This list is against the selectable in :attr:`~.Mapper.mapped_table`. In "
"the case of inheriting mappers, some columns may be managed by a "
"superclass mapper.  For example, in the case of a :class:`.Join`, the "
"primary key is determined by all of the primary key columns across all "
"tables referenced by the :class:`.Join`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.primary_key:11
msgid ""
"The list is also not necessarily the same as the primary key column "
"collection associated with the underlying tables; the :class:`.Mapper` "
"features a ``primary_key`` argument that can override what the "
":class:`.Mapper` considers as primary key columns."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.primary_key_from_instance:1
msgid "Return the list of primary key values for the given instance."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.primary_mapper:1
msgid ""
"Return the primary mapper corresponding to this mapper's class key "
"(class)."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.relationships:1
msgid ""
"A namespace of all :class:`.RelationshipProperty` properties maintained "
"by this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.relationships:6
msgid ""
"the :attr:`.Mapper.relationships` accessor namespace is an instance of "
":class:`.OrderedProperties`.  This is a dictionary-like object which "
"includes a small number of named methods such as "
":meth:`.OrderedProperties.items` and :meth:`.OrderedProperties.values`.  "
"When accessing attributes dynamically, favor using the dict-access "
"scheme, e.g. ``mapper.relationships[somename]`` over "
"``getattr(mapper.relationships, somename)`` to avoid name collisions."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.selectable:1
msgid ""
"The :func:`.select` construct this :class:`.Mapper` selects from by "
"default."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.selectable:4
msgid ""
"Normally, this is equivalent to :attr:`.mapped_table`, unless the "
"``with_polymorphic`` feature is in use, in which case the full "
"\"polymorphic\" selectable is returned."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.self_and_descendants:1
msgid "The collection including this mapper and all descendant mappers."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.single:1
msgid ""
"Represent ``True`` if this :class:`.Mapper` is a single table inheritance"
" mapper."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.single:4
msgid ":attr:`~.Mapper.local_table` will be ``None`` if this flag is set."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.synonyms:1
msgid ""
"Return a namespace of all :class:`.SynonymProperty` properties maintained"
" by this :class:`.Mapper`."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.tables:1
msgid ""
"An iterable containing the collection of :class:`.Table` objects which "
"this :class:`.Mapper` is aware of."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.tables:4
msgid ""
"If the mapper is mapped to a :class:`.Join`, or an :class:`.Alias` "
"representing a :class:`.Select`, the individual :class:`.Table` objects "
"that comprise the full construct will be represented here."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.validators:1
msgid ""
"An immutable dictionary of attributes which have been decorated using the"
" :func:`~.orm.validates` decorator."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.validators:4
msgid ""
"The dictionary contains string attribute names as keys mapped to the "
"actual validation method."
msgstr ""

#: of sqlalchemy.orm.mapper.Mapper.with_polymorphic_mappers:1
msgid ""
"The list of :class:`.Mapper` objects included in the default "
"\"polymorphic\" query."
msgstr ""

