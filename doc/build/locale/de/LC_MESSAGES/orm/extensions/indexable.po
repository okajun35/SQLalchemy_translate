# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, the SQLAlchemy authors and contributors
# This file is distributed under the same license as the SQLAlchemy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-06 18:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../orm/extensions/indexable.rst:4
msgid "Indexable"
msgstr ""

#: of sqlalchemy.ext.indexable:1
msgid ""
"Define attributes on ORM-mapped classes that have \"index\" attributes "
"for columns with :class:`~.types.Indexable` types."
msgstr ""

#: of sqlalchemy.ext.indexable:4
msgid ""
"\"index\" means the attribute is associated with an element of an "
":class:`~.types.Indexable` column with the predefined index to access it."
" The :class:`~.types.Indexable` types include types such as "
":class:`~.types.ARRAY`, :class:`~.types.JSON` and "
":class:`~.postgresql.HSTORE`."
msgstr ""

#: of sqlalchemy.ext.indexable:12
msgid ""
"The :mod:`~sqlalchemy.ext.indexable` extension provides "
":class:`~.schema.Column`-like interface for any element of an "
":class:`~.types.Indexable` typed column. In simple cases, it can be "
"treated as a :class:`~.schema.Column` - mapped attribute."
msgstr ""

#: of sqlalchemy.ext.indexable:21
msgid "Synopsis"
msgstr ""

#: of sqlalchemy.ext.indexable:23
msgid ""
"Given ``Person`` as a model with a primary key and JSON data field. While"
" this field may have any number of elements encoded within it, we would "
"like to refer to the element called ``name`` individually as a dedicated "
"attribute which behaves like a standalone column::"
msgstr ""

#: of sqlalchemy.ext.indexable:43
msgid ""
"Above, the ``name`` attribute now behaves like a mapped column.   We can "
"compose a new ``Person`` and set the value of ``name``::"
msgstr ""

#: of sqlalchemy.ext.indexable:48
msgid "The value is now accessible::"
msgstr ""

#: of sqlalchemy.ext.indexable:53
msgid ""
"Behind the scenes, the JSON field was initialized to a new blank "
"dictionary and the field was set::"
msgstr ""

#: of sqlalchemy.ext.indexable:59
msgid "The field is mutable in place::"
msgstr ""

#: of sqlalchemy.ext.indexable:67
msgid ""
"When using :class:`.index_property`, the change that we make to the "
"indexable structure is also automatically tracked as history; we no "
"longer need to use :class:`~.mutable.MutableDict` in order to track this "
"change for the unit of work."
msgstr ""

#: of sqlalchemy.ext.indexable:72
msgid "Deletions work normally as well::"
msgstr ""

#: of sqlalchemy.ext.indexable:78
msgid ""
"Above, deletion of ``person.name`` deletes the value from the dictionary,"
" but not the dictionary itself."
msgstr ""

#: of sqlalchemy.ext.indexable:81
msgid "A missing key will produce ``AttributeError``::"
msgstr ""

#: of sqlalchemy.ext.indexable:88
msgid "Unless you set a default value::"
msgstr ""

#: of sqlalchemy.ext.indexable:103
msgid ""
"The attributes are also accessible at the class level. Below, we "
"illustrate ``Person.name`` used to generate an indexed SQL criteria::"
msgstr ""

#: of sqlalchemy.ext.indexable:111
msgid "The above query is equivalent to::"
msgstr ""

#: of sqlalchemy.ext.indexable:115
msgid ""
"Multiple :class:`.index_property` objects can be chained to produce "
"multiple levels of indexing::"
msgstr ""

#: of sqlalchemy.ext.indexable:135
msgid "Above, a query such as::"
msgstr ""

#: of sqlalchemy.ext.indexable:139
msgid "On a PostgreSQL backend, the above query will render as::"
msgstr ""

#: of sqlalchemy.ext.indexable:146
msgid "Default Values"
msgstr ""

#: of sqlalchemy.ext.indexable:148
msgid ""
":class:`.index_property` includes special behaviors for when the indexed "
"data structure does not exist, and a set operation is called:"
msgstr ""

#: of sqlalchemy.ext.indexable:151
msgid ""
"For an :class:`.index_property` that is given an integer index value, the"
" default data structure will be a Python list of ``None`` values, at "
"least as long as the index value; the value is then set at its place in "
"the list.  This means for an index value of zero, the list will be "
"initialized to ``[None]`` before setting the given value, and for an "
"index value of five, the list will be initialized to ``[None, None, None,"
" None, None]`` before setting the fifth element to the given value.   "
"Note that an existing list is **not** extended in place to receive a "
"value."
msgstr ""

#: of sqlalchemy.ext.indexable:161
msgid ""
"for an :class:`.index_property` that is given any other kind of index "
"value (e.g. strings usually), a Python dictionary is used as the default "
"data structure."
msgstr ""

#: of sqlalchemy.ext.indexable:165
msgid ""
"The default data structure can be set to any Python callable using the "
":paramref:`.index_property.datatype` parameter, overriding the previous "
"rules."
msgstr ""

#: of sqlalchemy.ext.indexable:175
msgid "Subclassing"
msgstr ""

#: of sqlalchemy.ext.indexable:177
msgid ""
":class:`.index_property` can be subclassed, in particular for the common "
"use case of providing coercion of values or SQL expressions as they are "
"accessed.  Below is a common recipe for use with a PostgreSQL JSON type, "
"where we want to also include automatic casting plus ``astext()``::"
msgstr ""

#: of sqlalchemy.ext.indexable:191
msgid ""
"The above subclass can be used with the PostgreSQL-specific version of "
":class:`.postgresql.JSON`::"
msgstr ""

#: of sqlalchemy.ext.indexable:208
msgid ""
"The ``age`` attribute at the instance level works as before; however when"
" rendering SQL, PostgreSQL's ``->>`` operator will be used for indexed "
"access, instead of the usual index opearator of ``->``::"
msgstr ""

#: of sqlalchemy.ext.indexable:214
msgid "The above query will render::"
msgstr ""

#: ../../orm/extensions/indexable.rst:9
msgid "API Reference"
msgstr ""

#: of sqlalchemy.ext.indexable.index_property:1
msgid ""
"A property generator. The generated property describes an object "
"attribute that corresponds to an :class:`~.types.Indexable` column."
msgstr ""

#: of sqlalchemy.ext.indexable.index_property:9
msgid ":mod:`sqlalchemy.ext.indexable`"
msgstr ""

